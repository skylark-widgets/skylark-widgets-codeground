{"version":3,"sources":["addons/edit/ace.js"],"names":["define","langx","datax","ace","Addon","util","CodeGround","AddonAce","[object Object]","super","_init","i","coder","this","options","editors","$editors","$","length","$textarea","querySelector","type","data","file","$aceContainer","document","createElement","appendChild","editor","edit","editorOptions","clone","getSession","setMode","getMode","setOptions","$blockScrolling","Infinity","on","editorChange","listenTo","update","params","val","getValue","trigger","e","codes","getCodes","content","code","isString","setValue","categoryName","addonName","register"],"mappings":";;;;;;;AAAAA,QACI,sBACA,oBACA,cACA,cACA,aACA,oBACD,SAAUC,EAAMC,EAAMC,EAAIC,EAAMC,EAAKC,GACpC,mBACMC,UAAiBH,EAGnBI,QACIC,MAAMC,QACN,IAIIC,EAJAC,EAAQC,KAAKD,MACbE,EAAUD,KAAKC,QAInBD,KAAKE,WAMDD,EAAUD,KAAKC,QAAnB,IAEIE,EAAWJ,EAAMK,EAAE,iBACvB,IAAKN,EAAI,EAAGA,EAAIK,EAASE,OAAQP,IAAK,CAClC,IAAIQ,EAAYH,EAASL,GAAGS,cAAc,YACtCC,EAAOnB,EAAMoB,KAAKH,EAAW,cAC7BI,EAAOrB,EAAMoB,KAAKH,EAAW,cAC7BK,EAAgBC,SAASC,cAAc,OAC3CV,EAASL,GAAGgB,YAAYH,GACxB,IAAII,EAASf,KAAKE,QAAQM,GAAQlB,EAAI0B,KAAKL,GACvCM,EAAgB7B,EAAM8B,MAAMjB,GAChCc,EAAOI,aAAaC,QAAQ,YAAc5B,EAAK6B,QAAQb,EAAME,IAC7DK,EAAOI,aAAaG,WAAWL,GAC/BF,EAAOQ,gBAAkBC,EAAAA,EAEzBT,EAAOT,UAAYA,EACnBS,EAAOU,GAAG,SAAUzB,KAAK0B,cACrBlB,KAAAA,KAGRR,KAAK2B,SAAS5B,EAAM,UAAUC,KAAK4B,QACnC5B,KAAK4B,SAGTjC,aAAakC,GACT,MAAO,KACH,IAAId,EAASf,KAAKE,QAAQ2B,EAAOrB,MACjCO,EAAOT,UAAUwB,IAAIf,EAAOgB,YAC5BhB,EAAOT,UAAU0B,QAAQ,WASjCrC,OAAOsC,GACH,IAAIC,EAAQlC,KAAKD,MAAMoC,WACvB,IAAK,IAAI3B,KAAQR,KAAKE,QAAS,CAC3B,IAEIkC,EAFArB,EAASf,KAAKE,QAAQM,GACtB6B,EAAOH,EAAM1B,GAGb4B,EADAhD,EAAMkD,SAASD,GACLA,EAEAA,EAAKD,SAAW,GAE9BrB,EAAOI,aAAaoB,SAASH,IASrCI,0BACI,MAAO,OAGXC,uBACI,MAAO,OAMf,OAFA/C,EAASgD,SAASjD,GAEXC","file":"../../../addons/edit/ace.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    'skylark-domx-data',\n    'skylark-ace',\n    \"../../addon\",\n    '../../util',\n    \"../../codeground\"\n], function (langx,datax,ace,Addon,util,CodeGround) {\n    'use strict';\n    class AddonAce extends Addon {\n        //constructor(coder, options) \n\n        _init() {\n            super._init();\n            var coder = this.coder,\n                options = this.options;\n\n            var priority = 1;\n            var i;\n            this.editors = {};\n            //this.coder = coder;\n            //options = langx.clone(options);\n            //if (typeof //window.ace === 'undefined') {\n            //    retur//n;\n            // }\n            var options = this.options;\n\n            var $editors = coder.$('.codeg-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = datax.data($textarea, 'codeg-type');\n                let file = datax.data($textarea, 'codeg-file');\n                let $aceContainer = document.createElement('div');\n                $editors[i].appendChild($aceContainer);\n                let editor = this.editors[type] = ace.edit($aceContainer);\n                let editorOptions = langx.clone(options);\n                editor.getSession().setMode('ace/mode/' + util.getMode(type, file));\n                editor.getSession().setOptions(editorOptions);\n                editor.$blockScrolling = Infinity;\n\n                editor.$textarea = $textarea;\n                editor.on('change', this.editorChange({\n                    type\n                }));\n            }\n            this.listenTo(coder,\"reseted\",this.update);\n            this.update();\n        }\n        \n        editorChange(params) {\n            return () => {\n                var editor = this.editors[params.type];\n                editor.$textarea.val(editor.getValue());\n                editor.$textarea.trigger(\"change\");\n            };\n\n            ///return () => {\n            ///    var editor = this.editor[params.type];\n            ///    params.content = editor.getValue();\n            ///    this.coder.emit('change', params);\n            ///};\n        }\n        update(e) {\n            var codes = this.coder.getCodes();\n            for (let type in this.editors) {\n                let editor = this.editors[type],\n                    code = codes[type],\n                    content;\n                if (langx.isString(code)) {\n                    content = code;\n                } else {\n                    content = code.content || \"\";\n                }\n                editor.getSession().setValue(content);\n            }\n\n            ///var params = e.data,\n            ///    editor = this.editor[params.type];\n            ///editor.getSession().setValue(params.content);\n        }\n\n\n        static get categoryName() {\n            return \"edit\";\n        }\n\n        static get addonName(){\n            return \"ace\";\n        }        \n    };\n\n    AddonAce.register(CodeGround);\n    \n    return AddonAce;\n});"]}