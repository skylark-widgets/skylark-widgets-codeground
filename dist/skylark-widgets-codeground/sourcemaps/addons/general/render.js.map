{"version":3,"sources":["addons/general/render.js"],"names":["define","langx","$","Addon","util","CodeGround","AddonRender","[object Object]","super","_init","coder","this","supportSrcdoc","options","document","createElement","$resultFrame","window","addEventListener","domready","bind","listenTo","update","content","html","css","js","frameContent","callbacks","index","lastCallback","style","body","script","e","oldFrameContent","codes","getCodes","template","$newResultFrame","replaceWith","contentWindow","open","write","close","attr","jsUrl","location","source","data","JSON","parse","type","categoryName","addonName","register"],"mappings":";;;;;;;AAAAA,QACI,sBACA,qBACA,cACA,aACA,oBACD,SAAUC,EAAMC,EAAEC,EAAMC,EAAKC,GAC5B,mBACMC,UAAqBH,EAGvBI,QACIC,MAAMC,QAEN,IAAIC,EAAQC,KAAKD,MAIbE,GAHUD,KAAKE,WAGI,WAAYC,SAASC,cAAc,YACtDC,EAAeN,EAAMR,EAAE,6BAO3Be,OAAOC,iBAAiB,UAAWP,KAAKQ,SAASC,KAAKT,OAEtDA,KAAKU,SAASX,EAAM,UAAUC,KAAKW,QAEnCX,KAAKC,cAAgBA,EACrBD,KAAKY,SATDC,KAAM,GACNC,IAAK,GACLC,GAAI,IAQRf,KAAKgB,aAZc,GAanBhB,KAAKK,aAAeA,EACpBL,KAAKiB,aACLjB,KAAKkB,MAAQ,EACblB,KAAKmB,aAAe,SAEpBnB,KAAKW,SAETf,SAASwB,EAAQ,GAAIC,EAAO,GAAIC,EAAS,IACrC,uYAcQF,yDAGPC,2MAOQC,oDAKb1B,OAAO2B,GAGH,IAAIC,EAAkBxB,KAAKgB,aAC3B,IAAIS,EAAQzB,KAAKD,MAAM2B,WAQvB,GANA1B,KAAKgB,aAAehB,KAAK2B,SAASF,EAAW,IAAGA,EAAY,KAAGA,EAAU,IACzEzB,KAAKmB,aAAe,MAChBnB,KAAKmB,aAAe,WAIpBnB,KAAKgB,eAAiBQ,EAI1B,GAAIxB,KAAKC,cAAe,CACpB,IAAI2B,EAAkBzB,SAASC,cAAc,UAC7CJ,KAAKK,aAAawB,YAAYD,GAC9B5B,KAAKK,aAAed,EAAEqC,GACtBA,EAAgBE,cAAc3B,SAAS4B,OACvCH,EAAgBE,cAAc3B,SAAS6B,MAAMhC,KAAKgB,cAClDY,EAAgBE,cAAc3B,SAAS8B,YACpC,CACHjC,KAAKK,aAAa6B,KAAK,cAAelC,KAAKgB,cAC3C,IAAImB,EAAQ,8DACZnC,KAAKK,aAAa6B,KAAK,MAAOC,GAC1BnC,KAAKK,aAAa,GAAGyB,gBACrB9B,KAAKK,aAAa,GAAGyB,cAAcM,SAAWD,IAI1DvC,SAAS2B,GACL,GAAIA,EAAEc,SAAWrC,KAAKK,aAAa,GAAGyB,cAAtC,CAGA,IAAIQ,KACJ,IACIA,EAAOC,KAAKC,MAAMjB,EAAEe,MACtB,MAAOf,IAES,oBAAde,EAAKG,MACLzC,KAAKmB,gBAIbuB,0BACI,MAAO,UAGXC,uBACI,MAAO,UAOf,OAFAhD,EAAYiD,SAASlD,GAEdC","file":"../../../addons/general/render.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    \"skylark-domx-query\",\n    \"../../addon\",\n    '../../util',\n    \"../../codeground\"\n], function (langx,$,Addon,util,CodeGround) {\n    'use strict';\n    class AddonRender  extends Addon{\n        //constructor(coder, options) \n\n        _init() {\n            super._init();\n\n            var coder = this.coder,\n                options = this.options;\n\n\n            var supportSrcdoc = !!('srcdoc' in document.createElement('iframe'));\n            var $resultFrame = coder.$('.codeg-pane-result iframe');\n            var frameContent = '';\n            var content = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            window.addEventListener('message', this.domready.bind(this));\n\n            this.listenTo(coder,\"changed\",this.update);\n\n            this.supportSrcdoc = supportSrcdoc;\n            this.content = content;\n            this.frameContent = frameContent;\n            this.$resultFrame = $resultFrame;\n            this.callbacks = [];\n            this.index = 0;\n            this.lastCallback = () => {\n            };\n            this.update();\n        }\n        template(style = '', body = '', script = '') {\n            return `\n      <!doctype html>\n      <html>\n        <head>\n          <script>\n            (function () {\n              window.addEventListener('DOMContentLoaded', function () {\n                window.parent.postMessage(JSON.stringify({\n                  type: 'codeg-dom-ready'\n                }), '*')\n              })\n            }())\n          </script>\n\n          <style>${ style }</style>\n        </head>\n        <body>\n          ${ body }\n\n          <!--\n            CodeGround:\n            Empty script tag prevents malformed HTML from breaking the next script.\n          -->\n          <script></script>\n          <script>${ script }</script>\n        </body>\n      </html>\n    `;\n        }\n        update(e) {\n            //var params = e.data;\n            //this.content[params.type] = params.content;\n            var oldFrameContent = this.frameContent;\n            let codes = this.coder.getCodes();\n\n            this.frameContent = this.template(codes['css'], codes['html'], codes['js']);\n            this.lastCallback = () => {\n                this.lastCallback = () => {\n                };\n                //callback(null, params);\n            };\n            if (this.frameContent === oldFrameContent) {\n                //callback(null, params);\n                return;\n            }\n            if (this.supportSrcdoc) {\n                var $newResultFrame = document.createElement('iframe');\n                this.$resultFrame.replaceWith($newResultFrame);\n                this.$resultFrame = $($newResultFrame);\n                $newResultFrame.contentWindow.document.open();\n                $newResultFrame.contentWindow.document.write(this.frameContent);\n                $newResultFrame.contentWindow.document.close();\n            } else {\n                this.$resultFrame.attr('data-srcdoc', this.frameContent);\n                var jsUrl = 'javascript:window.frameElement.getAttribute(\"data-srcdoc\");';\n                this.$resultFrame.attr('src', jsUrl);\n                if (this.$resultFrame[0].contentWindow) {\n                    this.$resultFrame[0].contentWindow.location = jsUrl;\n                }\n            }\n        }\n        domready(e) {\n            if (e.source !== this.$resultFrame[0].contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (e) {\n            }\n            if (data.type === 'codeg-dom-ready') {\n                this.lastCallback();\n            }\n        }\n\n        static get categoryName() {\n            return \"general\";\n        }\n\n        static get addonName(){\n            return \"render\";\n        }\n\n    };\n\n    AddonRender.register(CodeGround);\n\n    return AddonRender;\n});"]}