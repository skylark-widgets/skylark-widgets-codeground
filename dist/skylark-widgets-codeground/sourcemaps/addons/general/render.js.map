{"version":3,"sources":["addons/general/render.js"],"names":["define","langx","$","Addon","util","CodeGround","AddonRender","options","html","template","codes","style","js","[object Object]","super","_init","coder","this","supportSrcdoc","document","createElement","$resultFrame","window","addEventListener","domready","bind","listenTo","update","content","css","frameContent","callbacks","index","lastCallback","_renderHtml","htmlTpl","isString","isFunction","e","oldFrameContent","getCodes","_render","$newResultFrame","replaceWith","contentWindow","open","write","close","attr","jsUrl","location","source","data","JSON","parse","type","categoryName","addonName","register"],"mappings":";;;;;;;AAAAA,QACI,sBACA,qBACA,cACA,aACA,oBACD,SAAUC,EAAMC,EAAEC,EAAMC,EAAKC,GAC5B,mBACMC,UAAqBH,EAIvBI,cACI,OACIC,MACIC,SAAW,SAAUC,GAIjB,2oBAHYA,EAAMC,OAAS,sHAChBD,EAAMF,MAAQ,oUACZE,EAAME,IAAM,oHAqCzCC,QACIC,MAAMC,QAEN,IAAIC,EAAQC,KAAKD,MAIbE,GAHUD,KAAKV,WAGI,WAAYY,SAASC,cAAc,YACtDC,EAAeL,EAAMd,EAAE,6BAO3BoB,OAAOC,iBAAiB,UAAWN,KAAKO,SAASC,KAAKR,OAEtDA,KAAKS,SAASV,EAAM,UAAUC,KAAKU,QAEnCV,KAAKC,cAAgBA,EACrBD,KAAKW,SATDpB,KAAM,GACNqB,IAAK,GACLjB,GAAI,IAQRK,KAAKa,aAZc,GAanBb,KAAKI,aAAeA,EACpBJ,KAAKc,aACLd,KAAKe,MAAQ,EACbf,KAAKgB,aAAe,SAEpBhB,KAAKU,SAGTd,QAAQH,GACN,IAAKO,KAAKiB,YAAa,CACrB,IAAIC,EAAUlB,KAAKV,QAAQC,KAAKC,SAC5BR,EAAMmC,SAASD,GACjBlB,KAAKiB,YAAcjC,EAAMQ,SAAS0B,GACzBlC,EAAMoC,WAAWF,KAC1BlB,KAAKiB,YAAcC,GAIvB,OAAOlB,KAAKiB,YAAYxB,GAG1BG,OAAOyB,GAGH,IAAIC,EAAkBtB,KAAKa,aAC3B,IAAIpB,EAAQO,KAAKD,MAAMwB,WAQvB,GANAvB,KAAKa,aAAeb,KAAKwB,QAAQ/B,GACjCO,KAAKgB,aAAe,MAChBhB,KAAKgB,aAAe,WAIpBhB,KAAKa,eAAiBS,EAI1B,GAAItB,KAAKC,cAAe,CACpB,IAAIwB,EAAkBvB,SAASC,cAAc,UAC7CH,KAAKI,aAAasB,YAAYD,GAC9BzB,KAAKI,aAAenB,EAAEwC,GACtBA,EAAgBE,cAAczB,SAAS0B,OACvCH,EAAgBE,cAAczB,SAAS2B,MAAM7B,KAAKa,cAClDY,EAAgBE,cAAczB,SAAS4B,YACpC,CACH9B,KAAKI,aAAa2B,KAAK,cAAe/B,KAAKa,cAC3C,IAAImB,EAAQ,8DACZhC,KAAKI,aAAa2B,KAAK,MAAOC,GAC1BhC,KAAKI,aAAa,GAAGuB,gBACrB3B,KAAKI,aAAa,GAAGuB,cAAcM,SAAWD,IAI1DpC,SAASyB,GACL,GAAIA,EAAEa,SAAWlC,KAAKI,aAAa,GAAGuB,cAAtC,CAGA,IAAIQ,KACJ,IACIA,EAAOC,KAAKC,MAAMhB,EAAEc,MACtB,MAAOd,IAES,oBAAdc,EAAKG,MACLtC,KAAKgB,gBAIbuB,0BACI,MAAO,UAGXC,uBACI,MAAO,UAOf,OAFAnD,EAAYoD,SAASrD,GAEdC","file":"../../../addons/general/render.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    \"skylark-domx-query\",\n    \"../../addon\",\n    '../../util',\n    \"../../codeground\"\n], function (langx,$,Addon,util,CodeGround) {\n    'use strict';\n    class AddonRender  extends Addon{\n        //constructor(coder, options) \n\n        //default options\n        get options () {\n            return  {\n                html : {\n                    template : function (codes) {\n                        let style = codes.style || \"\",\n                            body = codes.html || \"\", \n                            script = codes.js || \"\";\n                        return   `\n                          <!doctype html>\n                          <html>\n                            <head>\n                              <script>\n                                (function () {\n                                  window.addEventListener('DOMContentLoaded', function () {\n                                    window.parent.postMessage(JSON.stringify({\n                                      type: 'codeg-dom-ready'\n                                    }), '*')\n                                  })\n                                }())\n                              </script>\n\n                              <style>${ style }</style>\n                            </head>\n                            <body>\n                              ${ body }\n\n                              <!--\n                                CodeGround:\n                                Empty script tag prevents malformed HTML from breaking the next script.\n                              -->\n                              <script></script>\n                              <script>${ script }</script>\n                            </body>\n                          </html>\n                        `;\n                    }                    \n                }\n\n\n            }\n\n        }\n\n        _init() {\n            super._init();\n\n            var coder = this.coder,\n                options = this.options;\n\n\n            var supportSrcdoc = !!('srcdoc' in document.createElement('iframe'));\n            var $resultFrame = coder.$('.codeg-pane-result iframe');\n            var frameContent = '';\n            var content = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            window.addEventListener('message', this.domready.bind(this));\n\n            this.listenTo(coder,\"changed\",this.update);\n\n            this.supportSrcdoc = supportSrcdoc;\n            this.content = content;\n            this.frameContent = frameContent;\n            this.$resultFrame = $resultFrame;\n            this.callbacks = [];\n            this.index = 0;\n            this.lastCallback = () => {\n            };\n            this.update();\n        }\n\n        _render(codes){\n          if (!this._renderHtml) {\n            let htmlTpl = this.options.html.template;\n            if (langx.isString(htmlTpl)) {\n              this._renderHtml = langx.template(htmlTpl);\n            } else if (langx.isFunction(htmlTpl)) {\n              this._renderHtml = htmlTpl;\n            }\n          }\n\n          return this._renderHtml(codes);\n        }\n\n        update(e) {\n            //var params = e.data;\n            //this.content[params.type] = params.content;\n            var oldFrameContent = this.frameContent;\n            let codes = this.coder.getCodes();\n\n            this.frameContent = this._render(codes);\n            this.lastCallback = () => {\n                this.lastCallback = () => {\n                };\n                //callback(null, params);\n            };\n            if (this.frameContent === oldFrameContent) {\n                //callback(null, params);\n                return;\n            }\n            if (this.supportSrcdoc) {\n                var $newResultFrame = document.createElement('iframe');\n                this.$resultFrame.replaceWith($newResultFrame);\n                this.$resultFrame = $($newResultFrame);\n                $newResultFrame.contentWindow.document.open();\n                $newResultFrame.contentWindow.document.write(this.frameContent);\n                $newResultFrame.contentWindow.document.close();\n            } else {\n                this.$resultFrame.attr('data-srcdoc', this.frameContent);\n                var jsUrl = 'javascript:window.frameElement.getAttribute(\"data-srcdoc\");';\n                this.$resultFrame.attr('src', jsUrl);\n                if (this.$resultFrame[0].contentWindow) {\n                    this.$resultFrame[0].contentWindow.location = jsUrl;\n                }\n            }\n        }\n        domready(e) {\n            if (e.source !== this.$resultFrame[0].contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (e) {\n            }\n            if (data.type === 'codeg-dom-ready') {\n                this.lastCallback();\n            }\n        }\n\n        static get categoryName() {\n            return \"general\";\n        }\n\n        static get addonName(){\n            return \"render\";\n        }\n\n    };\n\n    AddonRender.register(CodeGround);\n\n    return AddonRender;\n});"]}