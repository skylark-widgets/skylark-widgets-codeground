{"version":3,"sources":["Coder.js"],"names":["define","skylark","langx","Widget","styler","datax","util","template","plugin","Coder","klassName","pluginName","options","files","showBlank","runScripts","pane","debounce","plugins","[object Object]","$coderContainer","opts","_private","this","_get","key","_set","value","push","html","css","js","$container","_elm","innerHTML","container","addClass","containerClass","paneActive","paneActiveClass","type","markup","addEventListener","change","bind","init","call","load","hasFileClass","fileIndex","file","$parent","querySelector","findFile","$editor","document","createElement","editorContent","url","className","editorClass","appendChild","content","$textarea","setValue","status","statusLoading","fetch","err","res","statusFetchError","clearStatus","val","target","e","data","cachedContent","emit","errs","params","removeClass","preventDefault","statusType","messages","length","$status","statusClass","statusActiveClass","forEach","statusMessage","register","apply","arguments","attach"],"mappings":"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","file":"../Coder.js","sourcesContent":["define([\n    'skylark-langx/skylark',\n    'skylark-langx/langx',\n    'skylark-widgets-base/Widget',\n    \"skylark-domx-styler\",\n    \"skylark-domx-data\",\n    './util',\n    './template',\n    './plugin',\n], function (skylark,langx,Widget, styler,datax,util, template, plugin) {\n    'use strict';\n    class Coder extends Widget{\n        get klassName() {\n          return \"Coder\";\n        } \n\n        get pluginName(){\n          return \"lark.coder\";\n        } \n\n        //default options\n        get options () {\n            return {\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                plugins: []\n            }\n        }\n\n        _init ($coderContainer, opts) {\n            //if (!$coderContainer) {\n            //    throw new Error(\"Can't find Coder container.\");\n            // }\n            var _private = {};\n            this._get = function (key) {\n                return _private[key];\n            };\n            this._set = function (key, value) {\n                _private[key] = value;\n                return _private[key];\n            };\n\n            /*\n            var options = this._set('options', langx.extend({\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                plugins: []\n            },opts));\n            */\n            var options = this.options;\n            options.plugins.push('render');\n            if (options.runScripts === false) {\n                options.plugins.push('scriptless');\n            }\n            this._set('cachedContent', {\n                html: null,\n                css: null,\n                js: null\n            });\n\n            /*\n            var pubsoup = this._set('pubsoup', new PubSoup());\n            this._set('trigger', this.trigger());\n            this._set('on', function () {\n                pubsoup.subscribe.apply(pubsoup, arguments);\n            });\n            this._set('off', function () {\n                pubsoup.unsubscribe.apply(pubsoup, arguments);\n            });\n            var done = this._set('done', function () {\n                pubsoup.done.apply(pubsoup, arguments);\n            });\n            done('change', this.errors.bind(this));\n            var $container = this._set('$container', $coderContainer);\n            */\n            var $container = this.$container = this._elm;\n            $container.innerHTML = template.container();\n            styler.addClass($container, template.containerClass());\n            var paneActive = this._set('paneActive', options.pane);\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            this._set('$status', {});\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.markup(type);\n            }\n            $container.addEventListener('keyup', langx.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('change', langx.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('click', this.pane.bind(this));\n            //this.$container = this._get('$container');\n\n            //this.on = this._get('on');\n            //this.off = this._get('off');\n            //this.done = this._get('done');\n            //this.trigger = this._get('trigger');\n            this.paneActive = this._get('paneActive');\n            this._set('plugins', {});\n            plugin.init.call(this);\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.load(type);\n            }\n            if (options.showBlank) {\n                for (let type of [\n                        'html',\n                        'css',\n                        'js'\n                    ]) {\n                    styler.addClass($container, template.hasFileClass(type));\n                }\n            }\n        }\n\n        findFile(type) {\n            var file = {};\n            //var options = this._get('options');\n            var options = this.options;\n            for (let fileIndex in options.files) {\n                let file = options.files[fileIndex];\n                if (file.type === type) {\n                    return file;\n                }\n            }\n            return file;\n        }\n        markup(type) {\n            //var $container = this._get('$container');\n            var $container = this._elm;\n            var $parent = $container.querySelector(`.coder-pane-${ type }`);\n            var file = this.findFile(type);\n            var $editor = document.createElement('div');\n            $editor.innerHTML = template.editorContent(type, file.url);\n            $editor.className = template.editorClass(type);\n            $parent.appendChild($editor);\n            this._get('$status')[type] = $parent.querySelector('.coder-status');\n            if (typeof file.url !== 'undefined' || typeof file.content !== 'undefined') {\n                styler.addClass($container, template.hasFileClass(type));\n            }\n        }\n        load(type) {\n            var file = this.findFile(type);\n            //var $textarea = this._get('$container').querySelector(`.coder-pane-${ type } textarea`);\n            var $textarea = this._elm.querySelector(`.coder-pane-${ type } textarea`);\n            if (typeof file.content !== 'undefined') {\n                this.setValue($textarea, file.content);\n            } else if (typeof file.url !== 'undefined') {\n                this.status('loading', [template.statusLoading(file.url)], {\n                    type: type,\n                    file: file\n                });\n                util.fetch(file.url, (err, res) => {\n                    if (err) {\n                        this.status('error', [template.statusFetchError(err)], { type: type });\n                        return;\n                    }\n                    this.clearStatus('loading', { type: type });\n                    this.setValue($textarea, res);\n                });\n            } else {\n                this.setValue($textarea, '');\n            }\n        }\n        setValue($textarea, val) {\n            $textarea.value = val;\n            this.change({ target: $textarea });\n        }\n        change(e) {\n            var type = datax.data(e.target, 'coder-type');\n            if (!type) {\n                return;\n            }\n            var cachedContent = this._get('cachedContent');\n            if (cachedContent[type] === e.target.value) {\n                return;\n            }\n            cachedContent[type] = e.target.value;\n            this.emit('change', { data : {\n                type: type,\n                file: datax.data(e.target, 'coder-file'),\n                content: cachedContent[type]\n            }});\n        }\n        errors(errs, params) {\n            this.status('error', errs, params);\n        }\n        pane(e) {\n            if (!datax.data(e.target, 'coder-type')) {\n                return;\n            }\n            //var $container = this._get('$container');\n            var $container = this._elm;\n            var paneActive = this._get('paneActive');\n            styler.removeClass($container, template.paneActiveClass(paneActive));\n            paneActive = this._set('paneActive', datax.data(e.target, 'coder-type'));\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            e.preventDefault();\n        }\n        status(statusType = 'error', messages = [], params = {}) {\n            if (!messages.length) {\n                return this.clearStatus(statusType, params);\n            }\n            var $status = this._get('$status');\n            styler.addClass($status[params.type], template.statusClass(statusType));\n            //styler.addClass(this._get('$container'), template.statusActiveClass(params.type));\n            styler.addClass(this._elm, template.statusActiveClass(params.type));\n            var markup = '';\n            messages.forEach(function (err) {\n                markup += template.statusMessage(err);\n            });\n            $status[params.type].innerHTML = markup;\n        }\n        clearStatus(statusType, params) {\n            var $status = this._get('$status');\n            styler.removeClass($status[params.type], template.statusClass(statusType));\n            //styler.removeClass(this._get('$container'), template.statusActiveClass(params.type));\n            styler.removeClass(this._elm, template.statusActiveClass(params.type));\n            $status[params.type].innerHTML = '';\n        }\n    }\n    Coder.plugin = function () {\n        return plugin.register.apply(this, arguments);\n    };\n\n    return skylark.attach(\"widgets.Coder\",Coder);\n});"]}