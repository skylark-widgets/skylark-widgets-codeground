{"version":3,"sources":["Coder.js"],"names":["define","skylark","langx","Widget","styler","datax","util","template","plugin","PubSoup","BundlePlugins","Coder","klassName","pluginName","[object Object]","$coderContainer","opts","super","Error","_private","this","_get","key","_set","value","options","extend","files","showBlank","runScripts","pane","debounce","plugins","push","html","css","js","pubsoup","trigger","subscribe","apply","arguments","unsubscribe","done","errors","bind","$container","innerHTML","container","addClass","containerClass","paneActive","paneActiveClass","type","markup","addEventListener","change","on","off","init","call","load","hasFileClass","fileIndex","file","$parent","querySelector","findFile","$editor","document","createElement","editorContent","url","className","editorClass","appendChild","content","$textarea","setValue","status","statusLoading","fetch","err","res","statusFetchError","clearStatus","val","target","e","data","cachedContent","errs","params","removeClass","preventDefault","statusType","messages","length","$status","statusClass","statusActiveClass","forEach","statusMessage","publish","cooldown","multiple","topic","clearTimeout","setTimeout","register","attach"],"mappings":";;;;;;;AAAAA,QACI,wBACA,sBACA,8BACA,sBACA,oBACA,SACA,aACA,WACA,aACD,SAAUC,EAAQC,EAAMC,EAAQC,EAAOC,EAAMC,EAAMC,EAAUC,EAAQC,EAASC,GAC7E,mBACMC,UAAcR,EAChBS,gBACE,MAAO,QAGTC,iBACE,MAAO,aAGTC,YAAYC,EAAiBC,GAEzB,GADAC,MAAMF,EAAiBC,IAClBD,EACD,MAAM,IAAIG,MAAM,+BAEpB,IAAIC,KACJC,KAAKC,KAAO,SAAUC,GAClB,OAAOH,EAASG,IAEpBF,KAAKG,KAAO,SAAUD,EAAKE,GAEvB,OADAL,EAASG,GAAOE,EACTL,EAASG,IAEpB,IAAIG,EAAUL,KAAKG,KAAK,UAAWrB,EAAMwB,QACrCC,SACAC,WAAW,EACXC,YAAY,EACZC,KAAM,SACNC,SAAU,IACVC,YACFhB,IACFS,EAAQO,QAAQC,KAAK,WACM,IAAvBR,EAAQI,YACRJ,EAAQO,QAAQC,KAAK,cAEzBb,KAAKG,KAAK,iBACNW,KAAM,KACNC,IAAK,KACLC,GAAI,OAER,IAAIC,EAAUjB,KAAKG,KAAK,UAAW,IAAId,GACvCW,KAAKG,KAAK,UAAWH,KAAKkB,WAC1BlB,KAAKG,KAAK,KAAM,WACZc,EAAQE,UAAUC,MAAMH,EAASI,aAErCrB,KAAKG,KAAK,MAAO,WACbc,EAAQK,YAAYF,MAAMH,EAASI,aAE5BrB,KAAKG,KAAK,OAAQ,WACzBc,EAAQM,KAAKH,MAAMH,EAASI,YAEhCE,CAAK,SAAUvB,KAAKwB,OAAOC,KAAKzB,OAChC,IAAI0B,EAAa1B,KAAKG,KAAK,aAAcR,GACzC+B,EAAWC,UAAYxC,EAASyC,YAChC5C,EAAO6C,SAASH,EAAYvC,EAAS2C,kBACrC,IAAIC,EAAa/B,KAAKG,KAAK,aAAcE,EAAQK,MACjD1B,EAAO6C,SAASH,EAAYvC,EAAS6C,gBAAgBD,IACrD/B,KAAKG,KAAK,cACV,IAAK,IAAI8B,KACD,OACA,MACA,MAEJjC,KAAKkC,OAAOD,GAEhBP,EAAWS,iBAAiB,QAASrD,EAAM6B,SAASX,KAAKoC,OAAOX,KAAKzB,MAAOK,EAAQM,WACpFe,EAAWS,iBAAiB,SAAUrD,EAAM6B,SAASX,KAAKoC,OAAOX,KAAKzB,MAAOK,EAAQM,WACrFe,EAAWS,iBAAiB,QAASnC,KAAKU,KAAKe,KAAKzB,OACpDA,KAAK0B,WAAa1B,KAAKC,KAAK,cAC5BD,KAAKqC,GAAKrC,KAAKC,KAAK,MACpBD,KAAKsC,IAAMtC,KAAKC,KAAK,OACrBD,KAAKuB,KAAOvB,KAAKC,KAAK,QACtBD,KAAKkB,QAAUlB,KAAKC,KAAK,WACzBD,KAAK+B,WAAa/B,KAAKC,KAAK,cAC5BD,KAAKG,KAAK,cACVf,EAAOmD,KAAKC,KAAKxC,MACjB,IAAK,IAAIiC,KACD,OACA,MACA,MAEJjC,KAAKyC,KAAKR,GAEd,GAAI5B,EAAQG,UACR,IAAK,IAAIyB,KACD,OACA,MACA,MAEJjD,EAAO6C,SAASH,EAAYvC,EAASuD,aAAaT,IAK9DvC,SAASuC,GACL,IACI5B,EAAUL,KAAKC,KAAK,WACxB,IAAK,IAAI0C,KAAatC,EAAQE,MAAO,CACjC,IAAIqC,EAAOvC,EAAQE,MAAMoC,GACzB,GAAIC,EAAKX,OAASA,EACd,OAAOW,EAGf,SAEJlD,OAAOuC,GACH,IAAIP,EAAa1B,KAAKC,KAAK,cACvB4C,EAAUnB,EAAWoB,6BAA8Bb,KACnDW,EAAO5C,KAAK+C,SAASd,GACrBe,EAAUC,SAASC,cAAc,OACrCF,EAAQrB,UAAYxC,EAASgE,cAAclB,EAAMW,EAAKQ,KACtDJ,EAAQK,UAAYlE,EAASmE,YAAYrB,GACzCY,EAAQU,YAAYP,GACpBhD,KAAKC,KAAK,WAAWgC,GAAQY,EAAQC,cAAc,sBAC3B,IAAbF,EAAKQ,UAA+C,IAAjBR,EAAKY,SAC/CxE,EAAO6C,SAASH,EAAYvC,EAASuD,aAAaT,IAG1DvC,KAAKuC,GACD,IAAIW,EAAO5C,KAAK+C,SAASd,GACrBwB,EAAYzD,KAAKC,KAAK,cAAc6C,6BAA8Bb,mBAC1C,IAAjBW,EAAKY,QACZxD,KAAK0D,SAASD,EAAWb,EAAKY,cACH,IAAbZ,EAAKQ,KACnBpD,KAAK2D,OAAO,WAAYxE,EAASyE,cAAchB,EAAKQ,OAChDnB,KAAMA,EACNW,KAAMA,IAEV1D,EAAK2E,MAAMjB,EAAKQ,IAAK,CAACU,EAAKC,KACnBD,EACA9D,KAAK2D,OAAO,SAAUxE,EAAS6E,iBAAiBF,KAAS7B,KAAMA,KAGnEjC,KAAKiE,YAAY,WAAahC,KAAMA,IACpCjC,KAAK0D,SAASD,EAAWM,OAG7B/D,KAAK0D,SAASD,EAAW,IAGjC/D,SAAS+D,EAAWS,GAChBT,EAAUrD,MAAQ8D,EAClBlE,KAAKoC,QAAS+B,OAAQV,IAE1B/D,OAAO0E,GACH,IAAInC,EAAOhD,EAAMoF,KAAKD,EAAED,OAAQ,cAChC,GAAKlC,EAAL,CAGA,IAAIqC,EAAgBtE,KAAKC,KAAK,iBAC1BqE,EAAcrC,KAAUmC,EAAED,OAAO/D,QAGrCkE,EAAcrC,GAAQmC,EAAED,OAAO/D,MAC/BJ,KAAKkB,QAAQ,UACTe,KAAMA,EACNW,KAAM3D,EAAMoF,KAAKD,EAAED,OAAQ,cAC3BX,QAASc,EAAcrC,OAG/BvC,OAAO6E,EAAMC,GACTxE,KAAK2D,OAAO,QAASY,EAAMC,GAE/B9E,KAAK0E,GACD,GAAKnF,EAAMoF,KAAKD,EAAED,OAAQ,cAA1B,CAGA,IAAIzC,EAAa1B,KAAKC,KAAK,cACvB8B,EAAa/B,KAAKC,KAAK,cAC3BjB,EAAOyF,YAAY/C,EAAYvC,EAAS6C,gBAAgBD,IACxDA,EAAa/B,KAAKG,KAAK,aAAclB,EAAMoF,KAAKD,EAAED,OAAQ,eAC1DnF,EAAO6C,SAASH,EAAYvC,EAAS6C,gBAAgBD,IACrDqC,EAAEM,kBAENhF,OAAOiF,EAAa,QAASC,KAAeJ,MACxC,IAAKI,EAASC,OACV,OAAO7E,KAAKiE,YAAYU,EAAYH,GAExC,IAAIM,EAAU9E,KAAKC,KAAK,WACxBjB,EAAO6C,SAASiD,EAAQN,EAAOvC,MAAO9C,EAAS4F,YAAYJ,IAC3D3F,EAAO6C,SAAS7B,KAAKC,KAAK,cAAed,EAAS6F,kBAAkBR,EAAOvC,OAC3E,IAAIC,EAAS,GACb0C,EAASK,QAAQ,SAAUnB,GACvB5B,GAAU/C,EAAS+F,cAAcpB,KAErCgB,EAAQN,EAAOvC,MAAMN,UAAYO,EAErCxC,YAAYiF,EAAYH,GACpB,IAAIM,EAAU9E,KAAKC,KAAK,WACxBjB,EAAOyF,YAAYK,EAAQN,EAAOvC,MAAO9C,EAAS4F,YAAYJ,IAC9D3F,EAAOyF,YAAYzE,KAAKC,KAAK,cAAed,EAAS6F,kBAAkBR,EAAOvC,OAC9E6C,EAAQN,EAAOvC,MAAMN,UAAY,GAErCjC,UACI,IAAIW,EAAUL,KAAKC,KAAK,WACpBgB,EAAUjB,KAAKC,KAAK,WACxB,IAAyB,IAArBI,EAAQM,SACR,OAAO,WACHM,EAAQkE,QAAQ/D,MAAMH,EAASI,YAGvC,IAAI+D,KACAC,KACJ,OAAO,SAAUC,GAAOrD,KACpBA,EAAO,eAEHmD,EAASnD,GACToD,EAASpD,IAAQ,EAEjBhB,EAAQkE,QAAQ/D,MAAMH,EAASI,WAEnCkE,aAAaH,EAASnD,IACtBmD,EAASnD,GAAQuD,WAAW,KACpBH,EAASpD,IACThB,EAAQkE,QAAQ/D,MAAMH,EAASI,WAEnCgE,EAASpD,GAAQ,KACjBmD,EAASnD,GAAQ,MAClB5B,EAAQM,YAQvB,OAJApB,EAAMH,OAAS,WACX,OAAOA,EAAOqG,SAASrE,MAAMpB,KAAMqB,YAGhCxC,EAAQ6G,OAAO,gBAAgBnG","file":"../Coder.js","sourcesContent":["define([\n    'skylark-langx/skylark',\n    'skylark-langx/langx',\n    'skylark-widgets-base/Widget',\n    \"skylark-domx-styler\",\n    \"skylark-domx-data\",\n    './util',\n    './template',\n    './plugin',\n    './pubsoup'\n], function (skylark,langx,Widget, styler,datax,util, template, plugin, PubSoup, BundlePlugins) {\n    'use strict';\n    class Coder extends Widget{\n        get klassName() {\n          return \"Coder\";\n        } \n\n        get pluginName(){\n          return \"lark.coder\";\n        } \n\n        constructor($coderContainer, opts) {\n            super($coderContainer, opts);\n            if (!$coderContainer) {\n                throw new Error(\"Can't find Coder container.\");\n            }\n            var _private = {};\n            this._get = function (key) {\n                return _private[key];\n            };\n            this._set = function (key, value) {\n                _private[key] = value;\n                return _private[key];\n            };\n            var options = this._set('options', langx.extend({\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                plugins: []\n            },opts));\n            options.plugins.push('render');\n            if (options.runScripts === false) {\n                options.plugins.push('scriptless');\n            }\n            this._set('cachedContent', {\n                html: null,\n                css: null,\n                js: null\n            });\n            var pubsoup = this._set('pubsoup', new PubSoup());\n            this._set('trigger', this.trigger());\n            this._set('on', function () {\n                pubsoup.subscribe.apply(pubsoup, arguments);\n            });\n            this._set('off', function () {\n                pubsoup.unsubscribe.apply(pubsoup, arguments);\n            });\n            var done = this._set('done', function () {\n                pubsoup.done.apply(pubsoup, arguments);\n            });\n            done('change', this.errors.bind(this));\n            var $container = this._set('$container', $coderContainer);\n            $container.innerHTML = template.container();\n            styler.addClass($container, template.containerClass());\n            var paneActive = this._set('paneActive', options.pane);\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            this._set('$status', {});\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.markup(type);\n            }\n            $container.addEventListener('keyup', langx.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('change', langx.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('click', this.pane.bind(this));\n            this.$container = this._get('$container');\n            this.on = this._get('on');\n            this.off = this._get('off');\n            this.done = this._get('done');\n            this.trigger = this._get('trigger');\n            this.paneActive = this._get('paneActive');\n            this._set('plugins', {});\n            plugin.init.call(this);\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.load(type);\n            }\n            if (options.showBlank) {\n                for (let type of [\n                        'html',\n                        'css',\n                        'js'\n                    ]) {\n                    styler.addClass($container, template.hasFileClass(type));\n                }\n            }\n        }\n\n        findFile(type) {\n            var file = {};\n            var options = this._get('options');\n            for (let fileIndex in options.files) {\n                let file = options.files[fileIndex];\n                if (file.type === type) {\n                    return file;\n                }\n            }\n            return file;\n        }\n        markup(type) {\n            var $container = this._get('$container');\n            var $parent = $container.querySelector(`.coder-pane-${ type }`);\n            var file = this.findFile(type);\n            var $editor = document.createElement('div');\n            $editor.innerHTML = template.editorContent(type, file.url);\n            $editor.className = template.editorClass(type);\n            $parent.appendChild($editor);\n            this._get('$status')[type] = $parent.querySelector('.coder-status');\n            if (typeof file.url !== 'undefined' || typeof file.content !== 'undefined') {\n                styler.addClass($container, template.hasFileClass(type));\n            }\n        }\n        load(type) {\n            var file = this.findFile(type);\n            var $textarea = this._get('$container').querySelector(`.coder-pane-${ type } textarea`);\n            if (typeof file.content !== 'undefined') {\n                this.setValue($textarea, file.content);\n            } else if (typeof file.url !== 'undefined') {\n                this.status('loading', [template.statusLoading(file.url)], {\n                    type: type,\n                    file: file\n                });\n                util.fetch(file.url, (err, res) => {\n                    if (err) {\n                        this.status('error', [template.statusFetchError(err)], { type: type });\n                        return;\n                    }\n                    this.clearStatus('loading', { type: type });\n                    this.setValue($textarea, res);\n                });\n            } else {\n                this.setValue($textarea, '');\n            }\n        }\n        setValue($textarea, val) {\n            $textarea.value = val;\n            this.change({ target: $textarea });\n        }\n        change(e) {\n            var type = datax.data(e.target, 'coder-type');\n            if (!type) {\n                return;\n            }\n            var cachedContent = this._get('cachedContent');\n            if (cachedContent[type] === e.target.value) {\n                return;\n            }\n            cachedContent[type] = e.target.value;\n            this.trigger('change', {\n                type: type,\n                file: datax.data(e.target, 'coder-file'),\n                content: cachedContent[type]\n            });\n        }\n        errors(errs, params) {\n            this.status('error', errs, params);\n        }\n        pane(e) {\n            if (!datax.data(e.target, 'coder-type')) {\n                return;\n            }\n            var $container = this._get('$container');\n            var paneActive = this._get('paneActive');\n            styler.removeClass($container, template.paneActiveClass(paneActive));\n            paneActive = this._set('paneActive', datax.data(e.target, 'coder-type'));\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            e.preventDefault();\n        }\n        status(statusType = 'error', messages = [], params = {}) {\n            if (!messages.length) {\n                return this.clearStatus(statusType, params);\n            }\n            var $status = this._get('$status');\n            styler.addClass($status[params.type], template.statusClass(statusType));\n            styler.addClass(this._get('$container'), template.statusActiveClass(params.type));\n            var markup = '';\n            messages.forEach(function (err) {\n                markup += template.statusMessage(err);\n            });\n            $status[params.type].innerHTML = markup;\n        }\n        clearStatus(statusType, params) {\n            var $status = this._get('$status');\n            styler.removeClass($status[params.type], template.statusClass(statusType));\n            styler.removeClass(this._get('$container'), template.statusActiveClass(params.type));\n            $status[params.type].innerHTML = '';\n        }\n        trigger() {\n            var options = this._get('options');\n            var pubsoup = this._get('pubsoup');\n            if (options.debounce === false) {\n                return function () {\n                    pubsoup.publish.apply(pubsoup, arguments);\n                };\n            }\n            var cooldown = {};\n            var multiple = {};\n            return function (topic, {\n                type = 'default'\n            } = {}) {\n                if (cooldown[type]) {\n                    multiple[type] = true;\n                } else {\n                    pubsoup.publish.apply(pubsoup, arguments);\n                }\n                clearTimeout(cooldown[type]);\n                cooldown[type] = setTimeout(() => {\n                    if (multiple[type]) {\n                        pubsoup.publish.apply(pubsoup, arguments);\n                    }\n                    multiple[type] = null;\n                    cooldown[type] = null;\n                }, options.debounce);\n            };\n        }\n    }\n    Coder.plugin = function () {\n        return plugin.register.apply(this, arguments);\n    };\n\n    return skylark.attach(\"widgets.Coder\",Coder);\n});"]}