{"version":3,"sources":["Coder.js"],"names":["define","skylark","langx","Widget","styler","datax","util","template","addons","Coder","klassName","pluginName","options","files","showBlank","runScripts","pane","debounce","general","[object Object]","$coderContainer","opts","this","gerneral","push","super","_init","_private","_get","key","_set","value","html","css","js","$container","_elm","innerHTML","container","addClass","containerClass","paneActive","paneActiveClass","type","markup","addEventListener","change","bind","load","hasFileClass","fileIndex","file","$parent","querySelector","findFile","$editor","document","createElement","editorContent","url","className","editorClass","appendChild","content","$textarea","setValue","status","statusLoading","fetch","err","res","statusFetchError","clearStatus","val","target","e","data","cachedContent","emit","errs","params","removeClass","preventDefault","statusType","messages","length","$status","statusClass","statusActiveClass","forEach","statusMessage","attach"],"mappings":"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","file":"../Coder.js","sourcesContent":["define([\n    'skylark-langx/skylark',\n    'skylark-langx/langx',\n    'skylark-widgets-base/Widget',\n    \"skylark-domx-styler\",\n    \"skylark-domx-data\",\n    './util',\n    './template',\n    \"./addons\"\n], function (skylark,langx,Widget, styler,datax,util, template,addons) {\n    'use strict';\n    class Coder extends Widget{\n        get klassName() {\n          return \"Coder\";\n        } \n\n        get pluginName(){\n          return \"lark.coder\";\n        } \n\n        //default options\n        get options () {\n            return {\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                addons: {\n                    \"general\" : [\"render\"]\n                }\n            }\n        }\n\n        _init ($coderContainer, opts) {\n            //if (!$coderContainer) {\n            //    throw new Error(\"Can't find Coder container.\");\n            // }\n\n            var options = this.options;\n            if (options.runScripts === false) {\n                options.addons.gerneral.push('scriptless');\n            }\n\n            super._init();\n            //Widget.prototype._init.call(this);\n\n            var _private = {};\n            this._get = function (key) {\n                return _private[key];\n            };\n            this._set = function (key, value) {\n                _private[key] = value;\n                return _private[key];\n            };\n\n            /*\n            var options = this._set('options', langx.extend({\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                plugins: []\n            },opts));\n            */\n            this._set('cachedContent', {\n                html: null,\n                css: null,\n                js: null\n            });\n\n            /*\n            var pubsoup = this._set('pubsoup', new PubSoup());\n            this._set('trigger', this.trigger());\n            this._set('on', function () {\n                pubsoup.subscribe.apply(pubsoup, arguments);\n            });\n            this._set('off', function () {\n                pubsoup.unsubscribe.apply(pubsoup, arguments);\n            });\n            var done = this._set('done', function () {\n                pubsoup.done.apply(pubsoup, arguments);\n            });\n            done('change', this.errors.bind(this));\n            var $container = this._set('$container', $coderContainer);\n            */\n            var $container = this.$container = this._elm;\n            $container.innerHTML = template.container();\n            styler.addClass($container, template.containerClass());\n            var paneActive = this._set('paneActive', options.pane);\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            this._set('$status', {});\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.markup(type);\n            }\n            $container.addEventListener('keyup', langx.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('change', langx.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('click', this.pane.bind(this));\n            //this.$container = this._get('$container');\n\n            //this.on = this._get('on');\n            //this.off = this._get('off');\n            //this.done = this._get('done');\n            //this.trigger = this._get('trigger');\n        }\n\n        _startup() {\n            var options = this.options;\n            this.paneActive = this._get('paneActive');\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.load(type);\n            }\n            if (options.showBlank) {\n                for (let type of [\n                        'html',\n                        'css',\n                        'js'\n                    ]) {\n                    styler.addClass($container, template.hasFileClass(type));\n                }\n            }\n\n        }\n\n        findFile(type) {\n            var file = {};\n            //var options = this._get('options');\n            var options = this.options;\n            for (let fileIndex in options.files) {\n                let file = options.files[fileIndex];\n                if (file.type === type) {\n                    return file;\n                }\n            }\n            return file;\n        }\n        markup(type) {\n            //var $container = this._get('$container');\n            var $container = this._elm;\n            var $parent = $container.querySelector(`.coder-pane-${ type }`);\n            var file = this.findFile(type);\n            var $editor = document.createElement('div');\n            $editor.innerHTML = template.editorContent(type, file.url);\n            $editor.className = template.editorClass(type);\n            $parent.appendChild($editor);\n            this._get('$status')[type] = $parent.querySelector('.coder-status');\n            if (typeof file.url !== 'undefined' || typeof file.content !== 'undefined') {\n                styler.addClass($container, template.hasFileClass(type));\n            }\n        }\n        load(type) {\n            var file = this.findFile(type);\n            //var $textarea = this._get('$container').querySelector(`.coder-pane-${ type } textarea`);\n            var $textarea = this._elm.querySelector(`.coder-pane-${ type } textarea`);\n            if (typeof file.content !== 'undefined') {\n                this.setValue($textarea, file.content);\n            } else if (typeof file.url !== 'undefined') {\n                this.status('loading', [template.statusLoading(file.url)], {\n                    type: type,\n                    file: file\n                });\n                util.fetch(file.url, (err, res) => {\n                    if (err) {\n                        this.status('error', [template.statusFetchError(err)], { type: type });\n                        return;\n                    }\n                    this.clearStatus('loading', { type: type });\n                    this.setValue($textarea, res);\n                });\n            } else {\n                this.setValue($textarea, '');\n            }\n        }\n        setValue($textarea, val) {\n            $textarea.value = val;\n            this.change({ target: $textarea });\n        }\n        change(e) {\n            var type = datax.data(e.target, 'coder-type');\n            if (!type) {\n                return;\n            }\n            var cachedContent = this._get('cachedContent');\n            if (cachedContent[type] === e.target.value) {\n                return;\n            }\n            cachedContent[type] = e.target.value;\n            this.emit('change', { data : {\n                type: type,\n                file: datax.data(e.target, 'coder-file'),\n                content: cachedContent[type]\n            }});\n        }\n        errors(errs, params) {\n            this.status('error', errs, params);\n        }\n        pane(e) {\n            if (!datax.data(e.target, 'coder-type')) {\n                return;\n            }\n            //var $container = this._get('$container');\n            var $container = this._elm;\n            var paneActive = this._get('paneActive');\n            styler.removeClass($container, template.paneActiveClass(paneActive));\n            paneActive = this._set('paneActive', datax.data(e.target, 'coder-type'));\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            e.preventDefault();\n        }\n        status(statusType = 'error', messages = [], params = {}) {\n            if (!messages.length) {\n                return this.clearStatus(statusType, params);\n            }\n            var $status = this._get('$status');\n            styler.addClass($status[params.type], template.statusClass(statusType));\n            //styler.addClass(this._get('$container'), template.statusActiveClass(params.type));\n            styler.addClass(this._elm, template.statusActiveClass(params.type));\n            var markup = '';\n            messages.forEach(function (err) {\n                markup += template.statusMessage(err);\n            });\n            $status[params.type].innerHTML = markup;\n        }\n        clearStatus(statusType, params) {\n            var $status = this._get('$status');\n            styler.removeClass($status[params.type], template.statusClass(statusType));\n            //styler.removeClass(this._get('$container'), template.statusActiveClass(params.type));\n            styler.removeClass(this._elm, template.statusActiveClass(params.type));\n            $status[params.type].innerHTML = '';\n        }\n    }\n    Coder.addons = addons;\n\n    return skylark.attach(\"widgets.Coder\",Coder);\n});"]}