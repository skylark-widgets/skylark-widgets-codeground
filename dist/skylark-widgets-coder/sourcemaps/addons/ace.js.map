{"version":3,"sources":["addons/ace.js"],"names":["define","langx","datax","ace","util","Coder","PluginAce","[object Object]","coder","options","i","this","editor","clone","$editors","$container","querySelectorAll","length","$textarea","querySelector","type","data","file","$aceContainer","document","createElement","appendChild","edit","editorOptions","getSession","setMode","getMode","setOptions","$blockScrolling","Infinity","on","change","bind","params","trigger","callback","aceEditor","setValue","content","editorChange","getValue","plugin"],"mappings":";;;;;;;AAAAA,QACI,sBACA,oBACA,cACA,UACA,YACD,SAAUC,EAAMC,EAAMC,EAAIC,EAAKC,GAC9B,mBACMC,EACFC,YAAYC,EAAOC,GACf,IACIC,EACJC,KAAKC,UACLD,KAAKH,MAAQA,EACbC,EAAUR,EAAMY,MAAMJ,GAItB,IAAIK,EAAWN,EAAMO,WAAWC,iBAAiB,iBACjD,IAAKN,EAAI,EAAGA,EAAII,EAASG,OAAQP,IAAK,CAClC,IAAIQ,EAAYJ,EAASJ,GAAGS,cAAc,YACtCC,EAAOlB,EAAMmB,KAAKH,EAAW,cAC7BI,EAAOpB,EAAMmB,KAAKH,EAAW,cAC7BK,EAAgBC,SAASC,cAAc,OAC3CX,EAASJ,GAAGgB,YAAYH,GACxBZ,KAAKC,OAAOQ,GAAQjB,EAAIwB,KAAKJ,GAC7B,IAAIX,EAASD,KAAKC,OAAOQ,GACrBQ,EAAgB3B,EAAMY,MAAMJ,GAChCG,EAAOiB,aAAaC,QAAQ,YAAc1B,EAAK2B,QAAQX,EAAME,IAC7DV,EAAOiB,aAAaG,WAAWJ,GAC/BhB,EAAOqB,gBAAkBC,EAAAA,EAE7B1B,EAAM2B,GAAG,SAAUxB,KAAKyB,OAAOC,KAAK1B,MAtBrB,GAwBnBJ,aAAa+B,GACT,MAAO,KACH3B,KAAKH,MAAM+B,QAAQ,SAAUD,IAGrC/B,OAAO+B,EAAQE,GACX,IAAI5B,EAASD,KAAKC,OAAO0B,EAAOlB,MAC3BkB,EAAOG,YACR7B,EAAOiB,aAAaa,SAASJ,EAAOK,SACpCL,EAAOG,UAAY7B,EACnBA,EAAOuB,GAAG,SAAUxB,KAAKiC,aAAaN,KAE1CA,EAAOK,QAAU/B,EAAOiC,WACxBL,EAAS,KAAMF,IAMvB,OAFAjC,EAAMyC,OAAO,MAAOxC,GAEbA","file":"../../addons/ace.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    'skylark-domx-data',\n    'skylark-ace',\n    '../util',\n    \"../Coder\"\n], function (langx,datax,ace,util,Coder) {\n    'use strict';\n    class PluginAce {\n        constructor(coder, options) {\n            var priority = 1;\n            var i;\n            this.editor = {};\n            this.coder = coder;\n            options = langx.clone(options);\n            //if (typeof window.ace === 'undefined') {\n            //    return;\n            // }\n            var $editors = coder.$container.querySelectorAll('.coder-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = datax.data($textarea, 'coder-type');\n                let file = datax.data($textarea, 'coder-file');\n                let $aceContainer = document.createElement('div');\n                $editors[i].appendChild($aceContainer);\n                this.editor[type] = ace.edit($aceContainer);\n                let editor = this.editor[type];\n                let editorOptions = langx.clone(options);\n                editor.getSession().setMode('ace/mode/' + util.getMode(type, file));\n                editor.getSession().setOptions(editorOptions);\n                editor.$blockScrolling = Infinity;\n            }\n            coder.on('change', this.change.bind(this), priority);\n        }\n        editorChange(params) {\n            return () => {\n                this.coder.trigger('change', params);\n            };\n        }\n        change(params, callback) {\n            var editor = this.editor[params.type];\n            if (!params.aceEditor) {\n                editor.getSession().setValue(params.content);\n                params.aceEditor = editor;\n                editor.on('change', this.editorChange(params));\n            }\n            params.content = editor.getValue();\n            callback(null, params);\n        }\n    };\n\n    Coder.plugin('ace', PluginAce);\n    \n    return PluginAce;\n});"]}