{"version":3,"sources":["addons/codemirror.js"],"names":["define","langx","datax","CodeMirror","util","Coder","PluginCodeMirror","[object Object]","coder","options","i","this","editor","modemap","html","extend","lineNumbers","$editors","$container","querySelectorAll","length","$textarea","querySelector","type","data","file","fromTextArea","setOption","getMode","on","change","bind","params","emit","e","callback","cmEditor","setValue","content","editorChange","getValue","plugin"],"mappings":";;;;;;;AAAAA,QACI,sBACA,oBACA,gCACA,UACA,YACD,SAAUC,EAAMC,EAAMC,EAAWC,EAAKC,GACrC,mBACMC,EACFC,YAAYC,EAAOC,GACf,IACIC,EACJC,KAAKC,UACLD,KAAKH,MAAQA,EACb,IAAIK,GAAYC,KAAQ,aACxBL,EAAUR,EAAMc,UAAUN,GAAWO,aAAa,IAIlD,IAAIC,EAAWT,EAAMU,WAAWC,iBAAiB,iBACjD,IAAKT,EAAI,EAAGA,EAAIO,EAASG,OAAQV,IAAK,CAClC,IAAIW,EAAYJ,EAASP,GAAGY,cAAc,YACtCC,EAAOrB,EAAMsB,KAAKH,EAAW,cAC7BI,EAAOvB,EAAMsB,KAAKH,EAAW,cACjCV,KAAKC,OAAOW,GAAQpB,EAAWuB,aAAaL,EAAWZ,GACvDE,KAAKC,OAAOW,GAAMI,UAAU,OAAQvB,EAAKwB,QAAQL,EAAME,EAAMZ,IAEjEL,EAAMqB,GAAG,SAAUlB,KAAKmB,OAAOC,KAAKpB,MAjBrB,GAmBnBJ,aAAayB,GACT,MAAO,KACHrB,KAAKH,MAAMyB,KAAK,UAAWT,KAAKQ,KAGxCzB,OAAO2B,EAAGC,GACN,IAAIH,EAASE,EAAEV,KACXZ,EAASD,KAAKC,OAAOoB,EAAOT,MAC3BS,EAAOI,WACRxB,EAAOyB,SAASL,EAAOM,SACvBN,EAAOI,SAAWxB,EAClBA,EAAOiB,GAAG,SAAUlB,KAAK4B,aAAaP,KAE1CA,EAAOM,QAAU1B,EAAO4B,YAOhC,OAFAnC,EAAMoC,OAAO,aAAcnC,GAEpBA","file":"../../addons/codemirror.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    'skylark-domx-data',\n    'skylark-codemirror/CodeMirror',\n    '../util',\n    \"../Coder\"    \n], function (langx,datax,CodeMirror,util,Coder) {\n    'use strict';\n    class PluginCodeMirror {\n        constructor(coder, options) {\n            var priority = 1;\n            var i;\n            this.editor = {};\n            this.coder = coder;\n            var modemap = { 'html': 'htmlmixed' };\n            options = langx.extend({},options, { lineNumbers: true });\n            //if (typeof window.CodeMirror === 'undefined') {\n            //    return;\n            //}\n            var $editors = coder.$container.querySelectorAll('.coder-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = datax.data($textarea, 'coder-type');\n                let file = datax.data($textarea, 'coder-file');\n                this.editor[type] = CodeMirror.fromTextArea($textarea, options);\n                this.editor[type].setOption('mode', util.getMode(type, file, modemap));\n            }\n            coder.on('change', this.change.bind(this), priority);\n        }\n        editorChange(params) {\n            return () => {\n                this.coder.emit('change', {data:params});\n            };\n        }\n        change(e, callback) {\n            var params = e.data,\n                editor = this.editor[params.type];\n            if (!params.cmEditor) {\n                editor.setValue(params.content);\n                params.cmEditor = editor;\n                editor.on('change', this.editorChange(params));\n            }\n            params.content = editor.getValue();\n            //callback(null, params);\n        }\n    };\n\n    Coder.plugin('codemirror', PluginCodeMirror);\n\n    return PluginCodeMirror;\n});"]}