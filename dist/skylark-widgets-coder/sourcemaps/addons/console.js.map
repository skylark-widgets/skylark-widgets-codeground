{"version":3,"sources":["addons/console.js"],"names":["define","langx","styler","util","Coder","PluginConsole","[object Object]","coder","options","mixin","autoClear","logCaptureSnippet","this","capture","toString","$nav","document","createElement","addClass","innerHTML","$pane","$container","appendChild","querySelector","$output","$input","$inputForm","$clear","addEventListener","submit","bind","history","clear","on","priority","change","window","getMessage","$coderContainer","historyIndex","contentCache","html","css","js","getIframe","e","source","contentWindow","data","JSON","parse","err","type","log","message","params","callback","snippetlessContent","content","replace","forceRender","indexOf","console","oldConsoleLog","Function","prototype","call","slice","arguments","forEach","parent","postMessage","stringify","apply","$log","inputValue","value","trim","preventDefault","push","length","scriptOutput","eval","scrollTop","scrollHeight","gotHistory","selectionStart","keyCode","plugin"],"mappings":"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","file":"../../addons/console.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    \"skylark-domx-styler\",\n    '../util',\n    \"../Coder\"\n], function (langx,styler,util,Coder) {\n    'use strict';\n    \n    class PluginConsole {\n        constructor(coder, options) {\n            options = langx.mixin({ autoClear: false },options);\n            var priority = 30;\n            var history = [];\n            var historyIndex = 0;\n            var logCaptureSnippet = `(function ${ this.capture.toString() })();`;\n            var contentCache = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            var $nav = document.createElement('li');\n            styler.addClass($nav, 'coder-nav-item coder-nav-item-console');\n            $nav.innerHTML = '<a href=\"#\" data-coder-type=\"console\">JS Console</a>';\n            var $pane = document.createElement('div');\n            styler.addClass($pane, 'coder-pane coder-pane-console');\n            $pane.innerHTML = `\n              <div class=\"coder-console-container\">\n                <ul class=\"coder-console-output\"></ul>\n                <form class=\"coder-console-input\">\n                  <input type=\"text\">\n                </form>\n              </div>\n              <button class=\"coder-button coder-console-clear\">Clear</button>\n            `;\n\n            coder.$container.appendChild($pane);\n            coder.$container.querySelector('.coder-nav').appendChild($nav);\n            var $container = coder.$container.querySelector('.coder-console-container');\n            var $output = coder.$container.querySelector('.coder-console-output');\n            var $input = coder.$container.querySelector('.coder-console-input input');\n            var $inputForm = coder.$container.querySelector('.coder-console-input');\n            var $clear = coder.$container.querySelector('.coder-console-clear');\n            $inputForm.addEventListener('submit', this.submit.bind(this));\n            $input.addEventListener('keydown', this.history.bind(this));\n            $clear.addEventListener('click', this.clear.bind(this));\n            if (options.autoClear === true) {\n                coder.on('change', this.autoClear.bind(this), priority - 1);\n            }\n            coder.on('change', this.change.bind(this), priority);\n            window.addEventListener('message', this.getMessage.bind(this));\n            this.$coderContainer = coder.$container;\n            this.$container = $container;\n            this.$input = $input;\n            this.$output = $output;\n            this.history = history;\n            this.historyIndex = historyIndex;\n            this.logCaptureSnippet = logCaptureSnippet;\n            this.contentCache = contentCache;\n            this.getIframe = this.getIframe.bind(this);\n        }\n        getIframe() {\n            return this.$coderContainer.querySelector('.coder-pane-result iframe');\n        }\n        getMessage(e) {\n            if (e.source !== this.getIframe().contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (err) {\n            }\n            if (data.type === 'coder-console-log') {\n                this.log(data.message);\n            }\n        }\n        autoClear(params, callback) {\n            var snippetlessContent = params.content;\n            if (params.type === 'js') {\n                snippetlessContent = snippetlessContent.replace(this.logCaptureSnippet, '');\n            }\n            if (params.forceRender === true || this.contentCache[params.type] !== snippetlessContent) {\n                this.clear();\n            }\n            this.contentCache[params.type] = snippetlessContent;\n            //callback(null, params);\n        }\n        change(e) {\n            var params = e.data;\n            if (params.type !== 'js') {\n                return //callback(null, params);\n            }\n            if (params.content.indexOf(this.logCaptureSnippet) === -1) {\n                params.content = `${ this.logCaptureSnippet }${ params.content }`;\n            }\n            //callback(null, params);\n        }\n        capture() {\n            if (typeof window.console === 'undefined' || typeof window.console.log === 'undefined') {\n                window.console = {\n                    log: function () {\n                    }\n                };\n            }\n            var oldConsoleLog = Function.prototype.bind.call(window.console.log, window.console);\n            window.console.log = function () {\n                [].slice.call(arguments).forEach(function (message) {\n                    window.parent.postMessage(JSON.stringify({\n                        type: 'coder-console-log',\n                        message: message\n                    }), '*');\n                });\n                oldConsoleLog.apply(oldConsoleLog, arguments);\n            };\n        }\n        log(message = '', type) {\n            var $log = document.createElement('li');\n            styler.addClass($log, 'coder-console-log');\n            if (typeof type !== 'undefined') {\n                styler.addClass($log, `coder-console-log-${ type }`);\n            }\n            $log.innerHTML = message;\n            this.$output.appendChild($log);\n        }\n        submit(e) {\n            var inputValue = this.$input.value.trim();\n            if (inputValue === '') {\n                return e.preventDefault();\n            }\n            this.history.push(inputValue);\n            this.historyIndex = this.history.length;\n            this.log(inputValue, 'history');\n            if (inputValue.indexOf('return') !== 0) {\n                inputValue = 'return ' + inputValue;\n            }\n            try {\n                var scriptOutput = this.getIframe().contentWindow.eval(`(function() {${ inputValue }})()`);\n                this.log(scriptOutput);\n            } catch (err) {\n                this.log(err, 'error');\n            }\n            this.$input.value = '';\n            this.$container.scrollTop = this.$container.scrollHeight;\n            e.preventDefault();\n        }\n        clear() {\n            this.$output.innerHTML = '';\n        }\n        history(e) {\n            var UP = 38;\n            var DOWN = 40;\n            var gotHistory = false;\n            var selectionStart = this.$input.selectionStart;\n            if (e.keyCode === UP && this.historyIndex !== 0 && selectionStart === 0) {\n                this.historyIndex--;\n                gotHistory = true;\n            }\n            if (e.keyCode === DOWN && this.historyIndex !== this.history.length - 1 && selectionStart === this.$input.value.length) {\n                this.historyIndex++;\n                gotHistory = true;\n            }\n            if (gotHistory) {\n                this.$input.value = this.history[this.historyIndex];\n            }\n        }\n    };\n\n    Coder.plugin('console', PluginConsole);\n\n    return PluginConsole;\n});"]}