{"version":3,"sources":["addons/render.js"],"names":["define","langx","util","Coder","PluginRender","[object Object]","coder","options","clone","supportSrcdoc","document","createElement","$resultFrame","$container","querySelector","window","addEventListener","this","domready","bind","on","change","content","html","css","js","frameContent","callbacks","index","lastCallback","style","body","script","e","params","data","type","oldFrameContent","template","forceRender","$newResultFrame","parentNode","replaceChild","contentWindow","open","write","close","setAttribute","jsUrl","location","source","JSON","parse","plugin"],"mappings":";;;;;;;AAAAA,QACI,sBACA,UACA,YACD,SAAUC,EAAMC,EAAKC,GACpB,mBACMC,EACFC,YAAYC,EAAOC,GACfA,EAAUN,EAAMO,MAAMD,GACtB,IAAIE,KAAmB,WAAYC,SAASC,cAAc,WACtDC,EAAeN,EAAMO,WAAWC,cAAc,6BAOlDC,OAAOC,iBAAiB,UAAWC,KAAKC,SAASC,KAAKF,OACtDX,EAAMc,GAAG,SAAUH,KAAKI,OAAOF,KAAKF,MAAO,KAC3CA,KAAKR,cAAgBA,EACrBQ,KAAKK,SAPDC,KAAM,GACNC,IAAK,GACLC,GAAI,IAMRR,KAAKS,aAVc,GAWnBT,KAAKL,aAAeA,EACpBK,KAAKU,aACLV,KAAKW,MAAQ,EACbX,KAAKY,aAAe,SAGxBxB,SAASyB,EAAQ,GAAIC,EAAO,GAAIC,EAAS,IACrC,uYAcQF,yDAGPC,sMAOQC,oDAKb3B,OAAO4B,GACH,IAAIC,EAASD,EAAEE,KACflB,KAAKK,QAAQY,EAAOE,MAAQF,EAAOZ,QACnC,IAAIe,EAAkBpB,KAAKS,aAO3B,GANAT,KAAKS,aAAeT,KAAKqB,SAASrB,KAAKK,QAAa,IAAGL,KAAKK,QAAc,KAAGL,KAAKK,QAAY,IAC9FL,KAAKY,aAAe,MAChBZ,KAAKY,aAAe,YAIG,IAAvBK,EAAOK,aAAwBtB,KAAKS,eAAiBW,EAIzD,GAAIpB,KAAKR,cAAe,CACpB,IAAI+B,EAAkB9B,SAASC,cAAc,UAC7CM,KAAKL,aAAa6B,WAAWC,aAAaF,EAAiBvB,KAAKL,cAChEK,KAAKL,aAAe4B,EACpBvB,KAAKL,aAAa+B,cAAcjC,SAASkC,OACzC3B,KAAKL,aAAa+B,cAAcjC,SAASmC,MAAM5B,KAAKS,cACpDT,KAAKL,aAAa+B,cAAcjC,SAASoC,YACtC,CACH7B,KAAKL,aAAamC,aAAa,cAAe9B,KAAKS,cACnD,IAAIsB,EAAQ,8DACZ/B,KAAKL,aAAamC,aAAa,MAAOC,GAClC/B,KAAKL,aAAa+B,gBAClB1B,KAAKL,aAAa+B,cAAcM,SAAWD,IAIvD3C,SAAS4B,GACL,GAAIA,EAAEiB,SAAWjC,KAAKL,aAAa+B,cAAnC,CAGA,IAAIR,KACJ,IACIA,EAAOgB,KAAKC,MAAMnB,EAAEE,MACtB,MAAOF,IAES,oBAAdE,EAAKC,MACLnB,KAAKY,iBAOjB,OAFA1B,EAAMkD,OAAO,SAAUjD,GAEhBA","file":"../../addons/render.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    '../util',\n    \"../Coder\"\n], function (langx,util,Coder) {\n    'use strict';\n    class PluginRender {\n        constructor(coder, options) {\n            options = langx.clone(options);\n            var supportSrcdoc = !!('srcdoc' in document.createElement('iframe'));\n            var $resultFrame = coder.$container.querySelector('.coder-pane-result iframe');\n            var frameContent = '';\n            var content = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            window.addEventListener('message', this.domready.bind(this));\n            coder.on('change', this.change.bind(this), 100);\n            this.supportSrcdoc = supportSrcdoc;\n            this.content = content;\n            this.frameContent = frameContent;\n            this.$resultFrame = $resultFrame;\n            this.callbacks = [];\n            this.index = 0;\n            this.lastCallback = () => {\n            };\n        }\n        template(style = '', body = '', script = '') {\n            return `\n      <!doctype html>\n      <html>\n        <head>\n          <script>\n            (function () {\n              window.addEventListener('DOMContentLoaded', function () {\n                window.parent.postMessage(JSON.stringify({\n                  type: 'coder-dom-ready'\n                }), '*')\n              })\n            }())\n          </script>\n\n          <style>${ style }</style>\n        </head>\n        <body>\n          ${ body }\n\n          <!--\n            Coder:\n            Empty script tag prevents malformed HTML from breaking the next script.\n          -->\n          <script></script>\n          <script>${ script }</script>\n        </body>\n      </html>\n    `;\n        }\n        change(e) {\n            var params = e.data;\n            this.content[params.type] = params.content;\n            var oldFrameContent = this.frameContent;\n            this.frameContent = this.template(this.content['css'], this.content['html'], this.content['js']);\n            this.lastCallback = () => {\n                this.lastCallback = () => {\n                };\n                //callback(null, params);\n            };\n            if (params.forceRender !== true && this.frameContent === oldFrameContent) {\n                //callback(null, params);\n                return;\n            }\n            if (this.supportSrcdoc) {\n                var $newResultFrame = document.createElement('iframe');\n                this.$resultFrame.parentNode.replaceChild($newResultFrame, this.$resultFrame);\n                this.$resultFrame = $newResultFrame;\n                this.$resultFrame.contentWindow.document.open();\n                this.$resultFrame.contentWindow.document.write(this.frameContent);\n                this.$resultFrame.contentWindow.document.close();\n            } else {\n                this.$resultFrame.setAttribute('data-srcdoc', this.frameContent);\n                var jsUrl = 'javascript:window.frameElement.getAttribute(\"data-srcdoc\");';\n                this.$resultFrame.setAttribute('src', jsUrl);\n                if (this.$resultFrame.contentWindow) {\n                    this.$resultFrame.contentWindow.location = jsUrl;\n                }\n            }\n        }\n        domready(e) {\n            if (e.source !== this.$resultFrame.contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (e) {\n            }\n            if (data.type === 'coder-dom-ready') {\n                this.lastCallback();\n            }\n        }\n    };\n\n    Coder.plugin('render', PluginRender);\n\n    return PluginRender;\n});"]}