{"version":3,"sources":["plugin.js"],"names":["define","styler","util","template","plugins","register","id","plugin","_id","push","init","this","options","forEach","Plugin","pluginName","pluginOptions","name","pluginIndex","Error","find","_get","addClass","$container","pluginClass"],"mappings":";;;;;;;AAAAA,QACI,sBACA,SACA,cACD,SAAUC,EAAQC,EAAMC,GACvB,aACA,IAAIC,KAgCJ,OACIC,SAvBJ,SAAkBC,EAAIC,GAClBA,EAAOC,IAAMF,EACbF,EAAQK,KAAKF,IAsBbG,KApBJ,WAEIC,KAAKC,QAAQR,QAAQS,QAAQN,IACzB,IAAIO,EACAC,EACAC,KACkB,iBAAXT,EACPQ,EAAaR,EACY,iBAAXA,IACdQ,EAAaR,EAAOU,KACpBD,EAAgBT,EAAOK,aAE3BE,EAzBR,SAAcR,GACV,IAAK,IAAIY,KAAed,EAAS,CAC7B,IAAIG,EAASH,EAAQc,GACrB,GAAIX,EAAOC,MAAQF,EACf,OAAOC,EAGf,MAAM,IAAIY,gBAAiBb,wBAkBdc,CAAKL,GACdJ,KAAKU,KAAK,WAAWd,GAAU,IAAIO,EAAOH,KAAMK,GAEhDf,EAAOqB,SAASX,KAAKY,WAAYpB,EAASqB,YAAYT","file":"../plugin.js","sourcesContent":["define([\n    \"skylark-domx-styler\",\n    './util',\n    './template'\n], function (styler, util, template) {\n    'use strict';\n    var plugins = [];\n    function find(id) {\n        for (let pluginIndex in plugins) {\n            let plugin = plugins[pluginIndex];\n            if (plugin._id === id) {\n                return plugin;\n            }\n        }\n        throw new Error(`Plugin ${ id } is not registered.`);\n    }\n    function register(id, plugin) {\n        plugin._id = id;\n        plugins.push(plugin);\n    }\n    function init() {\n        //this._get('options').plugins.forEach(plugin => {\n        this.options.plugins.forEach(plugin => {\n            let Plugin;\n            let pluginName;\n            let pluginOptions = {};\n            if (typeof plugin === 'string') {\n                pluginName = plugin;\n            } else if (typeof plugin === 'object') {\n                pluginName = plugin.name;\n                pluginOptions = plugin.options || {};\n            }\n            Plugin = find(pluginName);\n            this._get('plugins')[plugin] = new Plugin(this, pluginOptions);\n//            styler.addClass(this._get('$container'), template.pluginClass(pluginName));\n            styler.addClass(this.$container, template.pluginClass(pluginName));\n        });\n    }\n    return {\n        register,\n        init\n    };\n});"]}