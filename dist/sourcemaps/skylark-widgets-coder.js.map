{"version":3,"sources":["skylark-widgets-coder.js"],"names":["define","langx","Xhr","seqRunner","index","params","arr","errors","callback","err","res","push","length","apply","this","arguments","defaultModemap","html","css","js","less","styl","coffee","fetch","url","get","then","e","seq","log","console","getMode","type","file","customModemap","modemap","mixin","key","keyLength","slice","container","paneActiveClass","containerClass","hasFileClass","editorClass","editorContent","fileUrl","statusMessage","statusClass","statusActiveClass","pluginClass","name","statusLoading","statusFetchError","general","edit","panes","skylark","Widget","styler","datax","util","template","addons","Coder","klassName","pluginName","options","files","showBlank","runScripts","pane","debounce","[object Object]","$coderContainer","opts","gerneral","super","_init","_private","_get","_set","value","$container","_elm","innerHTML","addClass","paneActive","markup","addEventListener","change","bind","load","fileIndex","$parent","querySelector","findFile","$editor","document","createElement","className","appendChild","content","$textarea","setValue","status","clearStatus","val","target","data","cachedContent","emit","errs","removeClass","preventDefault","statusType","messages","$status","forEach","attach","Evented","base","Addon","inherit","_construct","widget","_widget","Object","defineProperty","_Addon","coder","pluginCssClass","constructor","addonName","CodeMirror","PluginCodeMirror","lineNumbers","i","editor","$editors","querySelectorAll","fromTextArea","setOption","on","cmEditor","editorChange","getValue","categoryName","codemirror","PluginConsole","autoClear","logCaptureSnippet","capture","toString","$nav","$pane","$output","$input","$inputForm","$clear","submit","history","clear","priority","window","getMessage","historyIndex","contentCache","getIframe","source","contentWindow","JSON","parse","message","snippetlessContent","replace","forceRender","indexOf","oldConsoleLog","Function","prototype","call","parent","postMessage","stringify","$log","inputValue","trim","scriptOutput","eval","scrollTop","scrollHeight","gotHistory","selectionStart","keyCode","PluginPlay","firstRun","cache","$button","run","code","clone","play","PluginRender","supportSrcdoc","$resultFrame","domready","frameContent","callbacks","lastCallback","style","body","script","oldFrameContent","$newResultFrame","parentNode","replaceChild","open","write","close","setAttribute","jsUrl","location","render","main"],"mappings":"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","file":"../skylark-widgets-coder.js","sourcesContent":["define('skylark-widgets-coder/util',[\n    \"skylark-langx/langx\",\n    \"skylark-net-http/Xhr\"\n],function (langx,Xhr) {\n    'use strict';\n\n    function fetch(url, callback) {\n        /*\n        var xhr = new window.XMLHttpRequest();\n        xhr.open('GET', url);\n        xhr.responseType = 'text';\n        xhr.onload = function () {\n            if (xhr.status === 200) {\n                callback(null, xhr.responseText);\n            } else {\n                callback(url, xhr);\n            }\n        };\n        xhr.onerror = function (err) {\n            callback(err);\n        };\n        xhr.send();\n        */\n        Xhr.get(url).then(\n            function(res) {\n                callback(null,res);\n            },\n            function(e){\n                callback(e);\n            }\n        )\n    }\n    function runCallback(index, params, arr, errors, callback) {\n        return function (err, res) {\n            if (err) {\n                errors.push(err);\n            }\n            index++;\n            if (index < arr.length) {\n                seqRunner(index, res, arr, errors, callback);\n            } else {\n                callback(errors, res);\n            }\n        };\n    }\n    function seqRunner(index, params, arr, errors, callback) {\n        arr[index](params, runCallback.apply(this, arguments));\n    }\n    function seq(arr, params, callback = function () {\n    }) {\n        var errors = [];\n        if (!arr.length) {\n            return callback(errors, params);\n        }\n        seqRunner(0, params, arr, errors, callback);\n    }\n    function log() {\n        console.log(arguments);\n    }\n\n\n    var defaultModemap = {\n        'html': 'html',\n        'css': 'css',\n        'js': 'javascript',\n        'less': 'less',\n        'styl': 'stylus',\n        'coffee': 'coffeescript'\n    };\n    function getMode(type = '', file = '', customModemap = {}) {\n        var modemap = langx.mixin({}, defaultModemap,customModemap);\n        for (let key in modemap) {\n            let keyLength = key.length;\n            if (file.slice(-keyLength++) === '.' + key) {\n                return modemap[key];\n            }\n        }\n        for (let key in modemap) {\n            if (type === key) {\n                return modemap[key];\n            }\n        }\n        return type;\n    }\n    return {\n        fetch,\n        seq,\n        log,\n        getMode\n    };\n});\ndefine('skylark-widgets-coder/template',[],function () {\n    'use strict';\n    function container() {\n        return `\n    <ul class=\"coder-nav\">\n      <li class=\"coder-nav-item coder-nav-item-result\">\n        <a href=\"#\" data-coder-type=\"result\">\n          Result\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-html\">\n        <a href=\"#\" data-coder-type=\"html\">\n          HTML\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-css\">\n        <a href=\"#\" data-coder-type=\"css\">\n          CSS\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-js\">\n        <a href=\"#\" data-coder-type=\"js\">\n          JavaScript\n        </a>\n      </li>\n    </ul>\n    <div class=\"coder-pane coder-pane-result\"><iframe></iframe></div>\n    <div class=\"coder-pane coder-pane-html\"></div>\n    <div class=\"coder-pane coder-pane-css\"></div>\n    <div class=\"coder-pane coder-pane-js\"></div>\n  `;\n    }\n    function paneActiveClass(type) {\n        return `coder-pane-active-${ type }`;\n    }\n    function containerClass() {\n        return 'coder';\n    }\n    function hasFileClass(type) {\n        return `coder-has-${ type }`;\n    }\n    function editorClass(type) {\n        return `coder-editor coder-editor-${ type }`;\n    }\n    function editorContent(type, fileUrl = '') {\n        return `\n    <textarea data-coder-type=\"${ type }\" data-coder-file=\"${ fileUrl }\"></textarea>\n    <div class=\"coder-status\"></div>\n  `;\n    }\n    function statusMessage(err) {\n        return `\n    <p>${ err }</p>\n  `;\n    }\n    function statusClass(type) {\n        return `coder-status-${ type }`;\n    }\n    function statusActiveClass(type) {\n        return `coder-status-active-${ type }`;\n    }\n    function pluginClass(name) {\n        return `coder-plugin-${ name }`;\n    }\n    function statusLoading(url) {\n        return `Loading <strong>${ url }</strong>..`;\n    }\n    function statusFetchError(url) {\n        return `There was an error loading <strong>${ url }</strong>.`;\n    }\n    return {\n        container: container,\n        paneActiveClass: paneActiveClass,\n        containerClass: containerClass,\n        hasFileClass: hasFileClass,\n        editorClass: editorClass,\n        editorContent: editorContent,\n        statusMessage: statusMessage,\n        statusClass: statusClass,\n        statusActiveClass: statusActiveClass,\n        pluginClass: pluginClass,\n        statusLoading: statusLoading,\n        statusFetchError: statusFetchError\n    };\n});\ndefine('skylark-widgets-coder/addons',[],function(){\r\n\treturn {\r\n\t    general : {\r\n\r\n\t    },\r\n\r\n\t    html : {\r\n      \r\n\t    },\r\n\r\n\t    css : {\r\n      \r\n\t    },\r\n\r\n\t    js : {\r\n      \r\n\t    },\r\n\r\n\t    edit : {\r\n      \r\n\t    },\r\n\r\n\t    panes : {\r\n\t    \t\r\n\t    }\t\r\n\t};\r\n});\ndefine('skylark-widgets-coder/Coder',[\n    'skylark-langx/skylark',\n    'skylark-langx/langx',\n    'skylark-widgets-base/Widget',\n    \"skylark-domx-styler\",\n    \"skylark-domx-data\",\n    './util',\n    './template',\n    \"./addons\"\n], function (skylark,langx,Widget, styler,datax,util, template,addons) {\n    'use strict';\n    class Coder extends Widget{\n        get klassName() {\n          return \"Coder\";\n        } \n\n        get pluginName(){\n          return \"lark.coder\";\n        } \n\n        //default options\n        get options () {\n            return {\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                addons: {\n                    \"general\" : [\"render\"]\n                }\n            }\n        }\n\n        _init ($coderContainer, opts) {\n            //if (!$coderContainer) {\n            //    throw new Error(\"Can't find Coder container.\");\n            // }\n\n            var options = this.options;\n            if (options.runScripts === false) {\n                options.addons.gerneral.push('scriptless');\n            }\n\n            super._init();\n            //Widget.prototype._init.call(this);\n\n            var _private = {};\n            this._get = function (key) {\n                return _private[key];\n            };\n            this._set = function (key, value) {\n                _private[key] = value;\n                return _private[key];\n            };\n\n            /*\n            var options = this._set('options', langx.extend({\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                plugins: []\n            },opts));\n            */\n            this._set('cachedContent', {\n                html: null,\n                css: null,\n                js: null\n            });\n\n            /*\n            var pubsoup = this._set('pubsoup', new PubSoup());\n            this._set('trigger', this.trigger());\n            this._set('on', function () {\n                pubsoup.subscribe.apply(pubsoup, arguments);\n            });\n            this._set('off', function () {\n                pubsoup.unsubscribe.apply(pubsoup, arguments);\n            });\n            var done = this._set('done', function () {\n                pubsoup.done.apply(pubsoup, arguments);\n            });\n            done('change', this.errors.bind(this));\n            var $container = this._set('$container', $coderContainer);\n            */\n            var $container = this.$container = this._elm;\n            $container.innerHTML = template.container();\n            styler.addClass($container, template.containerClass());\n            var paneActive = this._set('paneActive', options.pane);\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            this._set('$status', {});\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.markup(type);\n            }\n            $container.addEventListener('keyup', langx.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('change', langx.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('click', this.pane.bind(this));\n            //this.$container = this._get('$container');\n\n            //this.on = this._get('on');\n            //this.off = this._get('off');\n            //this.done = this._get('done');\n            //this.trigger = this._get('trigger');\n        }\n\n        _startup() {\n            var options = this.options;\n            this.paneActive = this._get('paneActive');\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.load(type);\n            }\n            if (options.showBlank) {\n                for (let type of [\n                        'html',\n                        'css',\n                        'js'\n                    ]) {\n                    styler.addClass($container, template.hasFileClass(type));\n                }\n            }\n\n        }\n\n        findFile(type) {\n            var file = {};\n            //var options = this._get('options');\n            var options = this.options;\n            for (let fileIndex in options.files) {\n                let file = options.files[fileIndex];\n                if (file.type === type) {\n                    return file;\n                }\n            }\n            return file;\n        }\n        markup(type) {\n            //var $container = this._get('$container');\n            var $container = this._elm;\n            var $parent = $container.querySelector(`.coder-pane-${ type }`);\n            var file = this.findFile(type);\n            var $editor = document.createElement('div');\n            $editor.innerHTML = template.editorContent(type, file.url);\n            $editor.className = template.editorClass(type);\n            $parent.appendChild($editor);\n            this._get('$status')[type] = $parent.querySelector('.coder-status');\n            if (typeof file.url !== 'undefined' || typeof file.content !== 'undefined') {\n                styler.addClass($container, template.hasFileClass(type));\n            }\n        }\n        load(type) {\n            var file = this.findFile(type);\n            //var $textarea = this._get('$container').querySelector(`.coder-pane-${ type } textarea`);\n            var $textarea = this._elm.querySelector(`.coder-pane-${ type } textarea`);\n            if (typeof file.content !== 'undefined') {\n                this.setValue($textarea, file.content);\n            } else if (typeof file.url !== 'undefined') {\n                this.status('loading', [template.statusLoading(file.url)], {\n                    type: type,\n                    file: file\n                });\n                util.fetch(file.url, (err, res) => {\n                    if (err) {\n                        this.status('error', [template.statusFetchError(err)], { type: type });\n                        return;\n                    }\n                    this.clearStatus('loading', { type: type });\n                    this.setValue($textarea, res);\n                });\n            } else {\n                this.setValue($textarea, '');\n            }\n        }\n        setValue($textarea, val) {\n            $textarea.value = val;\n            this.change({ target: $textarea });\n        }\n        change(e) {\n            var type = datax.data(e.target, 'coder-type');\n            if (!type) {\n                return;\n            }\n            var cachedContent = this._get('cachedContent');\n            if (cachedContent[type] === e.target.value) {\n                return;\n            }\n            cachedContent[type] = e.target.value;\n            this.emit('change', { data : {\n                type: type,\n                file: datax.data(e.target, 'coder-file'),\n                content: cachedContent[type]\n            }});\n        }\n        errors(errs, params) {\n            this.status('error', errs, params);\n        }\n        pane(e) {\n            if (!datax.data(e.target, 'coder-type')) {\n                return;\n            }\n            //var $container = this._get('$container');\n            var $container = this._elm;\n            var paneActive = this._get('paneActive');\n            styler.removeClass($container, template.paneActiveClass(paneActive));\n            paneActive = this._set('paneActive', datax.data(e.target, 'coder-type'));\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            e.preventDefault();\n        }\n        status(statusType = 'error', messages = [], params = {}) {\n            if (!messages.length) {\n                return this.clearStatus(statusType, params);\n            }\n            var $status = this._get('$status');\n            styler.addClass($status[params.type], template.statusClass(statusType));\n            //styler.addClass(this._get('$container'), template.statusActiveClass(params.type));\n            styler.addClass(this._elm, template.statusActiveClass(params.type));\n            var markup = '';\n            messages.forEach(function (err) {\n                markup += template.statusMessage(err);\n            });\n            $status[params.type].innerHTML = markup;\n        }\n        clearStatus(statusType, params) {\n            var $status = this._get('$status');\n            styler.removeClass($status[params.type], template.statusClass(statusType));\n            //styler.removeClass(this._get('$container'), template.statusActiveClass(params.type));\n            styler.removeClass(this._elm, template.statusActiveClass(params.type));\n            $status[params.type].innerHTML = '';\n        }\n    }\n    Coder.addons = addons;\n\n    return skylark.attach(\"widgets.Coder\",Coder);\n});\ndefine('skylark-widgets-base/Addon',[\r\n  \"skylark-langx/langx\",\t\r\n  \"skylark-langx/Evented\",\r\n\t\"./base\"\r\n],function(langx,Evented,base){\r\n\r\n\tvar Addon = Evented.inherit({\r\n\r\n\t\t_construct : function(widget,options) {\r\n\t\t\tthis._widget = widget;\r\n            Object.defineProperty(this,\"options\",{\r\n              value :langx.mixin({},this.options,options,true)\r\n            });\r\n\t\t\tif (this._init) {\r\n\t\t\t\tthis._init();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn base.Addon = Addon;\r\n\r\n});\ndefine('skylark-widgets-coder/Addon',[\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-widgets-base/Addon\"\r\n],function(styler,_Addon){\r\n\treturn class Addon extends _Addon {\r\n\t\t_init() {\r\n            this.coder = this._widget;\r\n\r\n            this.options.pluginCssClass = this.options.pluginClass || (\"coder-plugin-\" + this.constructor.addonName);\r\n\r\n\t\t\tif (this.options.pluginCssClass) {\r\n\t            styler.addClass(this._widget._elm, this.options.pluginCssClass);\t\t\t\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n});\ndefine('skylark-widgets-coder/addons/edit/codemirror',[\n    'skylark-langx/langx',\n    'skylark-domx-data',\n    'skylark-codemirror/CodeMirror',\n    \"../../Addon\",\n    '../../util',\n    \"../../addons\"    \n], function (langx,datax,CodeMirror,Addon,util,addons) {\n    'use strict';\n    class PluginCodeMirror  extends Addon{\n        //constructor(coder, options) \n\n        get options() {\n            return {\n               lineNumbers: true,\n               pluginCssClass : \"coder-plugin-codemirror\"\n            }\n        }\n\n        _init() {\n            super._init();\n            var coder = this.coder,\n                options = this.options;\n\n            var priority = 1;\n            var i;\n            this.editor = {};\n            //this.coder = coder;\n            var modemap = { 'html': 'htmlmixed' };\n            var options = this.options;\n            //if (typeof window.CodeMirror === 'undefined') {\n            //    return;\n            //}\n            var $editors = coder.$container.querySelectorAll('.coder-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = datax.data($textarea, 'coder-type');\n                let file = datax.data($textarea, 'coder-file');\n                this.editor[type] = CodeMirror.fromTextArea($textarea, options);\n                this.editor[type].setOption('mode', util.getMode(type, file, modemap));\n            }\n            coder.on('change', this.change.bind(this), priority);\n        }\n        editorChange(params) {\n            return () => {\n                this.coder.emit('change', {data:params});\n            };\n        }\n        change(e, callback) {\n            var params = e.data,\n                editor = this.editor[params.type];\n            if (!params.cmEditor) {\n                editor.setValue(params.content);\n                params.cmEditor = editor;\n                editor.on('change', this.editorChange(params));\n            }\n            params.content = editor.getValue();\n            //callback(null, params);\n        }\n\n\n        static get categoryName() {\n            return \"edit\";\n        }\n\n        static get addonName(){\n            return \"codemirror\";\n        }        \n    };\n\n    addons.edit.codemirror = PluginCodeMirror;\n\n    return PluginCodeMirror;\n});\ndefine('skylark-widgets-coder/addons/general/console',[\n    'skylark-langx/langx',\n    \"skylark-domx-styler\",\n    \"../../Addon\",\n    '../../util',\n    \"../../addons\"\n], function (langx,styler,Addon,util,addons) {\n    'use strict';\n    \n    class PluginConsole  extends Addon{\n        //constructor(coder, options) \n\n        get options() {\n            return {\n               autoClear: false \n            }\n        }\n\n        _init() {\n            super._init();\n            var coder = this.coder,\n                options = this.options;\n            \n            var priority = 30;\n            var history = [];\n            var historyIndex = 0;\n            var logCaptureSnippet = `(function ${ this.capture.toString() })();`;\n            var contentCache = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            var $nav = document.createElement('li');\n            styler.addClass($nav, 'coder-nav-item coder-nav-item-console');\n            $nav.innerHTML = '<a href=\"#\" data-coder-type=\"console\">JS Console</a>';\n            var $pane = document.createElement('div');\n            styler.addClass($pane, 'coder-pane coder-pane-console');\n            $pane.innerHTML = `\n              <div class=\"coder-console-container\">\n                <ul class=\"coder-console-output\"></ul>\n                <form class=\"coder-console-input\">\n                  <input type=\"text\">\n                </form>\n              </div>\n              <button class=\"coder-button coder-console-clear\">Clear</button>\n            `;\n\n            coder.$container.appendChild($pane);\n            coder.$container.querySelector('.coder-nav').appendChild($nav);\n            var $container = coder.$container.querySelector('.coder-console-container');\n            var $output = coder.$container.querySelector('.coder-console-output');\n            var $input = coder.$container.querySelector('.coder-console-input input');\n            var $inputForm = coder.$container.querySelector('.coder-console-input');\n            var $clear = coder.$container.querySelector('.coder-console-clear');\n            $inputForm.addEventListener('submit', this.submit.bind(this));\n            $input.addEventListener('keydown', this.history.bind(this));\n            $clear.addEventListener('click', this.clear.bind(this));\n            if (options.autoClear === true) {\n                coder.on('change', this.autoClear.bind(this), priority - 1);\n            }\n            coder.on('change', this.change.bind(this), priority);\n            window.addEventListener('message', this.getMessage.bind(this));\n            this.$coderContainer = coder.$container;\n            this.$container = $container;\n            this.$input = $input;\n            this.$output = $output;\n            this.history = history;\n            this.historyIndex = historyIndex;\n            this.logCaptureSnippet = logCaptureSnippet;\n            this.contentCache = contentCache;\n            this.getIframe = this.getIframe.bind(this);\n        }\n        getIframe() {\n            return this.$coderContainer.querySelector('.coder-pane-result iframe');\n        }\n        getMessage(e) {\n            if (e.source !== this.getIframe().contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (err) {\n            }\n            if (data.type === 'coder-console-log') {\n                this.log(data.message);\n            }\n        }\n        autoClear(params, callback) {\n            var snippetlessContent = params.content;\n            if (params.type === 'js') {\n                snippetlessContent = snippetlessContent.replace(this.logCaptureSnippet, '');\n            }\n            if (params.forceRender === true || this.contentCache[params.type] !== snippetlessContent) {\n                this.clear();\n            }\n            this.contentCache[params.type] = snippetlessContent;\n            //callback(null, params);\n        }\n        change(e) {\n            var params = e.data;\n            if (params.type !== 'js') {\n                return //callback(null, params);\n            }\n            if (params.content.indexOf(this.logCaptureSnippet) === -1) {\n                params.content = `${ this.logCaptureSnippet }${ params.content }`;\n            }\n            //callback(null, params);\n        }\n        capture() {\n            if (typeof window.console === 'undefined' || typeof window.console.log === 'undefined') {\n                window.console = {\n                    log: function () {\n                    }\n                };\n            }\n            var oldConsoleLog = Function.prototype.bind.call(window.console.log, window.console);\n            window.console.log = function () {\n                [].slice.call(arguments).forEach(function (message) {\n                    window.parent.postMessage(JSON.stringify({\n                        type: 'coder-console-log',\n                        message: message\n                    }), '*');\n                });\n                oldConsoleLog.apply(oldConsoleLog, arguments);\n            };\n        }\n        log(message = '', type) {\n            var $log = document.createElement('li');\n            styler.addClass($log, 'coder-console-log');\n            if (typeof type !== 'undefined') {\n                styler.addClass($log, `coder-console-log-${ type }`);\n            }\n            $log.innerHTML = message;\n            this.$output.appendChild($log);\n        }\n        submit(e) {\n            var inputValue = this.$input.value.trim();\n            if (inputValue === '') {\n                return e.preventDefault();\n            }\n            this.history.push(inputValue);\n            this.historyIndex = this.history.length;\n            this.log(inputValue, 'history');\n            if (inputValue.indexOf('return') !== 0) {\n                inputValue = 'return ' + inputValue;\n            }\n            try {\n                var scriptOutput = this.getIframe().contentWindow.eval(`(function() {${ inputValue }})()`);\n                this.log(scriptOutput);\n            } catch (err) {\n                this.log(err, 'error');\n            }\n            this.$input.value = '';\n            this.$container.scrollTop = this.$container.scrollHeight;\n            e.preventDefault();\n        }\n        clear() {\n            this.$output.innerHTML = '';\n        }\n        history(e) {\n            var UP = 38;\n            var DOWN = 40;\n            var gotHistory = false;\n            var selectionStart = this.$input.selectionStart;\n            if (e.keyCode === UP && this.historyIndex !== 0 && selectionStart === 0) {\n                this.historyIndex--;\n                gotHistory = true;\n            }\n            if (e.keyCode === DOWN && this.historyIndex !== this.history.length - 1 && selectionStart === this.$input.value.length) {\n                this.historyIndex++;\n                gotHistory = true;\n            }\n            if (gotHistory) {\n                this.$input.value = this.history[this.historyIndex];\n            }\n        }\n\n        static get categoryName() {\n            return \"general\";\n        }\n\n        static get addonName(){\n            return \"console\";\n        }\n        \n    };\n\n    addons.general.console = PluginConsole;\n\n    return PluginConsole;\n});\ndefine('skylark-widgets-coder/addons/general/play',[\n    'skylark-langx/langx',\n    \"../../Addon\",\n    '../../util',\n    \"../../addons\"\n], function (langx,Addon,util,addons) {\n    class PluginPlay  extends Addon{\n        //constructor(coder, options) \n\n        get options() {\n            return {\n               firstRun: true \n            }\n        }\n\n        _init() {\n            super._init();\n\n            var coder = this.coder,\n                options = this.options;\n            \n            var priority = 10;\n            var cache = {};\n            var code = {};\n            if (options.firstRun === false) {\n                cache = {\n                    html: {\n                        type: 'html',\n                        content: ''\n                    },\n                    css: {\n                        type: 'css',\n                        content: ''\n                    },\n                    js: {\n                        type: 'js',\n                        content: ''\n                    }\n                };\n            }\n            var $button = document.createElement('button');\n            $button.className = 'coder-button coder-button-play';\n            $button.innerHTML = 'Run';\n            coder.$container.appendChild($button);\n            $button.addEventListener('click', this.run.bind(this));\n            coder.on('change', this.change.bind(this), priority);\n            this.cache = cache;\n            this.code = code;\n            this.coder = coder;\n        }\n        change(e) {\n            var params = e.data;\n            this.code[params.type] = langx.clone(params);\n            if (typeof this.cache[params.type] !== 'undefined') {\n                callback(null, this.cache[params.type]);\n                this.cache[params.type].forceRender = null;\n            } else {\n                this.cache[params.type] = langx.clone(params);\n                //callback(null, params);\n            }\n        }\n        run() {\n            for (let type in this.code) {\n                this.cache[type] = langx.mixin({ forceRender: true },this.code[type]);\n                this.coder.emit('change', this.cache[type]);\n            }\n        }\n\n        static get categoryName() {\n            return \"general\";\n        }\n\n        static get addonName(){\n            return \"play\";\n        }\n\n    };\n\n    addons.general.play = PluginPlay;\n\n    return PluginPlay;\n});\ndefine('skylark-widgets-coder/addons/general/render',[\n    'skylark-langx/langx',\n    \"../../Addon\",\n    '../../util',\n    \"../../addons\"\n], function (langx,Addon,util,addons) {\n    'use strict';\n    class PluginRender  extends Addon{\n        //constructor(coder, options) \n\n        _init() {\n            super._init();\n\n            var coder = this.coder,\n                options = this.options;\n\n\n            var supportSrcdoc = !!('srcdoc' in document.createElement('iframe'));\n            var $resultFrame = coder.$container.querySelector('.coder-pane-result iframe');\n            var frameContent = '';\n            var content = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            window.addEventListener('message', this.domready.bind(this));\n            coder.on('change', this.change.bind(this), 100);\n            this.supportSrcdoc = supportSrcdoc;\n            this.content = content;\n            this.frameContent = frameContent;\n            this.$resultFrame = $resultFrame;\n            this.callbacks = [];\n            this.index = 0;\n            this.lastCallback = () => {\n            };\n        }\n        template(style = '', body = '', script = '') {\n            return `\n      <!doctype html>\n      <html>\n        <head>\n          <script>\n            (function () {\n              window.addEventListener('DOMContentLoaded', function () {\n                window.parent.postMessage(JSON.stringify({\n                  type: 'coder-dom-ready'\n                }), '*')\n              })\n            }())\n          </script>\n\n          <style>${ style }</style>\n        </head>\n        <body>\n          ${ body }\n\n          <!--\n            Coder:\n            Empty script tag prevents malformed HTML from breaking the next script.\n          -->\n          <script></script>\n          <script>${ script }</script>\n        </body>\n      </html>\n    `;\n        }\n        change(e) {\n            var params = e.data;\n            this.content[params.type] = params.content;\n            var oldFrameContent = this.frameContent;\n            this.frameContent = this.template(this.content['css'], this.content['html'], this.content['js']);\n            this.lastCallback = () => {\n                this.lastCallback = () => {\n                };\n                //callback(null, params);\n            };\n            if (params.forceRender !== true && this.frameContent === oldFrameContent) {\n                //callback(null, params);\n                return;\n            }\n            if (this.supportSrcdoc) {\n                var $newResultFrame = document.createElement('iframe');\n                this.$resultFrame.parentNode.replaceChild($newResultFrame, this.$resultFrame);\n                this.$resultFrame = $newResultFrame;\n                this.$resultFrame.contentWindow.document.open();\n                this.$resultFrame.contentWindow.document.write(this.frameContent);\n                this.$resultFrame.contentWindow.document.close();\n            } else {\n                this.$resultFrame.setAttribute('data-srcdoc', this.frameContent);\n                var jsUrl = 'javascript:window.frameElement.getAttribute(\"data-srcdoc\");';\n                this.$resultFrame.setAttribute('src', jsUrl);\n                if (this.$resultFrame.contentWindow) {\n                    this.$resultFrame.contentWindow.location = jsUrl;\n                }\n            }\n        }\n        domready(e) {\n            if (e.source !== this.$resultFrame.contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (e) {\n            }\n            if (data.type === 'coder-dom-ready') {\n                this.lastCallback();\n            }\n        }\n\n        static get categoryName() {\n            return \"general\";\n        }\n\n        static get addonName(){\n            return \"render\";\n        }\n\n    };\n\n    addons.general.render = PluginRender;\n\n    return PluginRender;\n});\ndefine('skylark-widgets-coder/main',[\r\n\t\"./Coder\",\r\n\t\"./addons/edit/codemirror\",\r\n\t\"./addons/general/console\",\r\n\t\"./addons/general/play\",\r\n\t\"./addons/general/render\"\r\n],function(Coder){\r\n\r\n\treturn Coder;\r\n});\ndefine('skylark-widgets-coder', ['skylark-widgets-coder/main'], function (main) { return main; });\n\n"]}