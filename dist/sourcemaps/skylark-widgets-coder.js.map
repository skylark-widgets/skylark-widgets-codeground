{"version":3,"sources":["skylark-widgets-coder.js"],"names":["define","Xhr","extend","obj","defaults","extended","Object","keys","forEach","key","seqRunner","index","params","arr","errors","callback","err","res","push","length","apply","this","arguments","hasClass","node","className","tempClass","indexOf","defaultModemap","html","css","js","less","styl","coffee","fetch","url","get","then","e","seq","debounce","fn","delay","cooldown","multiple","clearTimeout","setTimeout","log","console","getMode","type","file","customModemap","modemap","keyLength","slice","data","attr","getAttribute","addClass","removeClass","spaceBefore","spaceAfter","replace","container","paneActiveClass","containerClass","hasFileClass","editorClass","editorContent","fileUrl","statusMessage","statusClass","statusActiveClass","pluginClass","name","statusLoading","statusFetchError","util","template","plugins","register","id","plugin","_id","init","_get","Plugin","pluginName","pluginOptions","options","pluginIndex","Error","find","[object Object]","topics","callbacks","query","topic","subscriber","priority","foundTopic","_priority","sort","a","b","call","splice","remover","runList","runCallbacks","c","skylark","PubSoup","BundlePlugins","Coder","$coderContainer","opts","_private","_set","value","files","showBlank","runScripts","pane","pubsoup","trigger","subscribe","unsubscribe","done","bind","$container","innerHTML","paneActive","markup","addEventListener","change","on","off","load","fileIndex","$parent","querySelector","findFile","$editor","document","createElement","appendChild","content","$textarea","setValue","status","clearStatus","val","target","cachedContent","errs","preventDefault","statusType","messages","$status","publish","attach","CodeMirror","PluginCodeMirror","coder","i","editor","lineNumbers","$editors","querySelectorAll","fromTextArea","setOption","cmEditor","editorChange","getValue","PluginConsole","autoClear","logCaptureSnippet","capture","toString","$nav","$pane","$output","$input","$inputForm","$clear","submit","history","clear","window","getMessage","historyIndex","contentCache","getIframe","source","contentWindow","JSON","parse","message","snippetlessContent","forceRender","oldConsoleLog","Function","prototype","parent","postMessage","stringify","$log","inputValue","trim","scriptOutput","eval","scrollTop","scrollHeight","gotHistory","selectionStart","keyCode","PluginPlay","cache","firstRun","$button","run","code","PluginRender","supportSrcdoc","$resultFrame","domready","frameContent","lastCallback","style","body","script","oldFrameContent","$newResultFrame","parentNode","replaceChild","open","write","close","setAttribute","jsUrl","location","main"],"mappings":"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","file":"../skylark-widgets-coder.js","sourcesContent":["define('skylark-widgets-coder/util',[\n    \"skylark-net-http/Xhr\"\n],function (Xhr) {\n    'use strict';\n    function extend(obj = {}, defaults = {}) {\n        var extended = {};\n        Object.keys(obj).forEach(function (key) {\n            extended[key] = obj[key];\n        });\n        Object.keys(defaults).forEach(function (key) {\n            if (typeof extended[key] !== 'undefined') {\n                extended[key] = obj[key];\n            } else {\n                extended[key] = defaults[key];\n            }\n        });\n        return extended;\n    }\n    function fetch(url, callback) {\n        /*\n        var xhr = new window.XMLHttpRequest();\n        xhr.open('GET', url);\n        xhr.responseType = 'text';\n        xhr.onload = function () {\n            if (xhr.status === 200) {\n                callback(null, xhr.responseText);\n            } else {\n                callback(url, xhr);\n            }\n        };\n        xhr.onerror = function (err) {\n            callback(err);\n        };\n        xhr.send();\n        */\n        Xhr.get(url).then(\n            function(res) {\n                callback(null,res);\n            },\n            function(e){\n                callback(e);\n            }\n        )\n    }\n    function runCallback(index, params, arr, errors, callback) {\n        return function (err, res) {\n            if (err) {\n                errors.push(err);\n            }\n            index++;\n            if (index < arr.length) {\n                seqRunner(index, res, arr, errors, callback);\n            } else {\n                callback(errors, res);\n            }\n        };\n    }\n    function seqRunner(index, params, arr, errors, callback) {\n        arr[index](params, runCallback.apply(this, arguments));\n    }\n    function seq(arr, params, callback = function () {\n    }) {\n        var errors = [];\n        if (!arr.length) {\n            return callback(errors, params);\n        }\n        seqRunner(0, params, arr, errors, callback);\n    }\n    function debounce(fn, delay) {\n        var cooldown = null;\n        var multiple = null;\n        return function () {\n            if (cooldown) {\n                multiple = true;\n            } else {\n                fn.apply(this, arguments);\n            }\n            clearTimeout(cooldown);\n            cooldown = setTimeout(() => {\n                if (multiple) {\n                    fn.apply(this, arguments);\n                }\n                cooldown = null;\n                multiple = null;\n            }, delay);\n        };\n    }\n    function log() {\n        console.log(arguments);\n    }\n    function hasClass(node, className) {\n        if (!node.className) {\n            return false;\n        }\n        var tempClass = ' ' + node.className + ' ';\n        className = ' ' + className + ' ';\n        if (tempClass.indexOf(className) !== -1) {\n            return true;\n        }\n        return false;\n    }\n    function addClass(node, className) {\n        if (hasClass(node, className)) {\n            return node.className;\n        }\n        if (node.className) {\n            className = ' ' + className;\n        }\n        node.className += className;\n        return node.className;\n    }\n    function removeClass(node, className) {\n        var spaceBefore = ' ' + className;\n        var spaceAfter = className + ' ';\n        if (node.className.indexOf(spaceBefore) !== -1) {\n            node.className = node.className.replace(spaceBefore, '');\n        } else if (node.className.indexOf(spaceAfter) !== -1) {\n            node.className = node.className.replace(spaceAfter, '');\n        } else {\n            node.className = node.className.replace(className, '');\n        }\n        return node.className;\n    }\n    function data(node, attr) {\n        return node.getAttribute('data-' + attr);\n    }\n    var defaultModemap = {\n        'html': 'html',\n        'css': 'css',\n        'js': 'javascript',\n        'less': 'less',\n        'styl': 'stylus',\n        'coffee': 'coffeescript'\n    };\n    function getMode(type = '', file = '', customModemap = {}) {\n        var modemap = extend(customModemap, defaultModemap);\n        for (let key in modemap) {\n            let keyLength = key.length;\n            if (file.slice(-keyLength++) === '.' + key) {\n                return modemap[key];\n            }\n        }\n        for (let key in modemap) {\n            if (type === key) {\n                return modemap[key];\n            }\n        }\n        return type;\n    }\n    return {\n        extend,\n        fetch,\n        seq,\n        debounce,\n        log,\n        getMode,\n        data,\n        hasClass,\n        addClass,\n        removeClass\n    };\n});\ndefine('skylark-widgets-coder/template',[],function () {\n    'use strict';\n    function container() {\n        return `\n    <ul class=\"coder-nav\">\n      <li class=\"coder-nav-item coder-nav-item-result\">\n        <a href=\"#\" data-coder-type=\"result\">\n          Result\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-html\">\n        <a href=\"#\" data-coder-type=\"html\">\n          HTML\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-css\">\n        <a href=\"#\" data-coder-type=\"css\">\n          CSS\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-js\">\n        <a href=\"#\" data-coder-type=\"js\">\n          JavaScript\n        </a>\n      </li>\n    </ul>\n    <div class=\"coder-pane coder-pane-result\"><iframe></iframe></div>\n    <div class=\"coder-pane coder-pane-html\"></div>\n    <div class=\"coder-pane coder-pane-css\"></div>\n    <div class=\"coder-pane coder-pane-js\"></div>\n  `;\n    }\n    function paneActiveClass(type) {\n        return `coder-pane-active-${ type }`;\n    }\n    function containerClass() {\n        return 'coder';\n    }\n    function hasFileClass(type) {\n        return `coder-has-${ type }`;\n    }\n    function editorClass(type) {\n        return `coder-editor coder-editor-${ type }`;\n    }\n    function editorContent(type, fileUrl = '') {\n        return `\n    <textarea data-coder-type=\"${ type }\" data-coder-file=\"${ fileUrl }\"></textarea>\n    <div class=\"coder-status\"></div>\n  `;\n    }\n    function statusMessage(err) {\n        return `\n    <p>${ err }</p>\n  `;\n    }\n    function statusClass(type) {\n        return `coder-status-${ type }`;\n    }\n    function statusActiveClass(type) {\n        return `coder-status-active-${ type }`;\n    }\n    function pluginClass(name) {\n        return `coder-plugin-${ name }`;\n    }\n    function statusLoading(url) {\n        return `Loading <strong>${ url }</strong>..`;\n    }\n    function statusFetchError(url) {\n        return `There was an error loading <strong>${ url }</strong>.`;\n    }\n    return {\n        container: container,\n        paneActiveClass: paneActiveClass,\n        containerClass: containerClass,\n        hasFileClass: hasFileClass,\n        editorClass: editorClass,\n        editorContent: editorContent,\n        statusMessage: statusMessage,\n        statusClass: statusClass,\n        statusActiveClass: statusActiveClass,\n        pluginClass: pluginClass,\n        statusLoading: statusLoading,\n        statusFetchError: statusFetchError\n    };\n});\ndefine('skylark-widgets-coder/plugin',[\n    './util',\n    './template'\n], function (util, template) {\n    'use strict';\n    var plugins = [];\n    function find(id) {\n        for (let pluginIndex in plugins) {\n            let plugin = plugins[pluginIndex];\n            if (plugin._id === id) {\n                return plugin;\n            }\n        }\n        throw new Error(`Plugin ${ id } is not registered.`);\n    }\n    function register(id, plugin) {\n        plugin._id = id;\n        plugins.push(plugin);\n    }\n    function init() {\n        this._get('options').plugins.forEach(plugin => {\n            let Plugin;\n            let pluginName;\n            let pluginOptions = {};\n            if (typeof plugin === 'string') {\n                pluginName = plugin;\n            } else if (typeof plugin === 'object') {\n                pluginName = plugin.name;\n                pluginOptions = plugin.options || {};\n            }\n            Plugin = find(pluginName);\n            this._get('plugins')[plugin] = new Plugin(this, pluginOptions);\n            util.addClass(this._get('$container'), template.pluginClass(pluginName));\n        });\n    }\n    return {\n        register,\n        init\n    };\n});\ndefine('skylark-widgets-coder/pubsoup',['./util'], function (util) {\n    'use strict';\n    return class PubSoup {\n        constructor() {\n            this.topics = {};\n            this.callbacks = {};\n        }\n        find(query) {\n            this.topics[query] = this.topics[query] || [];\n            return this.topics[query];\n        }\n        subscribe(topic, subscriber, priority = 90) {\n            var foundTopic = this.find(topic);\n            subscriber._priority = priority;\n            foundTopic.push(subscriber);\n            foundTopic.sort(function (a, b) {\n                return a._priority > b._priority ? 1 : b._priority > a._priority ? -1 : 0;\n            });\n        }\n        remover(arr, fn) {\n            arr.forEach(function () {\n                if (!fn) {\n                    arr.length = 0;\n                    return;\n                }\n                var index = [].indexOf.call(arr, fn);\n                if (index === -1) {\n                    return;\n                }\n                arr.splice(index, 1);\n            });\n        }\n        unsubscribe(topic, subscriber) {\n            var foundTopic = this.find(topic);\n            this.remover(foundTopic, subscriber);\n            this.callbacks[topic] = this.callbacks[topic] || [];\n            this.remover(this.callbacks[topic], subscriber);\n        }\n        publish(topic, params = {}) {\n            var foundTopic = this.find(topic);\n            var runList = [];\n            foundTopic.forEach(function (subscriber) {\n                runList.push(subscriber);\n            });\n            util.seq(runList, params, this.runCallbacks(topic));\n        }\n        runCallbacks(topic) {\n            return (err, params) => {\n                this.callbacks[topic] = this.callbacks[topic] || [];\n                this.callbacks[topic].forEach(c => {\n                    c(err, params);\n                });\n            };\n        }\n        done(topic, callback = function () {\n        }) {\n            this.callbacks[topic] = this.callbacks[topic] || [];\n            this.callbacks[topic].push(callback);\n        }\n    };\n});\ndefine('skylark-widgets-coder/Coder',[\n    'skylark-langx/skylark',\n    './util',\n    './template',\n    './plugin',\n    './pubsoup'\n], function (skylark, util, template, plugin, PubSoup, BundlePlugins) {\n    'use strict';\n    class Coder {\n        constructor($coderContainer, opts) {\n            if (!$coderContainer) {\n                throw new Error(\"Can't find Coder container.\");\n            }\n            var _private = {};\n            this._get = function (key) {\n                return _private[key];\n            };\n            this._set = function (key, value) {\n                _private[key] = value;\n                return _private[key];\n            };\n            var options = this._set('options', util.extend(opts, {\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                plugins: []\n            }));\n            options.plugins.push('render');\n            if (options.runScripts === false) {\n                options.plugins.push('scriptless');\n            }\n            this._set('cachedContent', {\n                html: null,\n                css: null,\n                js: null\n            });\n            var pubsoup = this._set('pubsoup', new PubSoup());\n            this._set('trigger', this.trigger());\n            this._set('on', function () {\n                pubsoup.subscribe.apply(pubsoup, arguments);\n            });\n            this._set('off', function () {\n                pubsoup.unsubscribe.apply(pubsoup, arguments);\n            });\n            var done = this._set('done', function () {\n                pubsoup.done.apply(pubsoup, arguments);\n            });\n            done('change', this.errors.bind(this));\n            var $container = this._set('$container', $coderContainer);\n            $container.innerHTML = template.container();\n            util.addClass($container, template.containerClass());\n            var paneActive = this._set('paneActive', options.pane);\n            util.addClass($container, template.paneActiveClass(paneActive));\n            this._set('$status', {});\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.markup(type);\n            }\n            $container.addEventListener('keyup', util.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('change', util.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('click', this.pane.bind(this));\n            this.$container = this._get('$container');\n            this.on = this._get('on');\n            this.off = this._get('off');\n            this.done = this._get('done');\n            this.trigger = this._get('trigger');\n            this.paneActive = this._get('paneActive');\n            this._set('plugins', {});\n            plugin.init.call(this);\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.load(type);\n            }\n            if (options.showBlank) {\n                for (let type of [\n                        'html',\n                        'css',\n                        'js'\n                    ]) {\n                    util.addClass($container, template.hasFileClass(type));\n                }\n            }\n        }\n        findFile(type) {\n            var file = {};\n            var options = this._get('options');\n            for (let fileIndex in options.files) {\n                let file = options.files[fileIndex];\n                if (file.type === type) {\n                    return file;\n                }\n            }\n            return file;\n        }\n        markup(type) {\n            var $container = this._get('$container');\n            var $parent = $container.querySelector(`.coder-pane-${ type }`);\n            var file = this.findFile(type);\n            var $editor = document.createElement('div');\n            $editor.innerHTML = template.editorContent(type, file.url);\n            $editor.className = template.editorClass(type);\n            $parent.appendChild($editor);\n            this._get('$status')[type] = $parent.querySelector('.coder-status');\n            if (typeof file.url !== 'undefined' || typeof file.content !== 'undefined') {\n                util.addClass($container, template.hasFileClass(type));\n            }\n        }\n        load(type) {\n            var file = this.findFile(type);\n            var $textarea = this._get('$container').querySelector(`.coder-pane-${ type } textarea`);\n            if (typeof file.content !== 'undefined') {\n                this.setValue($textarea, file.content);\n            } else if (typeof file.url !== 'undefined') {\n                this.status('loading', [template.statusLoading(file.url)], {\n                    type: type,\n                    file: file\n                });\n                util.fetch(file.url, (err, res) => {\n                    if (err) {\n                        this.status('error', [template.statusFetchError(err)], { type: type });\n                        return;\n                    }\n                    this.clearStatus('loading', { type: type });\n                    this.setValue($textarea, res);\n                });\n            } else {\n                this.setValue($textarea, '');\n            }\n        }\n        setValue($textarea, val) {\n            $textarea.value = val;\n            this.change({ target: $textarea });\n        }\n        change(e) {\n            var type = util.data(e.target, 'coder-type');\n            if (!type) {\n                return;\n            }\n            var cachedContent = this._get('cachedContent');\n            if (cachedContent[type] === e.target.value) {\n                return;\n            }\n            cachedContent[type] = e.target.value;\n            this.trigger('change', {\n                type: type,\n                file: util.data(e.target, 'coder-file'),\n                content: cachedContent[type]\n            });\n        }\n        errors(errs, params) {\n            this.status('error', errs, params);\n        }\n        pane(e) {\n            if (!util.data(e.target, 'coder-type')) {\n                return;\n            }\n            var $container = this._get('$container');\n            var paneActive = this._get('paneActive');\n            util.removeClass($container, template.paneActiveClass(paneActive));\n            paneActive = this._set('paneActive', util.data(e.target, 'coder-type'));\n            util.addClass($container, template.paneActiveClass(paneActive));\n            e.preventDefault();\n        }\n        status(statusType = 'error', messages = [], params = {}) {\n            if (!messages.length) {\n                return this.clearStatus(statusType, params);\n            }\n            var $status = this._get('$status');\n            util.addClass($status[params.type], template.statusClass(statusType));\n            util.addClass(this._get('$container'), template.statusActiveClass(params.type));\n            var markup = '';\n            messages.forEach(function (err) {\n                markup += template.statusMessage(err);\n            });\n            $status[params.type].innerHTML = markup;\n        }\n        clearStatus(statusType, params) {\n            var $status = this._get('$status');\n            util.removeClass($status[params.type], template.statusClass(statusType));\n            util.removeClass(this._get('$container'), template.statusActiveClass(params.type));\n            $status[params.type].innerHTML = '';\n        }\n        trigger() {\n            var options = this._get('options');\n            var pubsoup = this._get('pubsoup');\n            if (options.debounce === false) {\n                return function () {\n                    pubsoup.publish.apply(pubsoup, arguments);\n                };\n            }\n            var cooldown = {};\n            var multiple = {};\n            return function (topic, {\n                type = 'default'\n            } = {}) {\n                if (cooldown[type]) {\n                    multiple[type] = true;\n                } else {\n                    pubsoup.publish.apply(pubsoup, arguments);\n                }\n                clearTimeout(cooldown[type]);\n                cooldown[type] = setTimeout(() => {\n                    if (multiple[type]) {\n                        pubsoup.publish.apply(pubsoup, arguments);\n                    }\n                    multiple[type] = null;\n                    cooldown[type] = null;\n                }, options.debounce);\n            };\n        }\n    }\n    Coder.plugin = function () {\n        return plugin.register.apply(this, arguments);\n    };\n\n    return skylark.attach(\"widgets.Coder\",Coder);\n});\ndefine('skylark-widgets-coder/addons/codemirror',[\n    'skylark-codemirror/CodeMirror',\n    '../util',\n    \"../Coder\"    \n], function (CodeMirror,util,Coder) {\n    'use strict';\n    class PluginCodeMirror {\n        constructor(coder, options) {\n            var priority = 1;\n            var i;\n            this.editor = {};\n            this.coder = coder;\n            var modemap = { 'html': 'htmlmixed' };\n            options = util.extend(options, { lineNumbers: true });\n            //if (typeof window.CodeMirror === 'undefined') {\n            //    return;\n            //}\n            var $editors = coder.$container.querySelectorAll('.coder-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = util.data($textarea, 'coder-type');\n                let file = util.data($textarea, 'coder-file');\n                this.editor[type] = CodeMirror.fromTextArea($textarea, options);\n                this.editor[type].setOption('mode', util.getMode(type, file, modemap));\n            }\n            coder.on('change', this.change.bind(this), priority);\n        }\n        editorChange(params) {\n            return () => {\n                this.coder.trigger('change', params);\n            };\n        }\n        change(params, callback) {\n            var editor = this.editor[params.type];\n            if (!params.cmEditor) {\n                editor.setValue(params.content);\n                params.cmEditor = editor;\n                editor.on('change', this.editorChange(params));\n            }\n            params.content = editor.getValue();\n            callback(null, params);\n        }\n    };\n\n    Coder.plugin('codemirror', PluginCodeMirror);\n\n    return PluginCodeMirror;\n});\ndefine('skylark-widgets-coder/addons/console',[\n    '../util',\n    \"../Coder\"\n], function (util,Coder) {\n    'use strict';\n    \n    class PluginConsole {\n        constructor(coder, options) {\n            options = util.extend(options, { autoClear: false });\n            var priority = 30;\n            var history = [];\n            var historyIndex = 0;\n            var logCaptureSnippet = `(function ${ this.capture.toString() })();`;\n            var contentCache = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            var $nav = document.createElement('li');\n            util.addClass($nav, 'coder-nav-item coder-nav-item-console');\n            $nav.innerHTML = '<a href=\"#\" data-coder-type=\"console\">JS Console</a>';\n            var $pane = document.createElement('div');\n            util.addClass($pane, 'coder-pane coder-pane-console');\n            $pane.innerHTML = `\n              <div class=\"coder-console-container\">\n                <ul class=\"coder-console-output\"></ul>\n                <form class=\"coder-console-input\">\n                  <input type=\"text\">\n                </form>\n              </div>\n              <button class=\"coder-button coder-console-clear\">Clear</button>\n            `;\n\n            coder.$container.appendChild($pane);\n            coder.$container.querySelector('.coder-nav').appendChild($nav);\n            var $container = coder.$container.querySelector('.coder-console-container');\n            var $output = coder.$container.querySelector('.coder-console-output');\n            var $input = coder.$container.querySelector('.coder-console-input input');\n            var $inputForm = coder.$container.querySelector('.coder-console-input');\n            var $clear = coder.$container.querySelector('.coder-console-clear');\n            $inputForm.addEventListener('submit', this.submit.bind(this));\n            $input.addEventListener('keydown', this.history.bind(this));\n            $clear.addEventListener('click', this.clear.bind(this));\n            if (options.autoClear === true) {\n                coder.on('change', this.autoClear.bind(this), priority - 1);\n            }\n            coder.on('change', this.change.bind(this), priority);\n            window.addEventListener('message', this.getMessage.bind(this));\n            this.$coderContainer = coder.$container;\n            this.$container = $container;\n            this.$input = $input;\n            this.$output = $output;\n            this.history = history;\n            this.historyIndex = historyIndex;\n            this.logCaptureSnippet = logCaptureSnippet;\n            this.contentCache = contentCache;\n            this.getIframe = this.getIframe.bind(this);\n        }\n        getIframe() {\n            return this.$coderContainer.querySelector('.coder-pane-result iframe');\n        }\n        getMessage(e) {\n            if (e.source !== this.getIframe().contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (err) {\n            }\n            if (data.type === 'coder-console-log') {\n                this.log(data.message);\n            }\n        }\n        autoClear(params, callback) {\n            var snippetlessContent = params.content;\n            if (params.type === 'js') {\n                snippetlessContent = snippetlessContent.replace(this.logCaptureSnippet, '');\n            }\n            if (params.forceRender === true || this.contentCache[params.type] !== snippetlessContent) {\n                this.clear();\n            }\n            this.contentCache[params.type] = snippetlessContent;\n            callback(null, params);\n        }\n        change(params, callback) {\n            if (params.type !== 'js') {\n                return callback(null, params);\n            }\n            if (params.content.indexOf(this.logCaptureSnippet) === -1) {\n                params.content = `${ this.logCaptureSnippet }${ params.content }`;\n            }\n            callback(null, params);\n        }\n        capture() {\n            if (typeof window.console === 'undefined' || typeof window.console.log === 'undefined') {\n                window.console = {\n                    log: function () {\n                    }\n                };\n            }\n            var oldConsoleLog = Function.prototype.bind.call(window.console.log, window.console);\n            window.console.log = function () {\n                [].slice.call(arguments).forEach(function (message) {\n                    window.parent.postMessage(JSON.stringify({\n                        type: 'coder-console-log',\n                        message: message\n                    }), '*');\n                });\n                oldConsoleLog.apply(oldConsoleLog, arguments);\n            };\n        }\n        log(message = '', type) {\n            var $log = document.createElement('li');\n            util.addClass($log, 'coder-console-log');\n            if (typeof type !== 'undefined') {\n                util.addClass($log, `coder-console-log-${ type }`);\n            }\n            $log.innerHTML = message;\n            this.$output.appendChild($log);\n        }\n        submit(e) {\n            var inputValue = this.$input.value.trim();\n            if (inputValue === '') {\n                return e.preventDefault();\n            }\n            this.history.push(inputValue);\n            this.historyIndex = this.history.length;\n            this.log(inputValue, 'history');\n            if (inputValue.indexOf('return') !== 0) {\n                inputValue = 'return ' + inputValue;\n            }\n            try {\n                var scriptOutput = this.getIframe().contentWindow.eval(`(function() {${ inputValue }})()`);\n                this.log(scriptOutput);\n            } catch (err) {\n                this.log(err, 'error');\n            }\n            this.$input.value = '';\n            this.$container.scrollTop = this.$container.scrollHeight;\n            e.preventDefault();\n        }\n        clear() {\n            this.$output.innerHTML = '';\n        }\n        history(e) {\n            var UP = 38;\n            var DOWN = 40;\n            var gotHistory = false;\n            var selectionStart = this.$input.selectionStart;\n            if (e.keyCode === UP && this.historyIndex !== 0 && selectionStart === 0) {\n                this.historyIndex--;\n                gotHistory = true;\n            }\n            if (e.keyCode === DOWN && this.historyIndex !== this.history.length - 1 && selectionStart === this.$input.value.length) {\n                this.historyIndex++;\n                gotHistory = true;\n            }\n            if (gotHistory) {\n                this.$input.value = this.history[this.historyIndex];\n            }\n        }\n    };\n\n    Coder.plugin('console', PluginConsole);\n\n    return PluginConsole;\n});\ndefine('skylark-widgets-coder/addons/play',[\n    '../util',\n    \"../Coder\"\n], function (util,Coder) {\n    'use strict';\n    class PluginPlay {\n        constructor(coder, options) {\n            options = util.extend(options, { firstRun: true });\n            var priority = 10;\n            var cache = {};\n            var code = {};\n            if (options.firstRun === false) {\n                cache = {\n                    html: {\n                        type: 'html',\n                        content: ''\n                    },\n                    css: {\n                        type: 'css',\n                        content: ''\n                    },\n                    js: {\n                        type: 'js',\n                        content: ''\n                    }\n                };\n            }\n            var $button = document.createElement('button');\n            $button.className = 'coder-button coder-button-play';\n            $button.innerHTML = 'Run';\n            coder.$container.appendChild($button);\n            $button.addEventListener('click', this.run.bind(this));\n            coder.on('change', this.change.bind(this), priority);\n            this.cache = cache;\n            this.code = code;\n            this.coder = coder;\n        }\n        change(params, callback) {\n            this.code[params.type] = util.extend(params);\n            if (typeof this.cache[params.type] !== 'undefined') {\n                callback(null, this.cache[params.type]);\n                this.cache[params.type].forceRender = null;\n            } else {\n                this.cache[params.type] = util.extend(params);\n                callback(null, params);\n            }\n        }\n        run() {\n            for (let type in this.code) {\n                this.cache[type] = util.extend(this.code[type], { forceRender: true });\n                this.coder.trigger('change', this.cache[type]);\n            }\n        }\n    };\n\n    Coder.plugin('play', PluginPlay);\n\n    return PluginPlay;\n});\ndefine('skylark-widgets-coder/addons/render',[\n    '../util',\n    \"../Coder\"\n], function (util,Coder) {\n    'use strict';\n    class PluginRender {\n        constructor(coder, options) {\n            options = util.extend(options, {});\n            var supportSrcdoc = !!('srcdoc' in document.createElement('iframe'));\n            var $resultFrame = coder.$container.querySelector('.coder-pane-result iframe');\n            var frameContent = '';\n            var content = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            window.addEventListener('message', this.domready.bind(this));\n            coder.on('change', this.change.bind(this), 100);\n            this.supportSrcdoc = supportSrcdoc;\n            this.content = content;\n            this.frameContent = frameContent;\n            this.$resultFrame = $resultFrame;\n            this.callbacks = [];\n            this.index = 0;\n            this.lastCallback = () => {\n            };\n        }\n        template(style = '', body = '', script = '') {\n            return `\n      <!doctype html>\n      <html>\n        <head>\n          <script>\n            (function () {\n              window.addEventListener('DOMContentLoaded', function () {\n                window.parent.postMessage(JSON.stringify({\n                  type: 'coder-dom-ready'\n                }), '*')\n              })\n            }())\n          </script>\n\n          <style>${ style }</style>\n        </head>\n        <body>\n          ${ body }\n\n          <!--\n            Coder:\n            Empty script tag prevents malformed HTML from breaking the next script.\n          -->\n          <script></script>\n          <script>${ script }</script>\n        </body>\n      </html>\n    `;\n        }\n        change(params, callback) {\n            this.content[params.type] = params.content;\n            var oldFrameContent = this.frameContent;\n            this.frameContent = this.template(this.content['css'], this.content['html'], this.content['js']);\n            this.lastCallback = () => {\n                this.lastCallback = () => {\n                };\n                callback(null, params);\n            };\n            if (params.forceRender !== true && this.frameContent === oldFrameContent) {\n                callback(null, params);\n                return;\n            }\n            if (this.supportSrcdoc) {\n                var $newResultFrame = document.createElement('iframe');\n                this.$resultFrame.parentNode.replaceChild($newResultFrame, this.$resultFrame);\n                this.$resultFrame = $newResultFrame;\n                this.$resultFrame.contentWindow.document.open();\n                this.$resultFrame.contentWindow.document.write(this.frameContent);\n                this.$resultFrame.contentWindow.document.close();\n            } else {\n                this.$resultFrame.setAttribute('data-srcdoc', this.frameContent);\n                var jsUrl = 'javascript:window.frameElement.getAttribute(\"data-srcdoc\");';\n                this.$resultFrame.setAttribute('src', jsUrl);\n                if (this.$resultFrame.contentWindow) {\n                    this.$resultFrame.contentWindow.location = jsUrl;\n                }\n            }\n        }\n        domready(e) {\n            if (e.source !== this.$resultFrame.contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (e) {\n            }\n            if (data.type === 'coder-dom-ready') {\n                this.lastCallback();\n            }\n        }\n    };\n\n    Coder.plugin('render', PluginRender);\n\n    return PluginRender;\n});\ndefine('skylark-widgets-coder/main',[\r\n\t\"./Coder\",\r\n\t\"./addons/codemirror\",\r\n\t\"./addons/console\",\r\n\t\"./addons/play\",\r\n\t\"./addons/render\"\r\n],function(Coder){\r\n\r\n\treturn Coder;\r\n});\ndefine('skylark-widgets-coder', ['skylark-widgets-coder/main'], function (main) { return main; });\n\n"]}