{"version":3,"sources":["skylark-widgets-coder.js"],"names":["define","langx","Xhr","seqRunner","index","params","arr","errors","callback","err","res","push","length","apply","this","arguments","defaultModemap","html","css","js","less","styl","coffee","fetch","url","get","then","e","seq","log","console","getMode","type","file","customModemap","modemap","mixin","key","keyLength","slice","container","paneActiveClass","containerClass","hasFileClass","editorClass","editorContent","fileUrl","statusMessage","statusClass","statusActiveClass","pluginClass","name","statusLoading","statusFetchError","styler","util","template","plugins","register","id","plugin","_id","init","options","forEach","Plugin","pluginName","pluginOptions","pluginIndex","Error","find","_get","addClass","$container","skylark","Widget","datax","Coder","klassName","files","showBlank","runScripts","pane","debounce","[object Object]","$coderContainer","opts","_private","_set","value","_elm","innerHTML","paneActive","markup","addEventListener","change","bind","call","load","fileIndex","$parent","querySelector","findFile","$editor","document","createElement","className","appendChild","content","$textarea","setValue","status","clearStatus","val","target","data","cachedContent","emit","errs","removeClass","preventDefault","statusType","messages","$status","attach","CodeMirror","PluginCodeMirror","coder","i","editor","extend","lineNumbers","$editors","querySelectorAll","fromTextArea","setOption","on","cmEditor","editorChange","getValue","PluginConsole","autoClear","logCaptureSnippet","capture","toString","$nav","$pane","$output","$input","$inputForm","$clear","submit","history","clear","priority","window","getMessage","historyIndex","contentCache","getIframe","source","contentWindow","JSON","parse","message","snippetlessContent","replace","forceRender","indexOf","oldConsoleLog","Function","prototype","parent","postMessage","stringify","$log","inputValue","trim","scriptOutput","eval","scrollTop","scrollHeight","gotHistory","selectionStart","keyCode","PluginPlay","cache","firstRun","$button","run","code","clone","PluginRender","supportSrcdoc","$resultFrame","domready","frameContent","callbacks","lastCallback","style","body","script","oldFrameContent","$newResultFrame","parentNode","replaceChild","open","write","close","setAttribute","jsUrl","location","main"],"mappings":"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","file":"../skylark-widgets-coder.js","sourcesContent":["define('skylark-widgets-coder/util',[\n    \"skylark-langx/langx\",\n    \"skylark-net-http/Xhr\"\n],function (langx,Xhr) {\n    'use strict';\n\n    function fetch(url, callback) {\n        /*\n        var xhr = new window.XMLHttpRequest();\n        xhr.open('GET', url);\n        xhr.responseType = 'text';\n        xhr.onload = function () {\n            if (xhr.status === 200) {\n                callback(null, xhr.responseText);\n            } else {\n                callback(url, xhr);\n            }\n        };\n        xhr.onerror = function (err) {\n            callback(err);\n        };\n        xhr.send();\n        */\n        Xhr.get(url).then(\n            function(res) {\n                callback(null,res);\n            },\n            function(e){\n                callback(e);\n            }\n        )\n    }\n    function runCallback(index, params, arr, errors, callback) {\n        return function (err, res) {\n            if (err) {\n                errors.push(err);\n            }\n            index++;\n            if (index < arr.length) {\n                seqRunner(index, res, arr, errors, callback);\n            } else {\n                callback(errors, res);\n            }\n        };\n    }\n    function seqRunner(index, params, arr, errors, callback) {\n        arr[index](params, runCallback.apply(this, arguments));\n    }\n    function seq(arr, params, callback = function () {\n    }) {\n        var errors = [];\n        if (!arr.length) {\n            return callback(errors, params);\n        }\n        seqRunner(0, params, arr, errors, callback);\n    }\n    function log() {\n        console.log(arguments);\n    }\n\n\n    var defaultModemap = {\n        'html': 'html',\n        'css': 'css',\n        'js': 'javascript',\n        'less': 'less',\n        'styl': 'stylus',\n        'coffee': 'coffeescript'\n    };\n    function getMode(type = '', file = '', customModemap = {}) {\n        var modemap = langx.mixin({}, defaultModemap,customModemap);\n        for (let key in modemap) {\n            let keyLength = key.length;\n            if (file.slice(-keyLength++) === '.' + key) {\n                return modemap[key];\n            }\n        }\n        for (let key in modemap) {\n            if (type === key) {\n                return modemap[key];\n            }\n        }\n        return type;\n    }\n    return {\n        fetch,\n        seq,\n        log,\n        getMode\n    };\n});\ndefine('skylark-widgets-coder/template',[],function () {\n    'use strict';\n    function container() {\n        return `\n    <ul class=\"coder-nav\">\n      <li class=\"coder-nav-item coder-nav-item-result\">\n        <a href=\"#\" data-coder-type=\"result\">\n          Result\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-html\">\n        <a href=\"#\" data-coder-type=\"html\">\n          HTML\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-css\">\n        <a href=\"#\" data-coder-type=\"css\">\n          CSS\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-js\">\n        <a href=\"#\" data-coder-type=\"js\">\n          JavaScript\n        </a>\n      </li>\n    </ul>\n    <div class=\"coder-pane coder-pane-result\"><iframe></iframe></div>\n    <div class=\"coder-pane coder-pane-html\"></div>\n    <div class=\"coder-pane coder-pane-css\"></div>\n    <div class=\"coder-pane coder-pane-js\"></div>\n  `;\n    }\n    function paneActiveClass(type) {\n        return `coder-pane-active-${ type }`;\n    }\n    function containerClass() {\n        return 'coder';\n    }\n    function hasFileClass(type) {\n        return `coder-has-${ type }`;\n    }\n    function editorClass(type) {\n        return `coder-editor coder-editor-${ type }`;\n    }\n    function editorContent(type, fileUrl = '') {\n        return `\n    <textarea data-coder-type=\"${ type }\" data-coder-file=\"${ fileUrl }\"></textarea>\n    <div class=\"coder-status\"></div>\n  `;\n    }\n    function statusMessage(err) {\n        return `\n    <p>${ err }</p>\n  `;\n    }\n    function statusClass(type) {\n        return `coder-status-${ type }`;\n    }\n    function statusActiveClass(type) {\n        return `coder-status-active-${ type }`;\n    }\n    function pluginClass(name) {\n        return `coder-plugin-${ name }`;\n    }\n    function statusLoading(url) {\n        return `Loading <strong>${ url }</strong>..`;\n    }\n    function statusFetchError(url) {\n        return `There was an error loading <strong>${ url }</strong>.`;\n    }\n    return {\n        container: container,\n        paneActiveClass: paneActiveClass,\n        containerClass: containerClass,\n        hasFileClass: hasFileClass,\n        editorClass: editorClass,\n        editorContent: editorContent,\n        statusMessage: statusMessage,\n        statusClass: statusClass,\n        statusActiveClass: statusActiveClass,\n        pluginClass: pluginClass,\n        statusLoading: statusLoading,\n        statusFetchError: statusFetchError\n    };\n});\ndefine('skylark-widgets-coder/plugin',[\n    \"skylark-domx-styler\",\n    './util',\n    './template'\n], function (styler, util, template) {\n    'use strict';\n    var plugins = [];\n    function find(id) {\n        for (let pluginIndex in plugins) {\n            let plugin = plugins[pluginIndex];\n            if (plugin._id === id) {\n                return plugin;\n            }\n        }\n        throw new Error(`Plugin ${ id } is not registered.`);\n    }\n    function register(id, plugin) {\n        plugin._id = id;\n        plugins.push(plugin);\n    }\n    function init() {\n        //this._get('options').plugins.forEach(plugin => {\n        this.options.plugins.forEach(plugin => {\n            let Plugin;\n            let pluginName;\n            let pluginOptions = {};\n            if (typeof plugin === 'string') {\n                pluginName = plugin;\n            } else if (typeof plugin === 'object') {\n                pluginName = plugin.name;\n                pluginOptions = plugin.options || {};\n            }\n            Plugin = find(pluginName);\n            this._get('plugins')[plugin] = new Plugin(this, pluginOptions);\n//            styler.addClass(this._get('$container'), template.pluginClass(pluginName));\n            styler.addClass(this.$container, template.pluginClass(pluginName));\n        });\n    }\n    return {\n        register,\n        init\n    };\n});\ndefine('skylark-widgets-coder/Coder',[\n    'skylark-langx/skylark',\n    'skylark-langx/langx',\n    'skylark-widgets-base/Widget',\n    \"skylark-domx-styler\",\n    \"skylark-domx-data\",\n    './util',\n    './template',\n    './plugin',\n], function (skylark,langx,Widget, styler,datax,util, template, plugin) {\n    'use strict';\n    class Coder extends Widget{\n        get klassName() {\n          return \"Coder\";\n        } \n\n        get pluginName(){\n          return \"lark.coder\";\n        } \n\n        //default options\n        get options () {\n            return {\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                plugins: []\n            }\n        }\n\n        _init ($coderContainer, opts) {\n            //if (!$coderContainer) {\n            //    throw new Error(\"Can't find Coder container.\");\n            // }\n            var _private = {};\n            this._get = function (key) {\n                return _private[key];\n            };\n            this._set = function (key, value) {\n                _private[key] = value;\n                return _private[key];\n            };\n\n            /*\n            var options = this._set('options', langx.extend({\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                plugins: []\n            },opts));\n            */\n            var options = this.options;\n            options.plugins.push('render');\n            if (options.runScripts === false) {\n                options.plugins.push('scriptless');\n            }\n            this._set('cachedContent', {\n                html: null,\n                css: null,\n                js: null\n            });\n\n            /*\n            var pubsoup = this._set('pubsoup', new PubSoup());\n            this._set('trigger', this.trigger());\n            this._set('on', function () {\n                pubsoup.subscribe.apply(pubsoup, arguments);\n            });\n            this._set('off', function () {\n                pubsoup.unsubscribe.apply(pubsoup, arguments);\n            });\n            var done = this._set('done', function () {\n                pubsoup.done.apply(pubsoup, arguments);\n            });\n            done('change', this.errors.bind(this));\n            var $container = this._set('$container', $coderContainer);\n            */\n            var $container = this.$container = this._elm;\n            $container.innerHTML = template.container();\n            styler.addClass($container, template.containerClass());\n            var paneActive = this._set('paneActive', options.pane);\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            this._set('$status', {});\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.markup(type);\n            }\n            $container.addEventListener('keyup', langx.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('change', langx.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('click', this.pane.bind(this));\n            //this.$container = this._get('$container');\n\n            //this.on = this._get('on');\n            //this.off = this._get('off');\n            //this.done = this._get('done');\n            //this.trigger = this._get('trigger');\n            this.paneActive = this._get('paneActive');\n            this._set('plugins', {});\n            plugin.init.call(this);\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.load(type);\n            }\n            if (options.showBlank) {\n                for (let type of [\n                        'html',\n                        'css',\n                        'js'\n                    ]) {\n                    styler.addClass($container, template.hasFileClass(type));\n                }\n            }\n        }\n\n        findFile(type) {\n            var file = {};\n            //var options = this._get('options');\n            var options = this.options;\n            for (let fileIndex in options.files) {\n                let file = options.files[fileIndex];\n                if (file.type === type) {\n                    return file;\n                }\n            }\n            return file;\n        }\n        markup(type) {\n            //var $container = this._get('$container');\n            var $container = this._elm;\n            var $parent = $container.querySelector(`.coder-pane-${ type }`);\n            var file = this.findFile(type);\n            var $editor = document.createElement('div');\n            $editor.innerHTML = template.editorContent(type, file.url);\n            $editor.className = template.editorClass(type);\n            $parent.appendChild($editor);\n            this._get('$status')[type] = $parent.querySelector('.coder-status');\n            if (typeof file.url !== 'undefined' || typeof file.content !== 'undefined') {\n                styler.addClass($container, template.hasFileClass(type));\n            }\n        }\n        load(type) {\n            var file = this.findFile(type);\n            //var $textarea = this._get('$container').querySelector(`.coder-pane-${ type } textarea`);\n            var $textarea = this._elm.querySelector(`.coder-pane-${ type } textarea`);\n            if (typeof file.content !== 'undefined') {\n                this.setValue($textarea, file.content);\n            } else if (typeof file.url !== 'undefined') {\n                this.status('loading', [template.statusLoading(file.url)], {\n                    type: type,\n                    file: file\n                });\n                util.fetch(file.url, (err, res) => {\n                    if (err) {\n                        this.status('error', [template.statusFetchError(err)], { type: type });\n                        return;\n                    }\n                    this.clearStatus('loading', { type: type });\n                    this.setValue($textarea, res);\n                });\n            } else {\n                this.setValue($textarea, '');\n            }\n        }\n        setValue($textarea, val) {\n            $textarea.value = val;\n            this.change({ target: $textarea });\n        }\n        change(e) {\n            var type = datax.data(e.target, 'coder-type');\n            if (!type) {\n                return;\n            }\n            var cachedContent = this._get('cachedContent');\n            if (cachedContent[type] === e.target.value) {\n                return;\n            }\n            cachedContent[type] = e.target.value;\n            this.emit('change', { data : {\n                type: type,\n                file: datax.data(e.target, 'coder-file'),\n                content: cachedContent[type]\n            }});\n        }\n        errors(errs, params) {\n            this.status('error', errs, params);\n        }\n        pane(e) {\n            if (!datax.data(e.target, 'coder-type')) {\n                return;\n            }\n            //var $container = this._get('$container');\n            var $container = this._elm;\n            var paneActive = this._get('paneActive');\n            styler.removeClass($container, template.paneActiveClass(paneActive));\n            paneActive = this._set('paneActive', datax.data(e.target, 'coder-type'));\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            e.preventDefault();\n        }\n        status(statusType = 'error', messages = [], params = {}) {\n            if (!messages.length) {\n                return this.clearStatus(statusType, params);\n            }\n            var $status = this._get('$status');\n            styler.addClass($status[params.type], template.statusClass(statusType));\n            //styler.addClass(this._get('$container'), template.statusActiveClass(params.type));\n            styler.addClass(this._elm, template.statusActiveClass(params.type));\n            var markup = '';\n            messages.forEach(function (err) {\n                markup += template.statusMessage(err);\n            });\n            $status[params.type].innerHTML = markup;\n        }\n        clearStatus(statusType, params) {\n            var $status = this._get('$status');\n            styler.removeClass($status[params.type], template.statusClass(statusType));\n            //styler.removeClass(this._get('$container'), template.statusActiveClass(params.type));\n            styler.removeClass(this._elm, template.statusActiveClass(params.type));\n            $status[params.type].innerHTML = '';\n        }\n    }\n    Coder.plugin = function () {\n        return plugin.register.apply(this, arguments);\n    };\n\n    return skylark.attach(\"widgets.Coder\",Coder);\n});\ndefine('skylark-widgets-coder/addons/codemirror',[\n    'skylark-langx/langx',\n    'skylark-domx-data',\n    'skylark-codemirror/CodeMirror',\n    '../util',\n    \"../Coder\"    \n], function (langx,datax,CodeMirror,util,Coder) {\n    'use strict';\n    class PluginCodeMirror {\n        constructor(coder, options) {\n            var priority = 1;\n            var i;\n            this.editor = {};\n            this.coder = coder;\n            var modemap = { 'html': 'htmlmixed' };\n            options = langx.extend({},options, { lineNumbers: true });\n            //if (typeof window.CodeMirror === 'undefined') {\n            //    return;\n            //}\n            var $editors = coder.$container.querySelectorAll('.coder-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = datax.data($textarea, 'coder-type');\n                let file = datax.data($textarea, 'coder-file');\n                this.editor[type] = CodeMirror.fromTextArea($textarea, options);\n                this.editor[type].setOption('mode', util.getMode(type, file, modemap));\n            }\n            coder.on('change', this.change.bind(this), priority);\n        }\n        editorChange(params) {\n            return () => {\n                this.coder.emit('change', {data:params});\n            };\n        }\n        change(e, callback) {\n            var params = e.data,\n                editor = this.editor[params.type];\n            if (!params.cmEditor) {\n                editor.setValue(params.content);\n                params.cmEditor = editor;\n                editor.on('change', this.editorChange(params));\n            }\n            params.content = editor.getValue();\n            //callback(null, params);\n        }\n    };\n\n    Coder.plugin('codemirror', PluginCodeMirror);\n\n    return PluginCodeMirror;\n});\ndefine('skylark-widgets-coder/addons/console',[\n    'skylark-langx/langx',\n    \"skylark-domx-styler\",\n    '../util',\n    \"../Coder\"\n], function (langx,styler,util,Coder) {\n    'use strict';\n    \n    class PluginConsole {\n        constructor(coder, options) {\n            options = langx.mixin({ autoClear: false },options);\n            var priority = 30;\n            var history = [];\n            var historyIndex = 0;\n            var logCaptureSnippet = `(function ${ this.capture.toString() })();`;\n            var contentCache = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            var $nav = document.createElement('li');\n            styler.addClass($nav, 'coder-nav-item coder-nav-item-console');\n            $nav.innerHTML = '<a href=\"#\" data-coder-type=\"console\">JS Console</a>';\n            var $pane = document.createElement('div');\n            styler.addClass($pane, 'coder-pane coder-pane-console');\n            $pane.innerHTML = `\n              <div class=\"coder-console-container\">\n                <ul class=\"coder-console-output\"></ul>\n                <form class=\"coder-console-input\">\n                  <input type=\"text\">\n                </form>\n              </div>\n              <button class=\"coder-button coder-console-clear\">Clear</button>\n            `;\n\n            coder.$container.appendChild($pane);\n            coder.$container.querySelector('.coder-nav').appendChild($nav);\n            var $container = coder.$container.querySelector('.coder-console-container');\n            var $output = coder.$container.querySelector('.coder-console-output');\n            var $input = coder.$container.querySelector('.coder-console-input input');\n            var $inputForm = coder.$container.querySelector('.coder-console-input');\n            var $clear = coder.$container.querySelector('.coder-console-clear');\n            $inputForm.addEventListener('submit', this.submit.bind(this));\n            $input.addEventListener('keydown', this.history.bind(this));\n            $clear.addEventListener('click', this.clear.bind(this));\n            if (options.autoClear === true) {\n                coder.on('change', this.autoClear.bind(this), priority - 1);\n            }\n            coder.on('change', this.change.bind(this), priority);\n            window.addEventListener('message', this.getMessage.bind(this));\n            this.$coderContainer = coder.$container;\n            this.$container = $container;\n            this.$input = $input;\n            this.$output = $output;\n            this.history = history;\n            this.historyIndex = historyIndex;\n            this.logCaptureSnippet = logCaptureSnippet;\n            this.contentCache = contentCache;\n            this.getIframe = this.getIframe.bind(this);\n        }\n        getIframe() {\n            return this.$coderContainer.querySelector('.coder-pane-result iframe');\n        }\n        getMessage(e) {\n            if (e.source !== this.getIframe().contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (err) {\n            }\n            if (data.type === 'coder-console-log') {\n                this.log(data.message);\n            }\n        }\n        autoClear(params, callback) {\n            var snippetlessContent = params.content;\n            if (params.type === 'js') {\n                snippetlessContent = snippetlessContent.replace(this.logCaptureSnippet, '');\n            }\n            if (params.forceRender === true || this.contentCache[params.type] !== snippetlessContent) {\n                this.clear();\n            }\n            this.contentCache[params.type] = snippetlessContent;\n            //callback(null, params);\n        }\n        change(e) {\n            var params = e.data;\n            if (params.type !== 'js') {\n                return //callback(null, params);\n            }\n            if (params.content.indexOf(this.logCaptureSnippet) === -1) {\n                params.content = `${ this.logCaptureSnippet }${ params.content }`;\n            }\n            //callback(null, params);\n        }\n        capture() {\n            if (typeof window.console === 'undefined' || typeof window.console.log === 'undefined') {\n                window.console = {\n                    log: function () {\n                    }\n                };\n            }\n            var oldConsoleLog = Function.prototype.bind.call(window.console.log, window.console);\n            window.console.log = function () {\n                [].slice.call(arguments).forEach(function (message) {\n                    window.parent.postMessage(JSON.stringify({\n                        type: 'coder-console-log',\n                        message: message\n                    }), '*');\n                });\n                oldConsoleLog.apply(oldConsoleLog, arguments);\n            };\n        }\n        log(message = '', type) {\n            var $log = document.createElement('li');\n            styler.addClass($log, 'coder-console-log');\n            if (typeof type !== 'undefined') {\n                styler.addClass($log, `coder-console-log-${ type }`);\n            }\n            $log.innerHTML = message;\n            this.$output.appendChild($log);\n        }\n        submit(e) {\n            var inputValue = this.$input.value.trim();\n            if (inputValue === '') {\n                return e.preventDefault();\n            }\n            this.history.push(inputValue);\n            this.historyIndex = this.history.length;\n            this.log(inputValue, 'history');\n            if (inputValue.indexOf('return') !== 0) {\n                inputValue = 'return ' + inputValue;\n            }\n            try {\n                var scriptOutput = this.getIframe().contentWindow.eval(`(function() {${ inputValue }})()`);\n                this.log(scriptOutput);\n            } catch (err) {\n                this.log(err, 'error');\n            }\n            this.$input.value = '';\n            this.$container.scrollTop = this.$container.scrollHeight;\n            e.preventDefault();\n        }\n        clear() {\n            this.$output.innerHTML = '';\n        }\n        history(e) {\n            var UP = 38;\n            var DOWN = 40;\n            var gotHistory = false;\n            var selectionStart = this.$input.selectionStart;\n            if (e.keyCode === UP && this.historyIndex !== 0 && selectionStart === 0) {\n                this.historyIndex--;\n                gotHistory = true;\n            }\n            if (e.keyCode === DOWN && this.historyIndex !== this.history.length - 1 && selectionStart === this.$input.value.length) {\n                this.historyIndex++;\n                gotHistory = true;\n            }\n            if (gotHistory) {\n                this.$input.value = this.history[this.historyIndex];\n            }\n        }\n    };\n\n    Coder.plugin('console', PluginConsole);\n\n    return PluginConsole;\n});\ndefine('skylark-widgets-coder/addons/play',[\n    'skylark-langx/langx',\n    '../util',\n    \"../Coder\"\n], function (langx,util,Coder) {\n    'use strict';\n    class PluginPlay {\n        constructor(coder, options) {\n            options = langx.mixin({ firstRun: true },options);\n            var priority = 10;\n            var cache = {};\n            var code = {};\n            if (options.firstRun === false) {\n                cache = {\n                    html: {\n                        type: 'html',\n                        content: ''\n                    },\n                    css: {\n                        type: 'css',\n                        content: ''\n                    },\n                    js: {\n                        type: 'js',\n                        content: ''\n                    }\n                };\n            }\n            var $button = document.createElement('button');\n            $button.className = 'coder-button coder-button-play';\n            $button.innerHTML = 'Run';\n            coder.$container.appendChild($button);\n            $button.addEventListener('click', this.run.bind(this));\n            coder.on('change', this.change.bind(this), priority);\n            this.cache = cache;\n            this.code = code;\n            this.coder = coder;\n        }\n        change(e) {\n            var params = e.data;\n            this.code[params.type] = langx.clone(params);\n            if (typeof this.cache[params.type] !== 'undefined') {\n                callback(null, this.cache[params.type]);\n                this.cache[params.type].forceRender = null;\n            } else {\n                this.cache[params.type] = langx.clone(params);\n                //callback(null, params);\n            }\n        }\n        run() {\n            for (let type in this.code) {\n                this.cache[type] = langx.mixin({ forceRender: true },this.code[type]);\n                this.coder.emit('change', this.cache[type]);\n            }\n        }\n    };\n\n    Coder.plugin('play', PluginPlay);\n\n    return PluginPlay;\n});\ndefine('skylark-widgets-coder/addons/render',[\n    'skylark-langx/langx',\n    '../util',\n    \"../Coder\"\n], function (langx,util,Coder) {\n    'use strict';\n    class PluginRender {\n        constructor(coder, options) {\n            options = langx.clone(options);\n            var supportSrcdoc = !!('srcdoc' in document.createElement('iframe'));\n            var $resultFrame = coder.$container.querySelector('.coder-pane-result iframe');\n            var frameContent = '';\n            var content = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            window.addEventListener('message', this.domready.bind(this));\n            coder.on('change', this.change.bind(this), 100);\n            this.supportSrcdoc = supportSrcdoc;\n            this.content = content;\n            this.frameContent = frameContent;\n            this.$resultFrame = $resultFrame;\n            this.callbacks = [];\n            this.index = 0;\n            this.lastCallback = () => {\n            };\n        }\n        template(style = '', body = '', script = '') {\n            return `\n      <!doctype html>\n      <html>\n        <head>\n          <script>\n            (function () {\n              window.addEventListener('DOMContentLoaded', function () {\n                window.parent.postMessage(JSON.stringify({\n                  type: 'coder-dom-ready'\n                }), '*')\n              })\n            }())\n          </script>\n\n          <style>${ style }</style>\n        </head>\n        <body>\n          ${ body }\n\n          <!--\n            Coder:\n            Empty script tag prevents malformed HTML from breaking the next script.\n          -->\n          <script></script>\n          <script>${ script }</script>\n        </body>\n      </html>\n    `;\n        }\n        change(e) {\n            var params = e.data;\n            this.content[params.type] = params.content;\n            var oldFrameContent = this.frameContent;\n            this.frameContent = this.template(this.content['css'], this.content['html'], this.content['js']);\n            this.lastCallback = () => {\n                this.lastCallback = () => {\n                };\n                //callback(null, params);\n            };\n            if (params.forceRender !== true && this.frameContent === oldFrameContent) {\n                //callback(null, params);\n                return;\n            }\n            if (this.supportSrcdoc) {\n                var $newResultFrame = document.createElement('iframe');\n                this.$resultFrame.parentNode.replaceChild($newResultFrame, this.$resultFrame);\n                this.$resultFrame = $newResultFrame;\n                this.$resultFrame.contentWindow.document.open();\n                this.$resultFrame.contentWindow.document.write(this.frameContent);\n                this.$resultFrame.contentWindow.document.close();\n            } else {\n                this.$resultFrame.setAttribute('data-srcdoc', this.frameContent);\n                var jsUrl = 'javascript:window.frameElement.getAttribute(\"data-srcdoc\");';\n                this.$resultFrame.setAttribute('src', jsUrl);\n                if (this.$resultFrame.contentWindow) {\n                    this.$resultFrame.contentWindow.location = jsUrl;\n                }\n            }\n        }\n        domready(e) {\n            if (e.source !== this.$resultFrame.contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (e) {\n            }\n            if (data.type === 'coder-dom-ready') {\n                this.lastCallback();\n            }\n        }\n    };\n\n    Coder.plugin('render', PluginRender);\n\n    return PluginRender;\n});\ndefine('skylark-widgets-coder/main',[\r\n\t\"./Coder\",\r\n\t\"./addons/codemirror\",\r\n\t\"./addons/console\",\r\n\t\"./addons/play\",\r\n\t\"./addons/render\"\r\n],function(Coder){\r\n\r\n\treturn Coder;\r\n});\ndefine('skylark-widgets-coder', ['skylark-widgets-coder/main'], function (main) { return main; });\n\n"]}