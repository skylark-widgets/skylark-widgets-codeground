{"version":3,"sources":["skylark-widgets-coder.js"],"names":["define","langx","Xhr","seqRunner","index","params","arr","errors","callback","err","res","push","length","apply","this","arguments","defaultModemap","html","css","js","less","styl","coffee","fetch","url","get","then","e","seq","log","console","getMode","type","file","customModemap","modemap","mixin","key","keyLength","slice","container","paneActiveClass","containerClass","hasFileClass","editorClass","editorContent","fileUrl","statusMessage","statusClass","statusActiveClass","pluginClass","name","statusLoading","statusFetchError","styler","util","template","plugins","register","id","plugin","_id","init","_get","forEach","Plugin","pluginName","pluginOptions","options","pluginIndex","Error","find","addClass","[object Object]","topics","callbacks","query","topic","subscriber","priority","foundTopic","_priority","sort","a","b","fn","indexOf","call","splice","remover","runList","runCallbacks","c","skylark","Widget","datax","PubSoup","BundlePlugins","Coder","klassName","$coderContainer","opts","super","_private","_set","value","extend","files","showBlank","runScripts","pane","debounce","pubsoup","trigger","subscribe","unsubscribe","done","bind","$container","innerHTML","paneActive","markup","addEventListener","change","on","off","load","fileIndex","$parent","querySelector","findFile","$editor","document","createElement","className","appendChild","content","$textarea","setValue","status","clearStatus","val","target","data","cachedContent","errs","removeClass","preventDefault","statusType","messages","$status","publish","cooldown","multiple","clearTimeout","setTimeout","attach","CodeMirror","PluginCodeMirror","coder","i","editor","lineNumbers","$editors","querySelectorAll","fromTextArea","setOption","cmEditor","editorChange","getValue","PluginConsole","autoClear","logCaptureSnippet","capture","toString","$nav","$pane","$output","$input","$inputForm","$clear","submit","history","clear","window","getMessage","historyIndex","contentCache","getIframe","source","contentWindow","JSON","parse","message","snippetlessContent","replace","forceRender","oldConsoleLog","Function","prototype","parent","postMessage","stringify","$log","inputValue","trim","scriptOutput","eval","scrollTop","scrollHeight","gotHistory","selectionStart","keyCode","PluginPlay","cache","firstRun","$button","run","code","clone","PluginRender","supportSrcdoc","$resultFrame","domready","frameContent","lastCallback","style","body","script","oldFrameContent","$newResultFrame","parentNode","replaceChild","open","write","close","setAttribute","jsUrl","location","main"],"mappings":"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","file":"../skylark-widgets-coder.js","sourcesContent":["define('skylark-widgets-coder/util',[\n    \"skylark-langx/langx\",\n    \"skylark-net-http/Xhr\"\n],function (langx,Xhr) {\n    'use strict';\n\n    function fetch(url, callback) {\n        /*\n        var xhr = new window.XMLHttpRequest();\n        xhr.open('GET', url);\n        xhr.responseType = 'text';\n        xhr.onload = function () {\n            if (xhr.status === 200) {\n                callback(null, xhr.responseText);\n            } else {\n                callback(url, xhr);\n            }\n        };\n        xhr.onerror = function (err) {\n            callback(err);\n        };\n        xhr.send();\n        */\n        Xhr.get(url).then(\n            function(res) {\n                callback(null,res);\n            },\n            function(e){\n                callback(e);\n            }\n        )\n    }\n    function runCallback(index, params, arr, errors, callback) {\n        return function (err, res) {\n            if (err) {\n                errors.push(err);\n            }\n            index++;\n            if (index < arr.length) {\n                seqRunner(index, res, arr, errors, callback);\n            } else {\n                callback(errors, res);\n            }\n        };\n    }\n    function seqRunner(index, params, arr, errors, callback) {\n        arr[index](params, runCallback.apply(this, arguments));\n    }\n    function seq(arr, params, callback = function () {\n    }) {\n        var errors = [];\n        if (!arr.length) {\n            return callback(errors, params);\n        }\n        seqRunner(0, params, arr, errors, callback);\n    }\n    function log() {\n        console.log(arguments);\n    }\n\n\n    var defaultModemap = {\n        'html': 'html',\n        'css': 'css',\n        'js': 'javascript',\n        'less': 'less',\n        'styl': 'stylus',\n        'coffee': 'coffeescript'\n    };\n    function getMode(type = '', file = '', customModemap = {}) {\n        var modemap = langx.mixin({}, defaultModemap,customModemap);\n        for (let key in modemap) {\n            let keyLength = key.length;\n            if (file.slice(-keyLength++) === '.' + key) {\n                return modemap[key];\n            }\n        }\n        for (let key in modemap) {\n            if (type === key) {\n                return modemap[key];\n            }\n        }\n        return type;\n    }\n    return {\n        fetch,\n        seq,\n        log,\n        getMode\n    };\n});\ndefine('skylark-widgets-coder/template',[],function () {\n    'use strict';\n    function container() {\n        return `\n    <ul class=\"coder-nav\">\n      <li class=\"coder-nav-item coder-nav-item-result\">\n        <a href=\"#\" data-coder-type=\"result\">\n          Result\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-html\">\n        <a href=\"#\" data-coder-type=\"html\">\n          HTML\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-css\">\n        <a href=\"#\" data-coder-type=\"css\">\n          CSS\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-js\">\n        <a href=\"#\" data-coder-type=\"js\">\n          JavaScript\n        </a>\n      </li>\n    </ul>\n    <div class=\"coder-pane coder-pane-result\"><iframe></iframe></div>\n    <div class=\"coder-pane coder-pane-html\"></div>\n    <div class=\"coder-pane coder-pane-css\"></div>\n    <div class=\"coder-pane coder-pane-js\"></div>\n  `;\n    }\n    function paneActiveClass(type) {\n        return `coder-pane-active-${ type }`;\n    }\n    function containerClass() {\n        return 'coder';\n    }\n    function hasFileClass(type) {\n        return `coder-has-${ type }`;\n    }\n    function editorClass(type) {\n        return `coder-editor coder-editor-${ type }`;\n    }\n    function editorContent(type, fileUrl = '') {\n        return `\n    <textarea data-coder-type=\"${ type }\" data-coder-file=\"${ fileUrl }\"></textarea>\n    <div class=\"coder-status\"></div>\n  `;\n    }\n    function statusMessage(err) {\n        return `\n    <p>${ err }</p>\n  `;\n    }\n    function statusClass(type) {\n        return `coder-status-${ type }`;\n    }\n    function statusActiveClass(type) {\n        return `coder-status-active-${ type }`;\n    }\n    function pluginClass(name) {\n        return `coder-plugin-${ name }`;\n    }\n    function statusLoading(url) {\n        return `Loading <strong>${ url }</strong>..`;\n    }\n    function statusFetchError(url) {\n        return `There was an error loading <strong>${ url }</strong>.`;\n    }\n    return {\n        container: container,\n        paneActiveClass: paneActiveClass,\n        containerClass: containerClass,\n        hasFileClass: hasFileClass,\n        editorClass: editorClass,\n        editorContent: editorContent,\n        statusMessage: statusMessage,\n        statusClass: statusClass,\n        statusActiveClass: statusActiveClass,\n        pluginClass: pluginClass,\n        statusLoading: statusLoading,\n        statusFetchError: statusFetchError\n    };\n});\ndefine('skylark-widgets-coder/plugin',[\n    \"skylark-domx-styler\",\n    './util',\n    './template'\n], function (styler, util, template) {\n    'use strict';\n    var plugins = [];\n    function find(id) {\n        for (let pluginIndex in plugins) {\n            let plugin = plugins[pluginIndex];\n            if (plugin._id === id) {\n                return plugin;\n            }\n        }\n        throw new Error(`Plugin ${ id } is not registered.`);\n    }\n    function register(id, plugin) {\n        plugin._id = id;\n        plugins.push(plugin);\n    }\n    function init() {\n        this._get('options').plugins.forEach(plugin => {\n            let Plugin;\n            let pluginName;\n            let pluginOptions = {};\n            if (typeof plugin === 'string') {\n                pluginName = plugin;\n            } else if (typeof plugin === 'object') {\n                pluginName = plugin.name;\n                pluginOptions = plugin.options || {};\n            }\n            Plugin = find(pluginName);\n            this._get('plugins')[plugin] = new Plugin(this, pluginOptions);\n            styler.addClass(this._get('$container'), template.pluginClass(pluginName));\n        });\n    }\n    return {\n        register,\n        init\n    };\n});\ndefine('skylark-widgets-coder/pubsoup',['./util'], function (util) {\n    'use strict';\n    return class PubSoup {\n        constructor() {\n            this.topics = {};\n            this.callbacks = {};\n        }\n        find(query) {\n            this.topics[query] = this.topics[query] || [];\n            return this.topics[query];\n        }\n        subscribe(topic, subscriber, priority = 90) {\n            var foundTopic = this.find(topic);\n            subscriber._priority = priority;\n            foundTopic.push(subscriber);\n            foundTopic.sort(function (a, b) {\n                return a._priority > b._priority ? 1 : b._priority > a._priority ? -1 : 0;\n            });\n        }\n        remover(arr, fn) {\n            arr.forEach(function () {\n                if (!fn) {\n                    arr.length = 0;\n                    return;\n                }\n                var index = [].indexOf.call(arr, fn);\n                if (index === -1) {\n                    return;\n                }\n                arr.splice(index, 1);\n            });\n        }\n        unsubscribe(topic, subscriber) {\n            var foundTopic = this.find(topic);\n            this.remover(foundTopic, subscriber);\n            this.callbacks[topic] = this.callbacks[topic] || [];\n            this.remover(this.callbacks[topic], subscriber);\n        }\n        publish(topic, params = {}) {\n            var foundTopic = this.find(topic);\n            var runList = [];\n            foundTopic.forEach(function (subscriber) {\n                runList.push(subscriber);\n            });\n            util.seq(runList, params, this.runCallbacks(topic));\n        }\n        runCallbacks(topic) {\n            return (err, params) => {\n                this.callbacks[topic] = this.callbacks[topic] || [];\n                this.callbacks[topic].forEach(c => {\n                    c(err, params);\n                });\n            };\n        }\n        done(topic, callback = function () {\n        }) {\n            this.callbacks[topic] = this.callbacks[topic] || [];\n            this.callbacks[topic].push(callback);\n        }\n    };\n});\ndefine('skylark-widgets-coder/Coder',[\n    'skylark-langx/skylark',\n    'skylark-langx/langx',\n    'skylark-widgets-base/Widget',\n    \"skylark-domx-styler\",\n    \"skylark-domx-data\",\n    './util',\n    './template',\n    './plugin',\n    './pubsoup'\n], function (skylark,langx,Widget, styler,datax,util, template, plugin, PubSoup, BundlePlugins) {\n    'use strict';\n    class Coder extends Widget{\n        get klassName() {\n          return \"Coder\";\n        } \n\n        get pluginName(){\n          return \"lark.coder\";\n        } \n\n        constructor($coderContainer, opts) {\n            super($coderContainer, opts);\n            if (!$coderContainer) {\n                throw new Error(\"Can't find Coder container.\");\n            }\n            var _private = {};\n            this._get = function (key) {\n                return _private[key];\n            };\n            this._set = function (key, value) {\n                _private[key] = value;\n                return _private[key];\n            };\n            var options = this._set('options', langx.extend({\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                plugins: []\n            },opts));\n            options.plugins.push('render');\n            if (options.runScripts === false) {\n                options.plugins.push('scriptless');\n            }\n            this._set('cachedContent', {\n                html: null,\n                css: null,\n                js: null\n            });\n            var pubsoup = this._set('pubsoup', new PubSoup());\n            this._set('trigger', this.trigger());\n            this._set('on', function () {\n                pubsoup.subscribe.apply(pubsoup, arguments);\n            });\n            this._set('off', function () {\n                pubsoup.unsubscribe.apply(pubsoup, arguments);\n            });\n            var done = this._set('done', function () {\n                pubsoup.done.apply(pubsoup, arguments);\n            });\n            done('change', this.errors.bind(this));\n            var $container = this._set('$container', $coderContainer);\n            $container.innerHTML = template.container();\n            styler.addClass($container, template.containerClass());\n            var paneActive = this._set('paneActive', options.pane);\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            this._set('$status', {});\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.markup(type);\n            }\n            $container.addEventListener('keyup', langx.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('change', langx.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('click', this.pane.bind(this));\n            this.$container = this._get('$container');\n            this.on = this._get('on');\n            this.off = this._get('off');\n            this.done = this._get('done');\n            this.trigger = this._get('trigger');\n            this.paneActive = this._get('paneActive');\n            this._set('plugins', {});\n            plugin.init.call(this);\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.load(type);\n            }\n            if (options.showBlank) {\n                for (let type of [\n                        'html',\n                        'css',\n                        'js'\n                    ]) {\n                    styler.addClass($container, template.hasFileClass(type));\n                }\n            }\n        }\n\n        findFile(type) {\n            var file = {};\n            var options = this._get('options');\n            for (let fileIndex in options.files) {\n                let file = options.files[fileIndex];\n                if (file.type === type) {\n                    return file;\n                }\n            }\n            return file;\n        }\n        markup(type) {\n            var $container = this._get('$container');\n            var $parent = $container.querySelector(`.coder-pane-${ type }`);\n            var file = this.findFile(type);\n            var $editor = document.createElement('div');\n            $editor.innerHTML = template.editorContent(type, file.url);\n            $editor.className = template.editorClass(type);\n            $parent.appendChild($editor);\n            this._get('$status')[type] = $parent.querySelector('.coder-status');\n            if (typeof file.url !== 'undefined' || typeof file.content !== 'undefined') {\n                styler.addClass($container, template.hasFileClass(type));\n            }\n        }\n        load(type) {\n            var file = this.findFile(type);\n            var $textarea = this._get('$container').querySelector(`.coder-pane-${ type } textarea`);\n            if (typeof file.content !== 'undefined') {\n                this.setValue($textarea, file.content);\n            } else if (typeof file.url !== 'undefined') {\n                this.status('loading', [template.statusLoading(file.url)], {\n                    type: type,\n                    file: file\n                });\n                util.fetch(file.url, (err, res) => {\n                    if (err) {\n                        this.status('error', [template.statusFetchError(err)], { type: type });\n                        return;\n                    }\n                    this.clearStatus('loading', { type: type });\n                    this.setValue($textarea, res);\n                });\n            } else {\n                this.setValue($textarea, '');\n            }\n        }\n        setValue($textarea, val) {\n            $textarea.value = val;\n            this.change({ target: $textarea });\n        }\n        change(e) {\n            var type = datax.data(e.target, 'coder-type');\n            if (!type) {\n                return;\n            }\n            var cachedContent = this._get('cachedContent');\n            if (cachedContent[type] === e.target.value) {\n                return;\n            }\n            cachedContent[type] = e.target.value;\n            this.trigger('change', {\n                type: type,\n                file: datax.data(e.target, 'coder-file'),\n                content: cachedContent[type]\n            });\n        }\n        errors(errs, params) {\n            this.status('error', errs, params);\n        }\n        pane(e) {\n            if (!datax.data(e.target, 'coder-type')) {\n                return;\n            }\n            var $container = this._get('$container');\n            var paneActive = this._get('paneActive');\n            styler.removeClass($container, template.paneActiveClass(paneActive));\n            paneActive = this._set('paneActive', datax.data(e.target, 'coder-type'));\n            styler.addClass($container, template.paneActiveClass(paneActive));\n            e.preventDefault();\n        }\n        status(statusType = 'error', messages = [], params = {}) {\n            if (!messages.length) {\n                return this.clearStatus(statusType, params);\n            }\n            var $status = this._get('$status');\n            styler.addClass($status[params.type], template.statusClass(statusType));\n            styler.addClass(this._get('$container'), template.statusActiveClass(params.type));\n            var markup = '';\n            messages.forEach(function (err) {\n                markup += template.statusMessage(err);\n            });\n            $status[params.type].innerHTML = markup;\n        }\n        clearStatus(statusType, params) {\n            var $status = this._get('$status');\n            styler.removeClass($status[params.type], template.statusClass(statusType));\n            styler.removeClass(this._get('$container'), template.statusActiveClass(params.type));\n            $status[params.type].innerHTML = '';\n        }\n        trigger() {\n            var options = this._get('options');\n            var pubsoup = this._get('pubsoup');\n            if (options.debounce === false) {\n                return function () {\n                    pubsoup.publish.apply(pubsoup, arguments);\n                };\n            }\n            var cooldown = {};\n            var multiple = {};\n            return function (topic, {\n                type = 'default'\n            } = {}) {\n                if (cooldown[type]) {\n                    multiple[type] = true;\n                } else {\n                    pubsoup.publish.apply(pubsoup, arguments);\n                }\n                clearTimeout(cooldown[type]);\n                cooldown[type] = setTimeout(() => {\n                    if (multiple[type]) {\n                        pubsoup.publish.apply(pubsoup, arguments);\n                    }\n                    multiple[type] = null;\n                    cooldown[type] = null;\n                }, options.debounce);\n            };\n        }\n    }\n    Coder.plugin = function () {\n        return plugin.register.apply(this, arguments);\n    };\n\n    return skylark.attach(\"widgets.Coder\",Coder);\n});\ndefine('skylark-widgets-coder/addons/codemirror',[\n    'skylark-langx/langx',\n    'skylark-domx-data',\n    'skylark-codemirror/CodeMirror',\n    '../util',\n    \"../Coder\"    \n], function (langx,datax,CodeMirror,util,Coder) {\n    'use strict';\n    class PluginCodeMirror {\n        constructor(coder, options) {\n            var priority = 1;\n            var i;\n            this.editor = {};\n            this.coder = coder;\n            var modemap = { 'html': 'htmlmixed' };\n            options = langx.extend({},options, { lineNumbers: true });\n            //if (typeof window.CodeMirror === 'undefined') {\n            //    return;\n            //}\n            var $editors = coder.$container.querySelectorAll('.coder-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = datax.data($textarea, 'coder-type');\n                let file = datax.data($textarea, 'coder-file');\n                this.editor[type] = CodeMirror.fromTextArea($textarea, options);\n                this.editor[type].setOption('mode', util.getMode(type, file, modemap));\n            }\n            coder.on('change', this.change.bind(this), priority);\n        }\n        editorChange(params) {\n            return () => {\n                this.coder.trigger('change', params);\n            };\n        }\n        change(params, callback) {\n            var editor = this.editor[params.type];\n            if (!params.cmEditor) {\n                editor.setValue(params.content);\n                params.cmEditor = editor;\n                editor.on('change', this.editorChange(params));\n            }\n            params.content = editor.getValue();\n            callback(null, params);\n        }\n    };\n\n    Coder.plugin('codemirror', PluginCodeMirror);\n\n    return PluginCodeMirror;\n});\ndefine('skylark-widgets-coder/addons/console',[\n    'skylark-langx/langx',\n    \"skylark-domx-styler\",\n    '../util',\n    \"../Coder\"\n], function (langx,styler,util,Coder) {\n    'use strict';\n    \n    class PluginConsole {\n        constructor(coder, options) {\n            options = langx.mixin({ autoClear: false },options);\n            var priority = 30;\n            var history = [];\n            var historyIndex = 0;\n            var logCaptureSnippet = `(function ${ this.capture.toString() })();`;\n            var contentCache = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            var $nav = document.createElement('li');\n            styler.addClass($nav, 'coder-nav-item coder-nav-item-console');\n            $nav.innerHTML = '<a href=\"#\" data-coder-type=\"console\">JS Console</a>';\n            var $pane = document.createElement('div');\n            styler.addClass($pane, 'coder-pane coder-pane-console');\n            $pane.innerHTML = `\n              <div class=\"coder-console-container\">\n                <ul class=\"coder-console-output\"></ul>\n                <form class=\"coder-console-input\">\n                  <input type=\"text\">\n                </form>\n              </div>\n              <button class=\"coder-button coder-console-clear\">Clear</button>\n            `;\n\n            coder.$container.appendChild($pane);\n            coder.$container.querySelector('.coder-nav').appendChild($nav);\n            var $container = coder.$container.querySelector('.coder-console-container');\n            var $output = coder.$container.querySelector('.coder-console-output');\n            var $input = coder.$container.querySelector('.coder-console-input input');\n            var $inputForm = coder.$container.querySelector('.coder-console-input');\n            var $clear = coder.$container.querySelector('.coder-console-clear');\n            $inputForm.addEventListener('submit', this.submit.bind(this));\n            $input.addEventListener('keydown', this.history.bind(this));\n            $clear.addEventListener('click', this.clear.bind(this));\n            if (options.autoClear === true) {\n                coder.on('change', this.autoClear.bind(this), priority - 1);\n            }\n            coder.on('change', this.change.bind(this), priority);\n            window.addEventListener('message', this.getMessage.bind(this));\n            this.$coderContainer = coder.$container;\n            this.$container = $container;\n            this.$input = $input;\n            this.$output = $output;\n            this.history = history;\n            this.historyIndex = historyIndex;\n            this.logCaptureSnippet = logCaptureSnippet;\n            this.contentCache = contentCache;\n            this.getIframe = this.getIframe.bind(this);\n        }\n        getIframe() {\n            return this.$coderContainer.querySelector('.coder-pane-result iframe');\n        }\n        getMessage(e) {\n            if (e.source !== this.getIframe().contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (err) {\n            }\n            if (data.type === 'coder-console-log') {\n                this.log(data.message);\n            }\n        }\n        autoClear(params, callback) {\n            var snippetlessContent = params.content;\n            if (params.type === 'js') {\n                snippetlessContent = snippetlessContent.replace(this.logCaptureSnippet, '');\n            }\n            if (params.forceRender === true || this.contentCache[params.type] !== snippetlessContent) {\n                this.clear();\n            }\n            this.contentCache[params.type] = snippetlessContent;\n            callback(null, params);\n        }\n        change(params, callback) {\n            if (params.type !== 'js') {\n                return callback(null, params);\n            }\n            if (params.content.indexOf(this.logCaptureSnippet) === -1) {\n                params.content = `${ this.logCaptureSnippet }${ params.content }`;\n            }\n            callback(null, params);\n        }\n        capture() {\n            if (typeof window.console === 'undefined' || typeof window.console.log === 'undefined') {\n                window.console = {\n                    log: function () {\n                    }\n                };\n            }\n            var oldConsoleLog = Function.prototype.bind.call(window.console.log, window.console);\n            window.console.log = function () {\n                [].slice.call(arguments).forEach(function (message) {\n                    window.parent.postMessage(JSON.stringify({\n                        type: 'coder-console-log',\n                        message: message\n                    }), '*');\n                });\n                oldConsoleLog.apply(oldConsoleLog, arguments);\n            };\n        }\n        log(message = '', type) {\n            var $log = document.createElement('li');\n            styler.addClass($log, 'coder-console-log');\n            if (typeof type !== 'undefined') {\n                styler.addClass($log, `coder-console-log-${ type }`);\n            }\n            $log.innerHTML = message;\n            this.$output.appendChild($log);\n        }\n        submit(e) {\n            var inputValue = this.$input.value.trim();\n            if (inputValue === '') {\n                return e.preventDefault();\n            }\n            this.history.push(inputValue);\n            this.historyIndex = this.history.length;\n            this.log(inputValue, 'history');\n            if (inputValue.indexOf('return') !== 0) {\n                inputValue = 'return ' + inputValue;\n            }\n            try {\n                var scriptOutput = this.getIframe().contentWindow.eval(`(function() {${ inputValue }})()`);\n                this.log(scriptOutput);\n            } catch (err) {\n                this.log(err, 'error');\n            }\n            this.$input.value = '';\n            this.$container.scrollTop = this.$container.scrollHeight;\n            e.preventDefault();\n        }\n        clear() {\n            this.$output.innerHTML = '';\n        }\n        history(e) {\n            var UP = 38;\n            var DOWN = 40;\n            var gotHistory = false;\n            var selectionStart = this.$input.selectionStart;\n            if (e.keyCode === UP && this.historyIndex !== 0 && selectionStart === 0) {\n                this.historyIndex--;\n                gotHistory = true;\n            }\n            if (e.keyCode === DOWN && this.historyIndex !== this.history.length - 1 && selectionStart === this.$input.value.length) {\n                this.historyIndex++;\n                gotHistory = true;\n            }\n            if (gotHistory) {\n                this.$input.value = this.history[this.historyIndex];\n            }\n        }\n    };\n\n    Coder.plugin('console', PluginConsole);\n\n    return PluginConsole;\n});\ndefine('skylark-widgets-coder/addons/play',[\n    'skylark-langx/langx',\n    '../util',\n    \"../Coder\"\n], function (langx,util,Coder) {\n    'use strict';\n    class PluginPlay {\n        constructor(coder, options) {\n            options = langx.mixin({ firstRun: true },options);\n            var priority = 10;\n            var cache = {};\n            var code = {};\n            if (options.firstRun === false) {\n                cache = {\n                    html: {\n                        type: 'html',\n                        content: ''\n                    },\n                    css: {\n                        type: 'css',\n                        content: ''\n                    },\n                    js: {\n                        type: 'js',\n                        content: ''\n                    }\n                };\n            }\n            var $button = document.createElement('button');\n            $button.className = 'coder-button coder-button-play';\n            $button.innerHTML = 'Run';\n            coder.$container.appendChild($button);\n            $button.addEventListener('click', this.run.bind(this));\n            coder.on('change', this.change.bind(this), priority);\n            this.cache = cache;\n            this.code = code;\n            this.coder = coder;\n        }\n        change(params, callback) {\n            this.code[params.type] = langx.clone(params);\n            if (typeof this.cache[params.type] !== 'undefined') {\n                callback(null, this.cache[params.type]);\n                this.cache[params.type].forceRender = null;\n            } else {\n                this.cache[params.type] = langx.clone(params);\n                callback(null, params);\n            }\n        }\n        run() {\n            for (let type in this.code) {\n                this.cache[type] = langx.mixin({ forceRender: true },this.code[type]);\n                this.coder.trigger('change', this.cache[type]);\n            }\n        }\n    };\n\n    Coder.plugin('play', PluginPlay);\n\n    return PluginPlay;\n});\ndefine('skylark-widgets-coder/addons/render',[\n    'skylark-langx/langx',\n    '../util',\n    \"../Coder\"\n], function (langx,util,Coder) {\n    'use strict';\n    class PluginRender {\n        constructor(coder, options) {\n            options = langx.clone(options);\n            var supportSrcdoc = !!('srcdoc' in document.createElement('iframe'));\n            var $resultFrame = coder.$container.querySelector('.coder-pane-result iframe');\n            var frameContent = '';\n            var content = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            window.addEventListener('message', this.domready.bind(this));\n            coder.on('change', this.change.bind(this), 100);\n            this.supportSrcdoc = supportSrcdoc;\n            this.content = content;\n            this.frameContent = frameContent;\n            this.$resultFrame = $resultFrame;\n            this.callbacks = [];\n            this.index = 0;\n            this.lastCallback = () => {\n            };\n        }\n        template(style = '', body = '', script = '') {\n            return `\n      <!doctype html>\n      <html>\n        <head>\n          <script>\n            (function () {\n              window.addEventListener('DOMContentLoaded', function () {\n                window.parent.postMessage(JSON.stringify({\n                  type: 'coder-dom-ready'\n                }), '*')\n              })\n            }())\n          </script>\n\n          <style>${ style }</style>\n        </head>\n        <body>\n          ${ body }\n\n          <!--\n            Coder:\n            Empty script tag prevents malformed HTML from breaking the next script.\n          -->\n          <script></script>\n          <script>${ script }</script>\n        </body>\n      </html>\n    `;\n        }\n        change(params, callback) {\n            this.content[params.type] = params.content;\n            var oldFrameContent = this.frameContent;\n            this.frameContent = this.template(this.content['css'], this.content['html'], this.content['js']);\n            this.lastCallback = () => {\n                this.lastCallback = () => {\n                };\n                callback(null, params);\n            };\n            if (params.forceRender !== true && this.frameContent === oldFrameContent) {\n                callback(null, params);\n                return;\n            }\n            if (this.supportSrcdoc) {\n                var $newResultFrame = document.createElement('iframe');\n                this.$resultFrame.parentNode.replaceChild($newResultFrame, this.$resultFrame);\n                this.$resultFrame = $newResultFrame;\n                this.$resultFrame.contentWindow.document.open();\n                this.$resultFrame.contentWindow.document.write(this.frameContent);\n                this.$resultFrame.contentWindow.document.close();\n            } else {\n                this.$resultFrame.setAttribute('data-srcdoc', this.frameContent);\n                var jsUrl = 'javascript:window.frameElement.getAttribute(\"data-srcdoc\");';\n                this.$resultFrame.setAttribute('src', jsUrl);\n                if (this.$resultFrame.contentWindow) {\n                    this.$resultFrame.contentWindow.location = jsUrl;\n                }\n            }\n        }\n        domready(e) {\n            if (e.source !== this.$resultFrame.contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (e) {\n            }\n            if (data.type === 'coder-dom-ready') {\n                this.lastCallback();\n            }\n        }\n    };\n\n    Coder.plugin('render', PluginRender);\n\n    return PluginRender;\n});\ndefine('skylark-widgets-coder/main',[\r\n\t\"./Coder\",\r\n\t\"./addons/codemirror\",\r\n\t\"./addons/console\",\r\n\t\"./addons/play\",\r\n\t\"./addons/render\"\r\n],function(Coder){\r\n\r\n\treturn Coder;\r\n});\ndefine('skylark-widgets-coder', ['skylark-widgets-coder/main'], function (main) { return main; });\n\n"]}