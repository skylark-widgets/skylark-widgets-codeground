{"version":3,"sources":["skylark-widgets-coder.js"],"names":["define","Xhr","extend","obj","defaults","extended","Object","keys","forEach","key","seqRunner","index","params","arr","errors","callback","err","res","push","length","apply","this","arguments","hasClass","node","className","tempClass","indexOf","defaultModemap","html","css","js","less","styl","coffee","fetch","url","get","then","e","seq","debounce","fn","delay","cooldown","multiple","clearTimeout","setTimeout","log","console","getMode","type","file","customModemap","modemap","keyLength","slice","data","attr","getAttribute","addClass","removeClass","spaceBefore","spaceAfter","replace","container","paneActiveClass","containerClass","hasFileClass","editorClass","editorContent","fileUrl","statusMessage","statusClass","statusActiveClass","pluginClass","name","statusLoading","statusFetchError","util","template","plugins","register","id","plugin","_id","init","_get","Plugin","pluginName","pluginOptions","options","pluginIndex","Error","find","[object Object]","topics","callbacks","query","topic","subscriber","priority","foundTopic","_priority","sort","a","b","call","splice","remover","runList","runCallbacks","c","coder","supportSrcdoc","document","createElement","$resultFrame","$container","querySelector","window","addEventListener","domready","bind","on","change","content","frameContent","lastCallback","style","body","script","oldFrameContent","forceRender","$newResultFrame","parentNode","replaceChild","contentWindow","open","write","close","setAttribute","jsUrl","location","source","JSON","parse","runScriptTypes","fragment","innerHTML","typeAttr","$scripts","querySelectorAll","i","removeChild","ace","editor","$editors","$textarea","$aceContainer","appendChild","edit","editorOptions","getSession","setMode","setOptions","$blockScrolling","Infinity","trigger","aceEditor","setValue","editorChange","getValue","CodeMirror","lineNumbers","fromTextArea","setOption","cmEditor","isLess","render","CoffeeScript","isCoffee","compile","stylus","isStylus","Babel","babel","transform","code","marked","autoClear","logCaptureSnippet","capture","toString","$nav","$pane","$output","$input","$inputForm","$clear","submit","history","clear","getMessage","$coderContainer","historyIndex","contentCache","getIframe","message","snippetlessContent","oldConsoleLog","Function","prototype","parent","postMessage","stringify","$log","inputValue","value","trim","preventDefault","scriptOutput","eval","scrollTop","scrollHeight","gotHistory","selectionStart","keyCode","cache","firstRun","$button","run","panes","title","classChecker","$availablePanes","p","classList","contains","resizablePanes","j","expander","undefined","$paneTitle","add","$paneElement","firstElementChild","insertBefore","firstChild","startExpand","event","filter","pane","target","shift","$previousPane","$relativePixel","parseInt","getComputedStyle","display","startX","clientX","startWidth","parseFloat","mousemove","doDrag","mouseup","stopDrag","previousPane","relativePixel","ppNewWidth","cpNewWidth","maxWidth","width","removeEventListener","PluginRender","PluginScriptless","PluginAce","PluginCodeMirror","PluginLess","PluginCoffeeScript","PluginStylus","PluginBabel","PluginMarkdown","PluginConsole","PluginPlay","PluginPen","skylark","PubSoup","BundlePlugins","Coder","opts","_private","_set","files","showBlank","runScripts","pubsoup","subscribe","unsubscribe","done","paneActive","markup","off","load","fileIndex","$parent","findFile","$editor","status","clearStatus","val","cachedContent","errs","statusType","messages","$status","publish","attach","main"],"mappings":"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","file":"../skylark-widgets-coder.js","sourcesContent":["define('skylark-widgets-coder/util',[\n    \"skylark-net-http/Xhr\"\n],function (Xhr) {\n    'use strict';\n    function extend(obj = {}, defaults = {}) {\n        var extended = {};\n        Object.keys(obj).forEach(function (key) {\n            extended[key] = obj[key];\n        });\n        Object.keys(defaults).forEach(function (key) {\n            if (typeof extended[key] !== 'undefined') {\n                extended[key] = obj[key];\n            } else {\n                extended[key] = defaults[key];\n            }\n        });\n        return extended;\n    }\n    function fetch(url, callback) {\n        /*\n        var xhr = new window.XMLHttpRequest();\n        xhr.open('GET', url);\n        xhr.responseType = 'text';\n        xhr.onload = function () {\n            if (xhr.status === 200) {\n                callback(null, xhr.responseText);\n            } else {\n                callback(url, xhr);\n            }\n        };\n        xhr.onerror = function (err) {\n            callback(err);\n        };\n        xhr.send();\n        */\n        Xhr.get(url).then(\n            function(res) {\n                callback(null,res);\n            },\n            function(e){\n                callback(e);\n            }\n        )\n    }\n    function runCallback(index, params, arr, errors, callback) {\n        return function (err, res) {\n            if (err) {\n                errors.push(err);\n            }\n            index++;\n            if (index < arr.length) {\n                seqRunner(index, res, arr, errors, callback);\n            } else {\n                callback(errors, res);\n            }\n        };\n    }\n    function seqRunner(index, params, arr, errors, callback) {\n        arr[index](params, runCallback.apply(this, arguments));\n    }\n    function seq(arr, params, callback = function () {\n    }) {\n        var errors = [];\n        if (!arr.length) {\n            return callback(errors, params);\n        }\n        seqRunner(0, params, arr, errors, callback);\n    }\n    function debounce(fn, delay) {\n        var cooldown = null;\n        var multiple = null;\n        return function () {\n            if (cooldown) {\n                multiple = true;\n            } else {\n                fn.apply(this, arguments);\n            }\n            clearTimeout(cooldown);\n            cooldown = setTimeout(() => {\n                if (multiple) {\n                    fn.apply(this, arguments);\n                }\n                cooldown = null;\n                multiple = null;\n            }, delay);\n        };\n    }\n    function log() {\n        console.log(arguments);\n    }\n    function hasClass(node, className) {\n        if (!node.className) {\n            return false;\n        }\n        var tempClass = ' ' + node.className + ' ';\n        className = ' ' + className + ' ';\n        if (tempClass.indexOf(className) !== -1) {\n            return true;\n        }\n        return false;\n    }\n    function addClass(node, className) {\n        if (hasClass(node, className)) {\n            return node.className;\n        }\n        if (node.className) {\n            className = ' ' + className;\n        }\n        node.className += className;\n        return node.className;\n    }\n    function removeClass(node, className) {\n        var spaceBefore = ' ' + className;\n        var spaceAfter = className + ' ';\n        if (node.className.indexOf(spaceBefore) !== -1) {\n            node.className = node.className.replace(spaceBefore, '');\n        } else if (node.className.indexOf(spaceAfter) !== -1) {\n            node.className = node.className.replace(spaceAfter, '');\n        } else {\n            node.className = node.className.replace(className, '');\n        }\n        return node.className;\n    }\n    function data(node, attr) {\n        return node.getAttribute('data-' + attr);\n    }\n    var defaultModemap = {\n        'html': 'html',\n        'css': 'css',\n        'js': 'javascript',\n        'less': 'less',\n        'styl': 'stylus',\n        'coffee': 'coffeescript'\n    };\n    function getMode(type = '', file = '', customModemap = {}) {\n        var modemap = extend(customModemap, defaultModemap);\n        for (let key in modemap) {\n            let keyLength = key.length;\n            if (file.slice(-keyLength++) === '.' + key) {\n                return modemap[key];\n            }\n        }\n        for (let key in modemap) {\n            if (type === key) {\n                return modemap[key];\n            }\n        }\n        return type;\n    }\n    return {\n        extend,\n        fetch,\n        seq,\n        debounce,\n        log,\n        getMode,\n        data,\n        hasClass,\n        addClass,\n        removeClass\n    };\n});\ndefine('skylark-widgets-coder/template',[],function () {\n    'use strict';\n    function container() {\n        return `\n    <ul class=\"coder-nav\">\n      <li class=\"coder-nav-item coder-nav-item-result\">\n        <a href=\"#\" data-coder-type=\"result\">\n          Result\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-html\">\n        <a href=\"#\" data-coder-type=\"html\">\n          HTML\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-css\">\n        <a href=\"#\" data-coder-type=\"css\">\n          CSS\n        </a>\n      </li>\n      <li class=\"coder-nav-item coder-nav-item-js\">\n        <a href=\"#\" data-coder-type=\"js\">\n          JavaScript\n        </a>\n      </li>\n    </ul>\n    <div class=\"coder-pane coder-pane-result\"><iframe></iframe></div>\n    <div class=\"coder-pane coder-pane-html\"></div>\n    <div class=\"coder-pane coder-pane-css\"></div>\n    <div class=\"coder-pane coder-pane-js\"></div>\n  `;\n    }\n    function paneActiveClass(type) {\n        return `coder-pane-active-${ type }`;\n    }\n    function containerClass() {\n        return 'coder';\n    }\n    function hasFileClass(type) {\n        return `coder-has-${ type }`;\n    }\n    function editorClass(type) {\n        return `coder-editor coder-editor-${ type }`;\n    }\n    function editorContent(type, fileUrl = '') {\n        return `\n    <textarea data-coder-type=\"${ type }\" data-coder-file=\"${ fileUrl }\"></textarea>\n    <div class=\"coder-status\"></div>\n  `;\n    }\n    function statusMessage(err) {\n        return `\n    <p>${ err }</p>\n  `;\n    }\n    function statusClass(type) {\n        return `coder-status-${ type }`;\n    }\n    function statusActiveClass(type) {\n        return `coder-status-active-${ type }`;\n    }\n    function pluginClass(name) {\n        return `coder-plugin-${ name }`;\n    }\n    function statusLoading(url) {\n        return `Loading <strong>${ url }</strong>..`;\n    }\n    function statusFetchError(url) {\n        return `There was an error loading <strong>${ url }</strong>.`;\n    }\n    return {\n        container: container,\n        paneActiveClass: paneActiveClass,\n        containerClass: containerClass,\n        hasFileClass: hasFileClass,\n        editorClass: editorClass,\n        editorContent: editorContent,\n        statusMessage: statusMessage,\n        statusClass: statusClass,\n        statusActiveClass: statusActiveClass,\n        pluginClass: pluginClass,\n        statusLoading: statusLoading,\n        statusFetchError: statusFetchError\n    };\n});\ndefine('skylark-widgets-coder/plugin',[\n    './util',\n    './template'\n], function (util, template) {\n    'use strict';\n    var plugins = [];\n    function find(id) {\n        for (let pluginIndex in plugins) {\n            let plugin = plugins[pluginIndex];\n            if (plugin._id === id) {\n                return plugin;\n            }\n        }\n        throw new Error(`Plugin ${ id } is not registered.`);\n    }\n    function register(id, plugin) {\n        plugin._id = id;\n        plugins.push(plugin);\n    }\n    function init() {\n        this._get('options').plugins.forEach(plugin => {\n            let Plugin;\n            let pluginName;\n            let pluginOptions = {};\n            if (typeof plugin === 'string') {\n                pluginName = plugin;\n            } else if (typeof plugin === 'object') {\n                pluginName = plugin.name;\n                pluginOptions = plugin.options || {};\n            }\n            Plugin = find(pluginName);\n            this._get('plugins')[plugin] = new Plugin(this, pluginOptions);\n            util.addClass(this._get('$container'), template.pluginClass(pluginName));\n        });\n    }\n    return {\n        register,\n        init\n    };\n});\ndefine('skylark-widgets-coder/pubsoup',['./util'], function (util) {\n    'use strict';\n    return class PubSoup {\n        constructor() {\n            this.topics = {};\n            this.callbacks = {};\n        }\n        find(query) {\n            this.topics[query] = this.topics[query] || [];\n            return this.topics[query];\n        }\n        subscribe(topic, subscriber, priority = 90) {\n            var foundTopic = this.find(topic);\n            subscriber._priority = priority;\n            foundTopic.push(subscriber);\n            foundTopic.sort(function (a, b) {\n                return a._priority > b._priority ? 1 : b._priority > a._priority ? -1 : 0;\n            });\n        }\n        remover(arr, fn) {\n            arr.forEach(function () {\n                if (!fn) {\n                    arr.length = 0;\n                    return;\n                }\n                var index = [].indexOf.call(arr, fn);\n                if (index === -1) {\n                    return;\n                }\n                arr.splice(index, 1);\n            });\n        }\n        unsubscribe(topic, subscriber) {\n            var foundTopic = this.find(topic);\n            this.remover(foundTopic, subscriber);\n            this.callbacks[topic] = this.callbacks[topic] || [];\n            this.remover(this.callbacks[topic], subscriber);\n        }\n        publish(topic, params = {}) {\n            var foundTopic = this.find(topic);\n            var runList = [];\n            foundTopic.forEach(function (subscriber) {\n                runList.push(subscriber);\n            });\n            util.seq(runList, params, this.runCallbacks(topic));\n        }\n        runCallbacks(topic) {\n            return (err, params) => {\n                this.callbacks[topic] = this.callbacks[topic] || [];\n                this.callbacks[topic].forEach(c => {\n                    c(err, params);\n                });\n            };\n        }\n        done(topic, callback = function () {\n        }) {\n            this.callbacks[topic] = this.callbacks[topic] || [];\n            this.callbacks[topic].push(callback);\n        }\n    };\n});\ndefine('skylark-widgets-coder/plugins/render',['../util'], function (util) {\n    'use strict';\n    return class PluginRender {\n        constructor(coder, options) {\n            options = util.extend(options, {});\n            var supportSrcdoc = !!('srcdoc' in document.createElement('iframe'));\n            var $resultFrame = coder.$container.querySelector('.coder-pane-result iframe');\n            var frameContent = '';\n            var content = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            window.addEventListener('message', this.domready.bind(this));\n            coder.on('change', this.change.bind(this), 100);\n            this.supportSrcdoc = supportSrcdoc;\n            this.content = content;\n            this.frameContent = frameContent;\n            this.$resultFrame = $resultFrame;\n            this.callbacks = [];\n            this.index = 0;\n            this.lastCallback = () => {\n            };\n        }\n        template(style = '', body = '', script = '') {\n            return `\n      <!doctype html>\n      <html>\n        <head>\n          <script>\n            (function () {\n              window.addEventListener('DOMContentLoaded', function () {\n                window.parent.postMessage(JSON.stringify({\n                  type: 'coder-dom-ready'\n                }), '*')\n              })\n            }())\n          </script>\n\n          <style>${ style }</style>\n        </head>\n        <body>\n          ${ body }\n\n          <!--\n            Coder:\n            Empty script tag prevents malformed HTML from breaking the next script.\n          -->\n          <script></script>\n          <script>${ script }</script>\n        </body>\n      </html>\n    `;\n        }\n        change(params, callback) {\n            this.content[params.type] = params.content;\n            var oldFrameContent = this.frameContent;\n            this.frameContent = this.template(this.content['css'], this.content['html'], this.content['js']);\n            this.lastCallback = () => {\n                this.lastCallback = () => {\n                };\n                callback(null, params);\n            };\n            if (params.forceRender !== true && this.frameContent === oldFrameContent) {\n                callback(null, params);\n                return;\n            }\n            if (this.supportSrcdoc) {\n                var $newResultFrame = document.createElement('iframe');\n                this.$resultFrame.parentNode.replaceChild($newResultFrame, this.$resultFrame);\n                this.$resultFrame = $newResultFrame;\n                this.$resultFrame.contentWindow.document.open();\n                this.$resultFrame.contentWindow.document.write(this.frameContent);\n                this.$resultFrame.contentWindow.document.close();\n            } else {\n                this.$resultFrame.setAttribute('data-srcdoc', this.frameContent);\n                var jsUrl = 'javascript:window.frameElement.getAttribute(\"data-srcdoc\");';\n                this.$resultFrame.setAttribute('src', jsUrl);\n                if (this.$resultFrame.contentWindow) {\n                    this.$resultFrame.contentWindow.location = jsUrl;\n                }\n            }\n        }\n        domready(e) {\n            if (e.source !== this.$resultFrame.contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (e) {\n            }\n            if (data.type === 'coder-dom-ready') {\n                this.lastCallback();\n            }\n        }\n    };\n});\ndefine('skylark-widgets-coder/plugins/scriptless',['../util'], function (util) {\n    'use strict';\n    return class PluginScriptless {\n        constructor(coder, options) {\n            options = util.extend(options, {});\n            var runScriptTypes = [\n                'application/javascript',\n                'application/ecmascript',\n                'application/x-ecmascript',\n                'application/x-javascript',\n                'text/ecmascript',\n                'text/javascript',\n                'text/javascript1.0',\n                'text/javascript1.1',\n                'text/javascript1.2',\n                'text/javascript1.3',\n                'text/javascript1.4',\n                'text/javascript1.5',\n                'text/jscript',\n                'text/livescript',\n                'text/x-ecmascript',\n                'text/x-javascript'\n            ];\n            coder.on('change', this.change.bind(this));\n            this.runScriptTypes = runScriptTypes;\n        }\n        change(params, callback) {\n            if (params.type !== 'html') {\n                return callback(null, params);\n            }\n            var fragment = document.createElement('div');\n            fragment.innerHTML = params.content;\n            var typeAttr = null;\n            var $scripts = fragment.querySelectorAll('script');\n            for (let i = 0; i < $scripts.length; i++) {\n                typeAttr = $scripts[i].getAttribute('type');\n                if (!typeAttr || this.runScriptTypes.indexOf(typeAttr) !== -1) {\n                    $scripts[i].parentNode.removeChild($scripts[i]);\n                }\n            }\n            params.content = fragment.innerHTML;\n            callback(null, params);\n        }\n    };\n});\ndefine('skylark-widgets-coder/plugins/ace',[\n    'skylark-ace',\n    '../util'\n], function (ace,util) {\n    'use strict';\n    return class PluginAce {\n        constructor(coder, options) {\n            var priority = 1;\n            var i;\n            this.editor = {};\n            this.coder = coder;\n            options = util.extend(options, {});\n            //if (typeof window.ace === 'undefined') {\n            //    return;\n            // }\n            var $editors = coder.$container.querySelectorAll('.coder-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = util.data($textarea, 'coder-type');\n                let file = util.data($textarea, 'coder-file');\n                let $aceContainer = document.createElement('div');\n                $editors[i].appendChild($aceContainer);\n                this.editor[type] = ace.edit($aceContainer);\n                let editor = this.editor[type];\n                let editorOptions = util.extend(options);\n                editor.getSession().setMode('ace/mode/' + util.getMode(type, file));\n                editor.getSession().setOptions(editorOptions);\n                editor.$blockScrolling = Infinity;\n            }\n            coder.on('change', this.change.bind(this), priority);\n        }\n        editorChange(params) {\n            return () => {\n                this.coder.trigger('change', params);\n            };\n        }\n        change(params, callback) {\n            var editor = this.editor[params.type];\n            if (!params.aceEditor) {\n                editor.getSession().setValue(params.content);\n                params.aceEditor = editor;\n                editor.on('change', this.editorChange(params));\n            }\n            params.content = editor.getValue();\n            callback(null, params);\n        }\n    };\n});\ndefine('skylark-widgets-coder/plugins/codemirror',[\n    'skylark-codemirror/CodeMirror',\n    '../util'\n], function (CodeMirror,util) {\n    'use strict';\n    return class PluginCodeMirror {\n        constructor(coder, options) {\n            var priority = 1;\n            var i;\n            this.editor = {};\n            this.coder = coder;\n            var modemap = { 'html': 'htmlmixed' };\n            options = util.extend(options, { lineNumbers: true });\n            //if (typeof window.CodeMirror === 'undefined') {\n            //    return;\n            //}\n            var $editors = coder.$container.querySelectorAll('.coder-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = util.data($textarea, 'coder-type');\n                let file = util.data($textarea, 'coder-file');\n                this.editor[type] = CodeMirror.fromTextArea($textarea, options);\n                this.editor[type].setOption('mode', util.getMode(type, file, modemap));\n            }\n            coder.on('change', this.change.bind(this), priority);\n        }\n        editorChange(params) {\n            return () => {\n                this.coder.trigger('change', params);\n            };\n        }\n        change(params, callback) {\n            var editor = this.editor[params.type];\n            if (!params.cmEditor) {\n                editor.setValue(params.content);\n                params.cmEditor = editor;\n                editor.on('change', this.editorChange(params));\n            }\n            params.content = editor.getValue();\n            callback(null, params);\n        }\n    };\n});\ndefine('skylark-widgets-coder/plugins/less',['../util'], function (util) {\n    'use strict';\n    return class PluginLess {\n        constructor(coder, options) {\n            var priority = 20;\n            options = util.extend(options, {});\n            if (typeof window.less === 'undefined') {\n                return;\n            }\n            coder.$container.querySelector('a[data-coder-type=\"css\"]').innerHTML = 'Less';\n            coder.on('change', this.change.bind(this), priority);\n        }\n        isLess(params) {\n            if (params.type !== 'css') {\n                return false;\n            }\n            return params.file.indexOf('.less') !== -1 || params.file === '';\n        }\n        change(params, callback) {\n            if (this.isLess(params)) {\n                window.less.render(params.content, this.options, (err, res) => {\n                    if (err) {\n                        return callback(err, params);\n                    } else {\n                        params.content = res.css;\n                    }\n                    callback(null, params);\n                });\n            } else {\n                callback(null, params);\n            }\n        }\n    };\n});\ndefine('skylark-widgets-coder/plugins/coffeescript',['../util'], function (util) {\n    'use strict';\n    return class PluginCoffeeScript {\n        constructor(coder, options) {\n            var priority = 20;\n            options = util.extend(options, {});\n            if (typeof window.CoffeeScript === 'undefined') {\n                return;\n            }\n            coder.$container.querySelector('a[data-coder-type=\"js\"]').innerHTML = 'CoffeeScript';\n            coder.on('change', this.change.bind(this), priority);\n        }\n        isCoffee(params) {\n            if (params.type !== 'js') {\n                return false;\n            }\n            return params.file.indexOf('.coffee') !== -1 || params.file === '';\n        }\n        change(params, callback) {\n            if (this.isCoffee(params)) {\n                try {\n                    params.content = window.CoffeeScript.compile(params.content);\n                } catch (err) {\n                    return callback(err, params);\n                }\n            }\n            callback(null, params);\n        }\n    };\n});\ndefine('skylark-widgets-coder/plugins/stylus',['../util'], function (util) {\n    'use strict';\n    return class PluginStylus {\n        constructor(coder, options) {\n            var priority = 20;\n            options = util.extend(options, {});\n            if (typeof window.stylus === 'undefined') {\n                return;\n            }\n            coder.$container.querySelector('a[data-coder-type=\"css\"]').innerHTML = 'Stylus';\n            coder.on('change', this.change.bind(this), priority);\n        }\n        isStylus(params) {\n            if (params.type !== 'css') {\n                return false;\n            }\n            return params.file.indexOf('.styl') !== -1 || params.file === '';\n        }\n        change(params, callback) {\n            if (this.isStylus(params)) {\n                window.stylus(params.content, this.options).render((err, res) => {\n                    if (err) {\n                        return callback(err, params);\n                    } else {\n                        params.content = res;\n                    }\n                    callback(null, params);\n                });\n            } else {\n                callback(null, params);\n            }\n        }\n    };\n});\ndefine('skylark-widgets-coder/plugins/babel',['../util'], function (util) {\n    'use strict';\n    return class PluginBabel {\n        constructor(coder, options) {\n            var priority = 20;\n            this.options = util.extend(options, {});\n            if (typeof window.Babel !== 'undefined') {\n                this.babel = window.Babel;\n            } else if (typeof window.babel !== 'undefined') {\n                this.babel = { transform: window.babel };\n            } else {\n                return;\n            }\n            coder.$container.querySelector('a[data-coder-type=\"js\"]').innerHTML = 'ES2015';\n            coder.on('change', this.change.bind(this), priority);\n        }\n        change(params, callback) {\n            if (params.type === 'js') {\n                try {\n                    params.content = this.babel.transform(params.content, this.options).code;\n                } catch (err) {\n                    return callback(err, params);\n                }\n                callback(null, params);\n            } else {\n                callback(null, params);\n            }\n        }\n    };\n});\ndefine('skylark-widgets-coder/plugins/markdown',['../util'], function (util) {\n    'use strict';\n    return class PluginMarkdown {\n        constructor(coder, options) {\n            var priority = 20;\n            this.options = util.extend(options, {});\n            if (typeof window.marked === 'undefined') {\n                return;\n            }\n            window.marked.setOptions(options);\n            coder.$container.querySelector('a[data-coder-type=\"html\"]').innerHTML = 'Markdown';\n            coder.on('change', this.change.bind(this), priority);\n        }\n        change(params, callback) {\n            if (params.type === 'html') {\n                try {\n                    params.content = window.marked(params.content);\n                } catch (err) {\n                    return callback(err, params);\n                }\n                callback(null, params);\n            } else {\n                callback(null, params);\n            }\n        }\n    };\n});\ndefine('skylark-widgets-coder/plugins/console',['../util'], function (util) {\n    'use strict';\n    return class PluginConsole {\n        constructor(coder, options) {\n            options = util.extend(options, { autoClear: false });\n            var priority = 30;\n            var history = [];\n            var historyIndex = 0;\n            var logCaptureSnippet = `(function ${ this.capture.toString() })();`;\n            var contentCache = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            var $nav = document.createElement('li');\n            util.addClass($nav, 'coder-nav-item coder-nav-item-console');\n            $nav.innerHTML = '<a href=\"#\" data-coder-type=\"console\">JS Console</a>';\n            var $pane = document.createElement('div');\n            util.addClass($pane, 'coder-pane coder-pane-console');\n            $pane.innerHTML = `\n      <div class=\"coder-console-container\">\n        <ul class=\"coder-console-output\"></ul>\n        <form class=\"coder-console-input\">\n          <input type=\"text\">\n        </form>\n      </div>\n      <button class=\"coder-button coder-console-clear\">Clear</button>\n    `;\n            coder.$container.appendChild($pane);\n            coder.$container.querySelector('.coder-nav').appendChild($nav);\n            var $container = coder.$container.querySelector('.coder-console-container');\n            var $output = coder.$container.querySelector('.coder-console-output');\n            var $input = coder.$container.querySelector('.coder-console-input input');\n            var $inputForm = coder.$container.querySelector('.coder-console-input');\n            var $clear = coder.$container.querySelector('.coder-console-clear');\n            $inputForm.addEventListener('submit', this.submit.bind(this));\n            $input.addEventListener('keydown', this.history.bind(this));\n            $clear.addEventListener('click', this.clear.bind(this));\n            if (options.autoClear === true) {\n                coder.on('change', this.autoClear.bind(this), priority - 1);\n            }\n            coder.on('change', this.change.bind(this), priority);\n            window.addEventListener('message', this.getMessage.bind(this));\n            this.$coderContainer = coder.$container;\n            this.$container = $container;\n            this.$input = $input;\n            this.$output = $output;\n            this.history = history;\n            this.historyIndex = historyIndex;\n            this.logCaptureSnippet = logCaptureSnippet;\n            this.contentCache = contentCache;\n            this.getIframe = this.getIframe.bind(this);\n        }\n        getIframe() {\n            return this.$coderContainer.querySelector('.coder-pane-result iframe');\n        }\n        getMessage(e) {\n            if (e.source !== this.getIframe().contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (err) {\n            }\n            if (data.type === 'coder-console-log') {\n                this.log(data.message);\n            }\n        }\n        autoClear(params, callback) {\n            var snippetlessContent = params.content;\n            if (params.type === 'js') {\n                snippetlessContent = snippetlessContent.replace(this.logCaptureSnippet, '');\n            }\n            if (params.forceRender === true || this.contentCache[params.type] !== snippetlessContent) {\n                this.clear();\n            }\n            this.contentCache[params.type] = snippetlessContent;\n            callback(null, params);\n        }\n        change(params, callback) {\n            if (params.type !== 'js') {\n                return callback(null, params);\n            }\n            if (params.content.indexOf(this.logCaptureSnippet) === -1) {\n                params.content = `${ this.logCaptureSnippet }${ params.content }`;\n            }\n            callback(null, params);\n        }\n        capture() {\n            if (typeof window.console === 'undefined' || typeof window.console.log === 'undefined') {\n                window.console = {\n                    log: function () {\n                    }\n                };\n            }\n            var oldConsoleLog = Function.prototype.bind.call(window.console.log, window.console);\n            window.console.log = function () {\n                [].slice.call(arguments).forEach(function (message) {\n                    window.parent.postMessage(JSON.stringify({\n                        type: 'coder-console-log',\n                        message: message\n                    }), '*');\n                });\n                oldConsoleLog.apply(oldConsoleLog, arguments);\n            };\n        }\n        log(message = '', type) {\n            var $log = document.createElement('li');\n            util.addClass($log, 'coder-console-log');\n            if (typeof type !== 'undefined') {\n                util.addClass($log, `coder-console-log-${ type }`);\n            }\n            $log.innerHTML = message;\n            this.$output.appendChild($log);\n        }\n        submit(e) {\n            var inputValue = this.$input.value.trim();\n            if (inputValue === '') {\n                return e.preventDefault();\n            }\n            this.history.push(inputValue);\n            this.historyIndex = this.history.length;\n            this.log(inputValue, 'history');\n            if (inputValue.indexOf('return') !== 0) {\n                inputValue = 'return ' + inputValue;\n            }\n            try {\n                var scriptOutput = this.getIframe().contentWindow.eval(`(function() {${ inputValue }})()`);\n                this.log(scriptOutput);\n            } catch (err) {\n                this.log(err, 'error');\n            }\n            this.$input.value = '';\n            this.$container.scrollTop = this.$container.scrollHeight;\n            e.preventDefault();\n        }\n        clear() {\n            this.$output.innerHTML = '';\n        }\n        history(e) {\n            var UP = 38;\n            var DOWN = 40;\n            var gotHistory = false;\n            var selectionStart = this.$input.selectionStart;\n            if (e.keyCode === UP && this.historyIndex !== 0 && selectionStart === 0) {\n                this.historyIndex--;\n                gotHistory = true;\n            }\n            if (e.keyCode === DOWN && this.historyIndex !== this.history.length - 1 && selectionStart === this.$input.value.length) {\n                this.historyIndex++;\n                gotHistory = true;\n            }\n            if (gotHistory) {\n                this.$input.value = this.history[this.historyIndex];\n            }\n        }\n    };\n});\ndefine('skylark-widgets-coder/plugins/play',['../util'], function (util) {\n    'use strict';\n    return class PluginPlay {\n        constructor(coder, options) {\n            options = util.extend(options, { firstRun: true });\n            var priority = 10;\n            var cache = {};\n            var code = {};\n            if (options.firstRun === false) {\n                cache = {\n                    html: {\n                        type: 'html',\n                        content: ''\n                    },\n                    css: {\n                        type: 'css',\n                        content: ''\n                    },\n                    js: {\n                        type: 'js',\n                        content: ''\n                    }\n                };\n            }\n            var $button = document.createElement('button');\n            $button.className = 'coder-button coder-button-play';\n            $button.innerHTML = 'Run';\n            coder.$container.appendChild($button);\n            $button.addEventListener('click', this.run.bind(this));\n            coder.on('change', this.change.bind(this), priority);\n            this.cache = cache;\n            this.code = code;\n            this.coder = coder;\n        }\n        change(params, callback) {\n            this.code[params.type] = util.extend(params);\n            if (typeof this.cache[params.type] !== 'undefined') {\n                callback(null, this.cache[params.type]);\n                this.cache[params.type].forceRender = null;\n            } else {\n                this.cache[params.type] = util.extend(params);\n                callback(null, params);\n            }\n        }\n        run() {\n            for (let type in this.code) {\n                this.cache[type] = util.extend(this.code[type], { forceRender: true });\n                this.coder.trigger('change', this.cache[type]);\n            }\n        }\n    };\n});\ndefine('skylark-widgets-coder/plugins/pen',[],function () {\n    'use strict';\n    return class PluginPen {\n        constructor(coder, options) {\n            let panes = {\n                html: {\n                    title: 'HTML',\n                    classChecker: 'coder-has-html'\n                },\n                css: {\n                    title: 'CSS',\n                    classChecker: 'coder-has-css'\n                },\n                js: {\n                    title: 'JavaScript',\n                    classChecker: 'coder-has-js'\n                },\n                console: {\n                    title: 'Console',\n                    classChecker: 'coder-plugin-console'\n                }\n            };\n            let $availablePanes = [];\n            for (let p in panes) {\n                if (coder.$container.classList.contains(panes[p].classChecker)) {\n                    $availablePanes.push(coder.$container.querySelector(`.coder-pane-${ p }`));\n                }\n            }\n            this.resizablePanes = [];\n            for (let i = 0; i < $availablePanes.length; i++) {\n                let type;\n                for (let j = 0; j < $availablePanes[i].classList.length; j++) {\n                    if ($availablePanes[i].classList[j].indexOf('coder-pane-') !== -1) {\n                        type = $availablePanes[i].classList[j].replace('coder-pane-', '');\n                        break;\n                    }\n                }\n                if (!type) {\n                    continue;\n                }\n                let $pane = {\n                    container: $availablePanes[i],\n                    expander: undefined\n                };\n                this.resizablePanes.push($pane);\n                let $paneTitle = document.createElement('div');\n                $paneTitle.classList.add('coder-pane-title');\n                $paneTitle.innerHTML = panes[type].title || type;\n                let $paneElement = $availablePanes[i].firstElementChild;\n                $paneElement.insertBefore($paneTitle, $paneElement.firstChild);\n                if (i > 0) {\n                    $pane.expander = document.createElement('div');\n                    $pane.expander.classList.add('coder-plugin-pen-expander');\n                    $pane.expander.addEventListener('mousedown', this.startExpand.bind(this, coder));\n                    $paneElement.insertBefore($pane.expander, $paneTitle);\n                }\n            }\n        }\n        startExpand(coder, event) {\n            let $pane = this.resizablePanes.filter(pane => {\n                return pane.expander === event.target;\n            }).shift();\n            let $previousPane = this.resizablePanes[this.resizablePanes.indexOf($pane) - 1];\n            let $relativePixel = 100 / parseInt(window.getComputedStyle($pane.container.parentNode)['width'], 10);\n            $pane.container.parentNode.style.display = 'none';\n            $pane.startX = event.clientX;\n            $pane.startWidth = parseFloat(window.getComputedStyle($pane.container)['width'], 10);\n            $previousPane.startWidth = parseFloat(window.getComputedStyle($previousPane.container)['width'], 10);\n            $pane.container.parentNode.style.display = '';\n            $pane.mousemove = this.doDrag.bind(this, $pane, $previousPane, $relativePixel);\n            $pane.mouseup = this.stopDrag.bind(this, $pane);\n            document.addEventListener('mousemove', $pane.mousemove, false);\n            document.addEventListener('mouseup', $pane.mouseup, false);\n        }\n        doDrag(pane, previousPane, relativePixel, event) {\n            let ppNewWidth = previousPane.startWidth + (event.clientX - pane.startX) * relativePixel;\n            let cpNewWidth = pane.startWidth - (event.clientX - pane.startX) * relativePixel;\n            const PANE_MIN_SIZE = 10;\n            if (ppNewWidth >= PANE_MIN_SIZE && cpNewWidth >= PANE_MIN_SIZE) {\n                pane.container.style.maxWidth = 'none';\n                previousPane.container.style.maxWidth = 'none';\n                previousPane.container.style.width = `${ ppNewWidth }%`;\n                pane.container.style.width = `${ cpNewWidth }%`;\n            }\n        }\n        stopDrag(pane, event) {\n            document.removeEventListener('mousemove', pane.mousemove, false);\n            document.removeEventListener('mouseup', pane.mouseup, false);\n        }\n    };\n});\ndefine('skylark-widgets-coder/bundle-plugins',[\n    './plugins/render',\n    './plugins/scriptless',\n    './plugins/ace',\n    './plugins/codemirror',\n    './plugins/less',\n    './plugins/coffeescript',\n    './plugins/stylus',\n    './plugins/babel',\n    './plugins/markdown',\n    './plugins/console',\n    './plugins/play',\n    './plugins/pen'\n], function (PluginRender, PluginScriptless, PluginAce, PluginCodeMirror, PluginLess, PluginCoffeeScript, PluginStylus, PluginBabel, PluginMarkdown, PluginConsole, PluginPlay, PluginPen) {\n    'use strict';\n    return function BundlePlugins(coder) {\n        coder.plugin('render', PluginRender);\n        coder.plugin('scriptless', PluginScriptless);\n        coder.plugin('ace', PluginAce);\n        coder.plugin('codemirror', PluginCodeMirror);\n        coder.plugin('less', PluginLess);\n        coder.plugin('coffeescript', PluginCoffeeScript);\n        coder.plugin('stylus', PluginStylus);\n        coder.plugin('babel', PluginBabel);\n        coder.plugin('markdown', PluginMarkdown);\n        coder.plugin('console', PluginConsole);\n        coder.plugin('play', PluginPlay);\n        coder.plugin('pen', PluginPen);\n    };\n});\ndefine('skylark-widgets-coder/Coder',[\n    'skylark-langx/skylark',\n    './util',\n    './template',\n    './plugin',\n    './pubsoup',\n    './bundle-plugins'\n], function (skylark, util, template, plugin, PubSoup, BundlePlugins) {\n    'use strict';\n    class Coder {\n        constructor($coderContainer, opts) {\n            if (!$coderContainer) {\n                throw new Error(\"Can't find Coder container.\");\n            }\n            var _private = {};\n            this._get = function (key) {\n                return _private[key];\n            };\n            this._set = function (key, value) {\n                _private[key] = value;\n                return _private[key];\n            };\n            var options = this._set('options', util.extend(opts, {\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                plugins: []\n            }));\n            options.plugins.push('render');\n            if (options.runScripts === false) {\n                options.plugins.push('scriptless');\n            }\n            this._set('cachedContent', {\n                html: null,\n                css: null,\n                js: null\n            });\n            var pubsoup = this._set('pubsoup', new PubSoup());\n            this._set('trigger', this.trigger());\n            this._set('on', function () {\n                pubsoup.subscribe.apply(pubsoup, arguments);\n            });\n            this._set('off', function () {\n                pubsoup.unsubscribe.apply(pubsoup, arguments);\n            });\n            var done = this._set('done', function () {\n                pubsoup.done.apply(pubsoup, arguments);\n            });\n            done('change', this.errors.bind(this));\n            var $container = this._set('$container', $coderContainer);\n            $container.innerHTML = template.container();\n            util.addClass($container, template.containerClass());\n            var paneActive = this._set('paneActive', options.pane);\n            util.addClass($container, template.paneActiveClass(paneActive));\n            this._set('$status', {});\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.markup(type);\n            }\n            $container.addEventListener('keyup', util.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('change', util.debounce(this.change.bind(this), options.debounce));\n            $container.addEventListener('click', this.pane.bind(this));\n            this.$container = this._get('$container');\n            this.on = this._get('on');\n            this.off = this._get('off');\n            this.done = this._get('done');\n            this.trigger = this._get('trigger');\n            this.paneActive = this._get('paneActive');\n            this._set('plugins', {});\n            plugin.init.call(this);\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this.load(type);\n            }\n            if (options.showBlank) {\n                for (let type of [\n                        'html',\n                        'css',\n                        'js'\n                    ]) {\n                    util.addClass($container, template.hasFileClass(type));\n                }\n            }\n        }\n        findFile(type) {\n            var file = {};\n            var options = this._get('options');\n            for (let fileIndex in options.files) {\n                let file = options.files[fileIndex];\n                if (file.type === type) {\n                    return file;\n                }\n            }\n            return file;\n        }\n        markup(type) {\n            var $container = this._get('$container');\n            var $parent = $container.querySelector(`.coder-pane-${ type }`);\n            var file = this.findFile(type);\n            var $editor = document.createElement('div');\n            $editor.innerHTML = template.editorContent(type, file.url);\n            $editor.className = template.editorClass(type);\n            $parent.appendChild($editor);\n            this._get('$status')[type] = $parent.querySelector('.coder-status');\n            if (typeof file.url !== 'undefined' || typeof file.content !== 'undefined') {\n                util.addClass($container, template.hasFileClass(type));\n            }\n        }\n        load(type) {\n            var file = this.findFile(type);\n            var $textarea = this._get('$container').querySelector(`.coder-pane-${ type } textarea`);\n            if (typeof file.content !== 'undefined') {\n                this.setValue($textarea, file.content);\n            } else if (typeof file.url !== 'undefined') {\n                this.status('loading', [template.statusLoading(file.url)], {\n                    type: type,\n                    file: file\n                });\n                util.fetch(file.url, (err, res) => {\n                    if (err) {\n                        this.status('error', [template.statusFetchError(err)], { type: type });\n                        return;\n                    }\n                    this.clearStatus('loading', { type: type });\n                    this.setValue($textarea, res);\n                });\n            } else {\n                this.setValue($textarea, '');\n            }\n        }\n        setValue($textarea, val) {\n            $textarea.value = val;\n            this.change({ target: $textarea });\n        }\n        change(e) {\n            var type = util.data(e.target, 'coder-type');\n            if (!type) {\n                return;\n            }\n            var cachedContent = this._get('cachedContent');\n            if (cachedContent[type] === e.target.value) {\n                return;\n            }\n            cachedContent[type] = e.target.value;\n            this.trigger('change', {\n                type: type,\n                file: util.data(e.target, 'coder-file'),\n                content: cachedContent[type]\n            });\n        }\n        errors(errs, params) {\n            this.status('error', errs, params);\n        }\n        pane(e) {\n            if (!util.data(e.target, 'coder-type')) {\n                return;\n            }\n            var $container = this._get('$container');\n            var paneActive = this._get('paneActive');\n            util.removeClass($container, template.paneActiveClass(paneActive));\n            paneActive = this._set('paneActive', util.data(e.target, 'coder-type'));\n            util.addClass($container, template.paneActiveClass(paneActive));\n            e.preventDefault();\n        }\n        status(statusType = 'error', messages = [], params = {}) {\n            if (!messages.length) {\n                return this.clearStatus(statusType, params);\n            }\n            var $status = this._get('$status');\n            util.addClass($status[params.type], template.statusClass(statusType));\n            util.addClass(this._get('$container'), template.statusActiveClass(params.type));\n            var markup = '';\n            messages.forEach(function (err) {\n                markup += template.statusMessage(err);\n            });\n            $status[params.type].innerHTML = markup;\n        }\n        clearStatus(statusType, params) {\n            var $status = this._get('$status');\n            util.removeClass($status[params.type], template.statusClass(statusType));\n            util.removeClass(this._get('$container'), template.statusActiveClass(params.type));\n            $status[params.type].innerHTML = '';\n        }\n        trigger() {\n            var options = this._get('options');\n            var pubsoup = this._get('pubsoup');\n            if (options.debounce === false) {\n                return function () {\n                    pubsoup.publish.apply(pubsoup, arguments);\n                };\n            }\n            var cooldown = {};\n            var multiple = {};\n            return function (topic, {\n                type = 'default'\n            } = {}) {\n                if (cooldown[type]) {\n                    multiple[type] = true;\n                } else {\n                    pubsoup.publish.apply(pubsoup, arguments);\n                }\n                clearTimeout(cooldown[type]);\n                cooldown[type] = setTimeout(() => {\n                    if (multiple[type]) {\n                        pubsoup.publish.apply(pubsoup, arguments);\n                    }\n                    multiple[type] = null;\n                    cooldown[type] = null;\n                }, options.debounce);\n            };\n        }\n    }\n    Coder.plugin = function () {\n        return plugin.register.apply(this, arguments);\n    };\n    BundlePlugins(Coder);\n    return skylark.attach(\"widgets.Coder\",Coder);\n});\ndefine('skylark-widgets-coder/main',[\r\n\t\"./Coder\"\r\n],function(Coder){\r\n\r\n\treturn Coder;\r\n});\ndefine('skylark-widgets-coder', ['skylark-widgets-coder/main'], function (main) { return main; });\n\n"]}