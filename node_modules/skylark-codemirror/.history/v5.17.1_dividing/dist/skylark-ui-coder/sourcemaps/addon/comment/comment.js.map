{"version":3,"sources":["addon/comment/comment.js"],"names":["define","CodeMirror","firstNonWS","str","found","search","nonWS","probablyInsideString","cm","pos","line","test","getTokenTypeAt","Pos","noOptions","commands","toggleComment","defineExtension","options","this","minLine","Infinity","ranges","listSelections","mode","i","length","from","to","uncomment","lineComment","self","getModeAt","firstLine","getLine","commentString","blockCommentStart","fullLines","blockComment","end","Math","min","ch","lastLine","pad","padding","blankLines","commentBlankLines","operation","indent","baseString","whitespace","slice","cut","replaceRange","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","didSomething","start","lineString","lines","indexOf","push","endPos","startLine","endLine","open","close","lastIndexOf","lastStart","firstEnd","almostLastStart","openEnd","foundEnd"],"mappings":"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","file":"../../../addon/comment/comment.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"`]/.test(line)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = self.getModeAt(from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = self.getModeAt(from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        self.replaceRange(endString, to);\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = self.getModeAt(from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && (i != end || i == start) && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), endLine = end == start ? startLine : self.getLine(end);\n    var open = startLine.indexOf(startString), close = endLine.lastIndexOf(endString);\n    if (close == -1 && start != end) {\n      endLine = self.getLine(--end);\n      close = endLine.lastIndexOf(endString);\n    }\n    if (open == -1 || close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(Pos(start, open + 1))) ||\n        !/comment/.test(self.getTokenTypeAt(Pos(end, close + 1))))\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n"]}