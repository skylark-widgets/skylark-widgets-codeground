{"version":3,"sources":["addon/comment/continuecomment.js"],"names":["define","CodeMirror","continueComment","cm","getOption","Pass","mode","ranges","listSelections","inserts","i","length","pos","head","token","getTokenAt","type","modeHere","innerMode","getMode","state","insert","blockCommentStart","blockCommentContinue","found","end","string","indexOf","blockCommentEnd","full","getRange","Pos","line","ch","slice","start","test","j","lineComment","continueLineCommentEnabled","getLine","match","operation","replaceRange","from","to","opt","continueLineComment","modes","extendMode","defineOption","val","prev","Init","removeKeyMap","key","map","name","addKeyMap"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GAM/B,QAASC,GAAgBC,GACvB,GAAIA,EAAGC,UAAU,gBAAiB,MAAOH,GAAWI,IAEpD,KAAK,GAD6BC,GAA9BC,EAASJ,EAAGK,iBAAwBC,KAC/BC,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IAAK,CACtC,GAAIE,GAAML,EAAOG,GAAGG,KAAMC,EAAQX,EAAGY,WAAWH,EAChD,IAAkB,WAAdE,EAAME,KAAmB,MAAOf,GAAWI,IAC/C,IAAIY,GAAWhB,EAAWiB,UAAUf,EAAGgB,UAAWL,EAAMM,OAAOd,IAC/D,IAAKA,GACA,GAAIA,GAAQW,EAAU,MAAOhB,GAAWI,SADlCC,GAAOW,CAGlB,IAAII,GAAS,IACb,IAAIf,EAAKgB,mBAAqBhB,EAAKiB,qBAAsB,CACvD,GAC0FC,GADtFC,EAAMX,EAAMY,OAAOC,QAAQrB,EAAKsB,iBAChCC,EAAO1B,EAAG2B,SAAS7B,EAAW8B,IAAInB,EAAIoB,KAAM,GAAI/B,EAAW8B,IAAInB,EAAIoB,KAAMlB,EAAMW,KACnF,IAAIA,OAAaA,GAAOX,EAAMY,OAAOf,OAASL,EAAKsB,gBAAgBjB,QAAUC,EAAIqB,IAAMR,OAEhF,IAAoD,GAAhDX,EAAMY,OAAOC,QAAQrB,EAAKgB,oBAEnC,GADAD,EAASQ,EAAKK,MAAM,EAAGpB,EAAMqB,QACxB,QAAQC,KAAKf,GAAS,CACzBA,EAAS,EACT,KAAK,GAAIgB,GAAI,EAAGA,EAAIvB,EAAMqB,QAASE,EAAGhB,GAAU,UAExCG,EAAQK,EAAKF,QAAQrB,EAAKiB,4BAC3BC,EAAQlB,EAAKiB,qBAAqBZ,OAASG,EAAMqB,OACjD,QAAQC,KAAKP,EAAKK,MAAM,EAAGV,MACpCH,EAASQ,EAAKK,MAAM,EAAGV,GAEX,OAAVH,IAAgBA,GAAUf,EAAKiB,sBAErC,GAAc,MAAVF,GAAkBf,EAAKgC,aAAeC,EAA2BpC,GAAK,CACxE,GAAI6B,GAAO7B,EAAGqC,QAAQ5B,EAAIoB,MAAOR,EAAQQ,EAAKL,QAAQrB,EAAKgC,YACvDd,QACFH,EAASW,EAAKE,MAAM,EAAGV,GACnB,KAAKY,KAAKf,GAASA,EAAS,KAC3BA,GAAUf,EAAKgC,YAAcN,EAAKE,MAAMV,EAAQlB,EAAKgC,YAAY3B,QAAQ8B,MAAM,QAAQ,IAGhG,GAAc,MAAVpB,EAAgB,MAAOpB,GAAWI,IACtCI,GAAQC,GAAK,KAAOW,EAGtBlB,EAAGuC,UAAU,WACX,IAAK,GAAIhC,GAAIH,EAAOI,OAAS,EAAGD,GAAK,EAAGA,IACtCP,EAAGwC,aAAalC,EAAQC,GAAIH,EAAOG,GAAGkC,OAAQrC,EAAOG,GAAGmC,KAAM,aAIpE,QAASN,GAA2BpC,GAClC,GAAI2C,GAAM3C,EAAGC,UAAU,mBACvB,QAAI0C,GAAqB,gBAAPA,IACTA,EAAIC,uBAAwB,EArDvC,IAAK,GAFDC,IAAS,QAAS,MAAO,cAEpBtC,EAAI,EAAGA,EAAIsC,EAAMrC,SAAUD,EAClCT,EAAWgD,WAAWD,EAAMtC,IAAKa,qBAAsB,OAwDzDtB,GAAWiD,aAAa,mBAAoB,KAAM,SAAS/C,EAAIgD,EAAKC,GAGlE,GAFIA,GAAQA,GAAQnD,EAAWoD,MAC7BlD,EAAGmD,aAAa,mBACdH,EAAK,CACP,GAAII,GAAM,OACQ,iBAAPJ,GACTI,EAAMJ,EACe,gBAAPA,IAAmBA,EAAII,MACrCA,EAAMJ,EAAII,IACZ,IAAIC,IAAOC,KAAM,kBACjBD,GAAID,GAAOrD,EACXC,EAAGuD,UAAUF","file":"../../../addon/comment/continuecomment.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  var modes = [\"clike\", \"css\", \"javascript\"];\n\n  for (var i = 0; i < modes.length; ++i)\n    CodeMirror.extendMode(modes[i], {blockCommentContinue: \" * \"});\n\n  function continueComment(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), mode, inserts = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var pos = ranges[i].head, token = cm.getTokenAt(pos);\n      if (token.type != \"comment\") return CodeMirror.Pass;\n      var modeHere = CodeMirror.innerMode(cm.getMode(), token.state).mode;\n      if (!mode) mode = modeHere;\n      else if (mode != modeHere) return CodeMirror.Pass;\n\n      var insert = null;\n      if (mode.blockCommentStart && mode.blockCommentContinue) {\n        var end = token.string.indexOf(mode.blockCommentEnd);\n        var full = cm.getRange(CodeMirror.Pos(pos.line, 0), CodeMirror.Pos(pos.line, token.end)), found;\n        if (end != -1 && end == token.string.length - mode.blockCommentEnd.length && pos.ch >= end) {\n          // Comment ended, don't continue it\n        } else if (token.string.indexOf(mode.blockCommentStart) == 0) {\n          insert = full.slice(0, token.start);\n          if (!/^\\s*$/.test(insert)) {\n            insert = \"\";\n            for (var j = 0; j < token.start; ++j) insert += \" \";\n          }\n        } else if ((found = full.indexOf(mode.blockCommentContinue)) != -1 &&\n                   found + mode.blockCommentContinue.length > token.start &&\n                   /^\\s*$/.test(full.slice(0, found))) {\n          insert = full.slice(0, found);\n        }\n        if (insert != null) insert += mode.blockCommentContinue;\n      }\n      if (insert == null && mode.lineComment && continueLineCommentEnabled(cm)) {\n        var line = cm.getLine(pos.line), found = line.indexOf(mode.lineComment);\n        if (found > -1) {\n          insert = line.slice(0, found);\n          if (/\\S/.test(insert)) insert = null;\n          else insert += mode.lineComment + line.slice(found + mode.lineComment.length).match(/^\\s*/)[0];\n        }\n      }\n      if (insert == null) return CodeMirror.Pass;\n      inserts[i] = \"\\n\" + insert;\n    }\n\n    cm.operation(function() {\n      for (var i = ranges.length - 1; i >= 0; i--)\n        cm.replaceRange(inserts[i], ranges[i].from(), ranges[i].to(), \"+insert\");\n    });\n  }\n\n  function continueLineCommentEnabled(cm) {\n    var opt = cm.getOption(\"continueComments\");\n    if (opt && typeof opt == \"object\")\n      return opt.continueLineComment !== false;\n    return true;\n  }\n\n  CodeMirror.defineOption(\"continueComments\", null, function(cm, val, prev) {\n    if (prev && prev != CodeMirror.Init)\n      cm.removeKeyMap(\"continueComment\");\n    if (val) {\n      var key = \"Enter\";\n      if (typeof val == \"string\")\n        key = val;\n      else if (typeof val == \"object\" && val.key)\n        key = val.key;\n      var map = {name: \"continueComment\"};\n      map[key] = continueComment;\n      cm.addKeyMap(map);\n    }\n  });\n  \n});\n"]}