{"version":3,"sources":["addon/dialog/dialog.js"],"names":["define","CodeMirror","dialogDiv","cm","template","bottom","dialog","wrap","getWrapperElement","appendChild","document","createElement","className","innerHTML","closeNotification","newVal","state","currentNotificationClose","defineExtension","callback","options","close","inp","value","closed","parentNode","removeChild","me","focus","onClose","this","button","getElementsByTagName","selectValueOnOpen","select","onInput","on","e","onKeyUp","onKeyDown","keyCode","closeOnEnter","blur","e_stop","closeOnBlur","callbacks","buttons","blurring","i","length","b","e_preventDefault","setTimeout","clearTimeout","doneTimer","duration"],"mappings":"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","file":"../../../addon/dialog/dialog.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(inp, \"blur\", close);\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n"]}