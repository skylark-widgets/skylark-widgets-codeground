{"version":3,"sources":["addon/display/placeholder.js"],"names":["define","CodeMirror","clearPlaceholder","cm","state","placeholder","parentNode","removeChild","setPlaceholder","elt","document","createElement","style","cssText","className","placeHolder","getOption","createTextNode","appendChild","display","lineSpace","insertBefore","firstChild","onBlur","isEmpty","onChange","wrapper","getWrapperElement","empty","replace","lineCount","getLine","defineOption","val","old","prev","Init","on","off","hasFocus"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GAoB/B,QAASC,GAAiBC,GACpBA,EAAGC,MAAMC,cACXF,EAAGC,MAAMC,YAAYC,WAAWC,YAAYJ,EAAGC,MAAMC,aACrDF,EAAGC,MAAMC,YAAc,MAG3B,QAASG,GAAeL,GACtBD,EAAiBC,EACjB,IAAIM,GAAMN,EAAGC,MAAMC,YAAcK,SAASC,cAAc,MACxDF,GAAIG,MAAMC,QAAU,+BACpBJ,EAAIK,UAAY,wBAChB,IAAIC,GAAcZ,EAAGa,UAAU,cACL,iBAAfD,KAAyBA,EAAcL,SAASO,eAAeF,IAC1EN,EAAIS,YAAYH,GAChBZ,EAAGgB,QAAQC,UAAUC,aAAaZ,EAAKN,EAAGgB,QAAQC,UAAUE,YAG9D,QAASC,GAAOpB,GACVqB,EAAQrB,IAAKK,EAAeL,GAElC,QAASsB,GAAStB,GAChB,GAAIuB,GAAUvB,EAAGwB,oBAAqBC,EAAQJ,EAAQrB,EACtDuB,GAAQZ,UAAYY,EAAQZ,UAAUe,QAAQ,oBAAqB,KAAOD,EAAQ,oBAAsB,IAEpGA,EAAOpB,EAAeL,GACrBD,EAAiBC,GAGxB,QAASqB,GAAQrB,GACf,MAA2B,KAAnBA,EAAG2B,aAAyC,KAAlB3B,EAAG4B,QAAQ,GAhD/C9B,EAAW+B,aAAa,cAAe,GAAI,SAAS7B,EAAI8B,EAAKC,GAC3D,GAAIC,GAAOD,GAAOA,GAAOjC,EAAWmC,IACpC,IAAIH,IAAQE,EACVhC,EAAGkC,GAAG,OAAQd,GACdpB,EAAGkC,GAAG,SAAUZ,GAChBtB,EAAGkC,GAAG,UAAWZ,GACjBA,EAAStB,OACJ,KAAK8B,GAAOE,EAAM,CACvBhC,EAAGmC,IAAI,OAAQf,GACfpB,EAAGmC,IAAI,SAAUb,GACjBtB,EAAGmC,IAAI,UAAWb,GAClBvB,EAAiBC,EACjB,IAAIuB,GAAUvB,EAAGwB,mBACjBD,GAAQZ,UAAYY,EAAQZ,UAAUe,QAAQ,oBAAqB,IAGjEI,IAAQ9B,EAAGoC,YAAYhB,EAAOpB","file":"../../../addon/display/placeholder.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  CodeMirror.defineOption(\"placeholder\", \"\", function(cm, val, old) {\n    var prev = old && old != CodeMirror.Init;\n    if (val && !prev) {\n      cm.on(\"blur\", onBlur);\n      cm.on(\"change\", onChange);\n      cm.on(\"swapDoc\", onChange);\n      onChange(cm);\n    } else if (!val && prev) {\n      cm.off(\"blur\", onBlur);\n      cm.off(\"change\", onChange);\n      cm.off(\"swapDoc\", onChange);\n      clearPlaceholder(cm);\n      var wrapper = cm.getWrapperElement();\n      wrapper.className = wrapper.className.replace(\" CodeMirror-empty\", \"\");\n    }\n\n    if (val && !cm.hasFocus()) onBlur(cm);\n  });\n\n  function clearPlaceholder(cm) {\n    if (cm.state.placeholder) {\n      cm.state.placeholder.parentNode.removeChild(cm.state.placeholder);\n      cm.state.placeholder = null;\n    }\n  }\n  function setPlaceholder(cm) {\n    clearPlaceholder(cm);\n    var elt = cm.state.placeholder = document.createElement(\"pre\");\n    elt.style.cssText = \"height: 0; overflow: visible\";\n    elt.className = \"CodeMirror-placeholder\";\n    var placeHolder = cm.getOption(\"placeholder\")\n    if (typeof placeHolder == \"string\") placeHolder = document.createTextNode(placeHolder)\n    elt.appendChild(placeHolder)\n    cm.display.lineSpace.insertBefore(elt, cm.display.lineSpace.firstChild);\n  }\n\n  function onBlur(cm) {\n    if (isEmpty(cm)) setPlaceholder(cm);\n  }\n  function onChange(cm) {\n    var wrapper = cm.getWrapperElement(), empty = isEmpty(cm);\n    wrapper.className = wrapper.className.replace(\" CodeMirror-empty\", \"\") + (empty ? \" CodeMirror-empty\" : \"\");\n\n    if (empty) setPlaceholder(cm);\n    else clearPlaceholder(cm);\n  }\n\n  function isEmpty(cm) {\n    return (cm.lineCount() === 1) && (cm.getLine(0) === \"\");\n  }\n});\n"]}