{"version":3,"sources":["addon/edit/closebrackets.js"],"names":["define","CodeMirror","getOption","conf","name","defaults","handler","ch","cm","handleChar","getConfig","deflt","state","closeBrackets","mode","getModeAt","getCursor","handleBackspace","Pass","pairs","ranges","listSelections","i","length","empty","around","charsAround","head","indexOf","cur","replaceRange","Pos","line","handleEnter","explode","operation","replaceSelection","execCommand","indentLine","contractSelection","sel","inverted","cmpPos","anchor","pos","type","triples","identical","charAt","opening","curType","range","next","getRange","isWordChar","enteringString","getLine","isClosingBracket","test","left","right","sels","getSelections","replaceSelections","slice","setSelections","triggerElectric","lastIndexOf","str","token","getTokenAt","stream","StringStream","start","type1","getMode","defineOption","val","old","Init","removeKeyMap","keyMap","addKeyMap","bind","Backspace","Enter"],"mappings":"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","file":"../../../addon/edit/closebrackets.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\ndefine([\"../../Coder\"], function(CodeMirror) {\n  var defaults = {\n    pairs: \"()[]{}''\\\"\\\"\",\n    triples: \"\",\n    explode: \"[]{}\"\n  };\n\n  var Pos = CodeMirror.Pos;\n\n  CodeMirror.defineOption(\"autoCloseBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.removeKeyMap(keyMap);\n      cm.state.closeBrackets = null;\n    }\n    if (val) {\n      cm.state.closeBrackets = val;\n      cm.addKeyMap(keyMap);\n    }\n  });\n\n  function getOption(conf, name) {\n    if (name == \"pairs\" && typeof conf == \"string\") return conf;\n    if (typeof conf == \"object\" && conf[name] != null) return conf[name];\n    return defaults[name];\n  }\n\n  var bind = defaults.pairs + \"`\";\n  var keyMap = {Backspace: handleBackspace, Enter: handleEnter};\n  for (var i = 0; i < bind.length; i++)\n    keyMap[\"'\" + bind.charAt(i) + \"'\"] = handler(bind.charAt(i));\n\n  function handler(ch) {\n    return function(cm) { return handleChar(cm, ch); };\n  }\n\n  function getConfig(cm) {\n    var deflt = cm.state.closeBrackets;\n    if (!deflt) return null;\n    var mode = cm.getModeAt(cm.getCursor());\n    return mode.closeBrackets || deflt;\n  }\n\n  function handleBackspace(cm) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var cur = ranges[i].head;\n      cm.replaceRange(\"\", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1), \"+delete\");\n    }\n  }\n\n  function handleEnter(cm) {\n    var conf = getConfig(cm);\n    var explode = conf && getOption(conf, \"explode\");\n    if (!explode || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || explode.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    cm.operation(function() {\n      cm.replaceSelection(\"\\n\\n\", null);\n      cm.execCommand(\"goCharLeft\");\n      ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var line = ranges[i].head.line;\n        cm.indentLine(line, null, true);\n        cm.indentLine(line + 1, null, true);\n      }\n    });\n  }\n\n  function contractSelection(sel) {\n    var inverted = CodeMirror.cmpPos(sel.anchor, sel.head) > 0;\n    return {anchor: new Pos(sel.anchor.line, sel.anchor.ch + (inverted ? -1 : 1)),\n            head: new Pos(sel.head.line, sel.head.ch + (inverted ? 1 : -1))};\n  }\n\n  function handleChar(cm, ch) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var pos = pairs.indexOf(ch);\n    if (pos == -1) return CodeMirror.Pass;\n    var triples = getOption(conf, \"triples\");\n\n    var identical = pairs.charAt(pos + 1) == ch;\n    var ranges = cm.listSelections();\n    var opening = pos % 2 == 0;\n\n    var type;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], cur = range.head, curType;\n      var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\n      if (opening && !range.empty()) {\n        curType = \"surround\";\n      } else if ((identical || !opening) && next == ch) {\n        if (triples.indexOf(ch) >= 0 && cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == ch + ch + ch)\n          curType = \"skipThree\";\n        else\n          curType = \"skip\";\n      } else if (identical && cur.ch > 1 && triples.indexOf(ch) >= 0 &&\n                 cm.getRange(Pos(cur.line, cur.ch - 2), cur) == ch + ch &&\n                 (cur.ch <= 2 || cm.getRange(Pos(cur.line, cur.ch - 3), Pos(cur.line, cur.ch - 2)) != ch)) {\n        curType = \"addFour\";\n      } else if (identical) {\n        if (!CodeMirror.isWordChar(next) && enteringString(cm, cur, ch)) curType = \"both\";\n        else return CodeMirror.Pass;\n      } else if (opening && (cm.getLine(cur.line).length == cur.ch ||\n                             isClosingBracket(next, pairs) ||\n                             /\\s/.test(next))) {\n        curType = \"both\";\n      } else {\n        return CodeMirror.Pass;\n      }\n      if (!type) type = curType;\n      else if (type != curType) return CodeMirror.Pass;\n    }\n\n    var left = pos % 2 ? pairs.charAt(pos - 1) : ch;\n    var right = pos % 2 ? ch : pairs.charAt(pos + 1);\n    cm.operation(function() {\n      if (type == \"skip\") {\n        cm.execCommand(\"goCharRight\");\n      } else if (type == \"skipThree\") {\n        for (var i = 0; i < 3; i++)\n          cm.execCommand(\"goCharRight\");\n      } else if (type == \"surround\") {\n        var sels = cm.getSelections();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = left + sels[i] + right;\n        cm.replaceSelections(sels, \"around\");\n        sels = cm.listSelections().slice();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = contractSelection(sels[i]);\n        cm.setSelections(sels);\n      } else if (type == \"both\") {\n        cm.replaceSelection(left + right, null);\n        cm.triggerElectric(left + right);\n        cm.execCommand(\"goCharLeft\");\n      } else if (type == \"addFour\") {\n        cm.replaceSelection(left + left + left + left, \"before\");\n        cm.execCommand(\"goCharRight\");\n      }\n    });\n  }\n\n  function isClosingBracket(ch, pairs) {\n    var pos = pairs.lastIndexOf(ch);\n    return pos > -1 && pos % 2 == 1;\n  }\n\n  function charsAround(cm, pos) {\n    var str = cm.getRange(Pos(pos.line, pos.ch - 1),\n                          Pos(pos.line, pos.ch + 1));\n    return str.length == 2 ? str : null;\n  }\n\n  // Project the token type that will exists after the given char is\n  // typed, and use it to determine whether it would cause the start\n  // of a string token.\n  function enteringString(cm, pos, ch) {\n    var line = cm.getLine(pos.line);\n    var token = cm.getTokenAt(pos);\n    if (/\\bstring2?\\b/.test(token.type)) return false;\n    var stream = new CodeMirror.StringStream(line.slice(0, pos.ch) + ch + line.slice(pos.ch), 4);\n    stream.pos = stream.start = token.start;\n    for (;;) {\n      var type1 = cm.getMode().token(stream, token.state);\n      if (stream.pos >= pos.ch + 1) return /\\bstring2?\\b/.test(type1);\n      stream.start = stream.pos;\n    }\n  }\n});\n"]}