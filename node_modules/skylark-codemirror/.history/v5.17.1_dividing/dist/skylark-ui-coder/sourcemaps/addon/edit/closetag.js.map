{"version":3,"sources":["addon/edit/closetag.js"],"names":["define","CodeMirror","autoCloseGT","cm","getOption","Pass","ranges","listSelections","replacements","i","length","empty","pos","head","tok","getTokenAt","inner","innerMode","getMode","state","mode","name","tagName","opt","html","configuration","dontCloseTags","htmlDontClose","indentTags","htmlIndent","end","ch","slice","lowerTagName","toLowerCase","type","test","string","charAt","indexOf","closingTagExists","indent","text","newPos","Pos","line","info","replaceRange","anchor","sel","setSelections","indentLine","autoCloseCurrent","typingSlash","start","replacement","context","getLine","replaceSelections","autoCloseSlash","collection","elt","e","newTag","scanForClosingTag","Math","min","lastLine","nextClose","tag","cx","onCx","prev","to","next","defineOption","val","old","Init","removeKeyMap","map","whenClosing","whenOpening","addKeyMap","commands","closeTag"],"mappings":";;;;;;;AA2BAA,QAAQ,eAAgB,SAASC,GAmB/B,QAASC,GAAYC,GACnB,GAAIA,EAAGC,UAAU,gBAAiB,MAAOH,GAAWI,IAEpD,KAAK,GADDC,GAASH,EAAGI,iBAAkBC,KACzBC,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IAAK,CACtC,IAAKH,EAAOG,GAAGE,QAAS,MAAOV,GAAWI,IAC1C,IAAIO,GAAMN,EAAOG,GAAGI,KAAMC,EAAMX,EAAGY,WAAWH,GAC1CI,EAAQf,EAAWgB,UAAUd,EAAGe,UAAWJ,EAAIK,OAAQA,EAAQH,EAAMG,KACzE,IAAuB,OAAnBH,EAAMI,KAAKC,OAAkBF,EAAMG,QAAS,MAAOrB,GAAWI,IAElE,IAAIkB,GAAMpB,EAAGC,UAAU,iBAAkBoB,EAAmC,QAA5BR,EAAMI,KAAKK,cACvDC,EAA+B,gBAAPH,IAAmBA,EAAIG,eAAmBF,GAAQG,EAC1EC,EAA4B,gBAAPL,IAAmBA,EAAIK,YAAgBJ,GAAQK,EAEpEP,EAAUH,EAAMG,OAChBR,GAAIgB,IAAMlB,EAAImB,KAAIT,EAAUA,EAAQU,MAAM,EAAGV,EAAQZ,OAASI,EAAIgB,IAAMlB,EAAImB,IAChF,IAAIE,GAAeX,EAAQY,aAE3B,KAAKZ,GACW,UAAZR,EAAIqB,OAAqBrB,EAAIgB,KAAOlB,EAAImB,KAAO,SAASK,KAAKtB,EAAIuB,OAAOC,OAAOxB,EAAIuB,OAAO3B,OAAS,KAA4B,GAArBI,EAAIuB,OAAO3B,SACzG,OAAZI,EAAIqB,MAA+B,YAAdhB,EAAMgB,MAC3BrB,EAAIuB,OAAOE,QAAQ,MAASzB,EAAIuB,OAAO3B,OAAS,GAChDgB,GAAiBa,EAAQb,EAAeO,OACxCO,EAAiBrC,EAAImB,EAASV,EAAKO,GAAO,GAC5C,MAAOlB,GAAWI,IAEpB,IAAIoC,GAASb,GAAcW,EAAQX,EAAYK,KAC/CzB,GAAaC,IAAMgC,OAAQA,EACRC,KAAM,KAAOD,EAAS,OAAS,IAAM,KAAOnB,EAAU,IACtDqB,OAAQF,EAASxC,EAAW2C,IAAIhC,EAAIiC,KAAO,EAAG,GAAK5C,EAAW2C,IAAIhC,EAAIiC,KAAMjC,EAAImB,GAAK,IAG1G,IAAK,GAAItB,GAAIH,EAAOI,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAC3C,GAAIqC,GAAOtC,EAAaC,EACxBN,GAAG4C,aAAaD,EAAKJ,KAAMpC,EAAOG,GAAGI,KAAMP,EAAOG,GAAGuC,OAAQ,UAC7D,IAAIC,GAAM9C,EAAGI,iBAAiByB,MAAM,EACpCiB,GAAIxC,IAAMI,KAAMiC,EAAKH,OAAQK,OAAQF,EAAKH,QAC1CxC,EAAG+C,cAAcD,GACbH,EAAKL,SACPtC,EAAGgD,WAAWL,EAAKH,OAAOE,KAAM,MAAM,GACtC1C,EAAGgD,WAAWL,EAAKH,OAAOE,KAAO,EAAG,MAAM,KAKhD,QAASO,GAAiBjD,EAAIkD,GAG5B,IAAK,GAFD/C,GAASH,EAAGI,iBAAkBC,KAC9BK,EAAOwC,EAAc,IAAM,KACtB5C,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IAAK,CACtC,IAAKH,EAAOG,GAAGE,QAAS,MAAOV,GAAWI,IAC1C,IAAIO,GAAMN,EAAOG,GAAGI,KAAMC,EAAMX,EAAGY,WAAWH,GAC1CI,EAAQf,EAAWgB,UAAUd,EAAGe,UAAWJ,EAAIK,OAAQA,EAAQH,EAAMG,KACzE,IAAIkC,IAA4B,UAAZvC,EAAIqB,MAA4C,KAAxBrB,EAAIuB,OAAOC,OAAO,IAC1CxB,EAAIwC,OAAS1C,EAAImB,GAAK,GACxC,MAAO9B,GAAWI,IAKpB,IAAIkD,EACJ,IAAuB,OAAnBvC,EAAMI,KAAKC,KACb,GAAyB,aAArBlB,EAAGe,UAAUG,MAA0C,cAAnBL,EAAMI,KAAKC,KACjDkC,EAAc1C,EAAO,aAClB,CAAA,GAAyB,aAArBV,EAAGe,UAAUG,MAA0C,OAAnBL,EAAMI,KAAKC,KAGtD,MAAOpB,GAAWI,IAFlBkD,GAAc1C,EAAO,YAGlB,CACL,IAAKM,EAAMqC,UAAYrC,EAAMqC,QAAQlC,SACjCkB,EAAiBrC,EAAIgB,EAAMqC,QAAQlC,QAASV,EAAKO,GACnD,MAAOlB,GAAWI,IACpBkD,GAAc1C,EAAOM,EAAMqC,QAAQlC,QAEO,KAAxCnB,EAAGsD,QAAQ7C,EAAIiC,MAAMP,OAAOxB,EAAIgB,OAAayB,GAAe,KAChE/C,EAAaC,GAAK8C,EAEpBpD,EAAGuD,kBAAkBlD,GACrBF,EAASH,EAAGI,gBACZ,KAAK,GAAIE,GAAI,EAAGA,EAAIH,EAAOI,OAAQD,KAC7BA,GAAKH,EAAOI,OAAS,GAAKJ,EAAOG,GAAGI,KAAKgC,KAAOvC,EAAOG,EAAI,GAAGI,KAAKgC,OACrE1C,EAAGgD,WAAW7C,EAAOG,GAAGI,KAAKgC,MAGnC,QAASc,GAAexD,GACtB,MAAIA,GAAGC,UAAU,gBAAwBH,EAAWI,KAC7C+C,EAAiBjD,GAAI,GAK9B,QAASoC,GAAQqB,EAAYC,GAC3B,GAAID,EAAWrB,QAAS,MAAOqB,GAAWrB,QAAQsB,EAClD,KAAK,GAAIpD,GAAI,EAAGqD,EAAIF,EAAWlD,OAAQD,EAAIqD,IAAKrD,EAC9C,GAAImD,EAAWnD,IAAMoD,EAAK,MAAOpD,EACnC,UAKF,QAAS+B,GAAiBrC,EAAImB,EAASV,EAAKO,EAAO4C,GACjD,IAAK9D,EAAW+D,kBAAmB,OAAO,CAC1C,IAAIlC,GAAMmC,KAAKC,IAAI/D,EAAGgE,WAAa,EAAGvD,EAAIiC,KAAO,KAC7CuB,EAAYnE,EAAW+D,kBAAkB7D,EAAIS,EAAK,KAAMkB,EAC5D,KAAKsC,GAAaA,EAAUC,KAAO/C,EAAS,OAAO,CAKnD,KAAK,GAJDgD,GAAKnD,EAAMqC,QAINe,EAAOR,EAAS,EAAI,EAAGO,GAAMA,EAAGhD,SAAWA,EAASgD,EAAKA,EAAGE,OAAQD,CAC7E3D,GAAMwD,EAAUK,EAChB,KAAK,GAAIhE,GAAI,EAAGA,EAAI8D,EAAM9D,IAAK,CAC7B,GAAIiE,GAAOzE,EAAW+D,kBAAkB7D,EAAIS,EAAK,KAAMkB,EACvD,KAAK4C,GAAQA,EAAKL,KAAO/C,EAAS,OAAO,CACzCV,GAAM8D,EAAKD,GAEb,OAAO,EAnITxE,EAAW0E,aAAa,iBAAiB,EAAO,SAASxE,EAAIyE,EAAKC,GAGhE,GAFIA,GAAO5E,EAAW6E,MAAQD,GAC5B1E,EAAG4E,aAAa,iBACbH,EAAL,CACA,GAAII,IAAO3D,KAAM,kBACC,gBAAPuD,IAAmBA,EAAIK,eAChCD,EAAI,OAAS,SAAS7E,GAAM,MAAOwD,GAAexD,MAClC,gBAAPyE,IAAmBA,EAAIM,eAChCF,EAAI,OAAS,SAAS7E,GAAM,MAAOD,GAAYC,KACjDA,EAAGgF,UAAUH,KAGf,IAAIrD,IAAiB,OAAQ,OAAQ,KAAM,MAAO,UAAW,QAAS,KAAM,MAAO,QAAS,SAAU,OAAQ,OAAQ,QACjG,SAAU,QAAS,OACpCE,GAAc,SAAU,aAAc,OAAQ,SAAU,MAAO,KAAM,WAAY,OAAQ,WAAY,KAAM,KAAM,KAAM,KACzG,KAAM,KAAM,OAAQ,OAAQ,SAAU,QAAS,SAAU,SAAU,KAAM,IAAK,SAAU,QAAS,KAyFnH5B,GAAWmF,SAASC,SAAW,SAASlF,GAAM,MAAOiD,GAAiBjD","file":"../../../addon/edit/closetag.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n *\n * See demos/closetag.html for a usage example.\n */\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \n  CodeMirror.defineOption(\"autoCloseTags\", false, function(cm, val, old) {\n    if (old != CodeMirror.Init && old)\n      cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {name: \"autoCloseTags\"};\n    if (typeof val != \"object\" || val.whenClosing)\n      map[\"'/'\"] = function(cm) { return autoCloseSlash(cm); };\n    if (typeof val != \"object\" || val.whenOpening)\n      map[\"'>'\"] = function(cm) { return autoCloseGT(cm); };\n    cm.addKeyMap(map);\n  });\n\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n                       \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\",\n                    \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (inner.mode.name != \"xml\" || !state.tagName) return CodeMirror.Pass;\n\n      var opt = cm.getOption(\"autoCloseTags\"), html = inner.mode.configuration == \"html\";\n      var dontCloseTags = (typeof opt == \"object\" && opt.dontCloseTags) || (html && htmlDontClose);\n      var indentTags = (typeof opt == \"object\" && opt.indentTags) || (html && htmlIndent);\n\n      var tagName = state.tagName;\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName ||\n          tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n          tok.type == \"tag\" && state.type == \"closeTag\" ||\n          tok.string.indexOf(\"/\") == (tok.string.length - 1) || // match something like <someTagName />\n          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n          closingTagExists(cm, tagName, pos, state, true))\n        return CodeMirror.Pass;\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {indent: indent,\n                         text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n    }\n\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {head: info.newPos, anchor: info.newPos};\n      cm.setSelections(sel);\n      if (info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(), replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" ||\n                          tok.start != pos.ch - 1))\n        return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement;\n      if (inner.mode.name != \"xml\") {\n        if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"javascript\")\n          replacement = head + \"script\";\n        else if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"css\")\n          replacement = head + \"style\";\n        else\n          return CodeMirror.Pass;\n      } else {\n        if (!state.context || !state.context.tagName ||\n            closingTagExists(cm, state.context.tagName, pos, state))\n          return CodeMirror.Pass;\n        replacement = head + state.context.tagName;\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n        cm.indentLine(ranges[i].head.line);\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, tagName, pos, state, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    var cx = state.context;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    for (var onCx = newTag ? 1 : 0; cx && cx.tagName == tagName; cx = cx.prev) ++onCx;\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});\n"]}