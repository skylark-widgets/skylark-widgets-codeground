{"version":3,"sources":["addon/edit/continuelist.js"],"names":["define","CodeMirror","listRE","emptyListRE","unorderedListRE","commands","newlineAndIndentContinueMarkdownList","cm","getOption","Pass","ranges","listSelections","replacements","i","length","pos","head","eolState","getStateAfter","line","inList","list","inQuote","quote","getLine","match","exec","empty","execCommand","test","replaceRange","ch","indent","after","bullet","indexOf","parseInt","replaceSelections"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GAC/B,YAEA,IAAIC,GAAS,0CACTC,EAAc,uCACdC,EAAkB,SAEtBH,GAAWI,SAASC,qCAAuC,SAASC,GAClE,GAAIA,EAAGC,UAAU,gBAAiB,MAAOP,GAAWQ,IAEpD,KAAK,GADDC,GAASH,EAAGI,iBAAkBC,KACzBC,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IAAK,CACtC,GAAIE,GAAML,EAAOG,GAAGG,KAChBC,EAAWV,EAAGW,cAAcH,EAAII,MAChCC,EAASH,EAASI,QAAS,EAC3BC,EAA6B,IAAnBL,EAASM,MAEnBJ,EAAOZ,EAAGiB,QAAQT,EAAII,MAAOM,EAAQvB,EAAOwB,KAAKP,EACrD,KAAKT,EAAOG,GAAGc,UAAaP,IAAWE,IAAaG,EAElD,WADAlB,GAAGqB,YAAY,mBAGjB,IAAIzB,EAAY0B,KAAKV,GACnBZ,EAAGuB,aAAa,IACdX,KAAMJ,EAAII,KAAMY,GAAI,IAEpBZ,KAAMJ,EAAII,KAAMY,GAAIhB,EAAIgB,GAAK,IAE/BnB,EAAaC,GAAK,SACb,CACL,GAAImB,GAASP,EAAM,GAAIQ,EAAQR,EAAM,GACjCS,EAAS9B,EAAgByB,KAAKJ,EAAM,KAAOA,EAAM,GAAGU,QAAQ,MAAQ,EACpEV,EAAM,GACLW,SAASX,EAAM,GAAI,IAAM,EAAKA,EAAM,EAEzCb,GAAaC,GAAK,KAAOmB,EAASE,EAASD,GAI/C1B,EAAG8B,kBAAkBzB","file":"../../../addon/edit/continuelist.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n\n  var listRE = /^(\\s*)(>[> ]*|[*+-]\\s|(\\d+)([.)]))(\\s*)/,\n      emptyListRE = /^(\\s*)(>[> ]*|[*+-]|(\\d+)[.)])(\\s*)$/,\n      unorderedListRE = /[*+-]\\s/;\n\n  CodeMirror.commands.newlineAndIndentContinueMarkdownList = function(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var pos = ranges[i].head;\n      var eolState = cm.getStateAfter(pos.line);\n      var inList = eolState.list !== false;\n      var inQuote = eolState.quote !== 0;\n\n      var line = cm.getLine(pos.line), match = listRE.exec(line);\n      if (!ranges[i].empty() || (!inList && !inQuote) || !match) {\n        cm.execCommand(\"newlineAndIndent\");\n        return;\n      }\n      if (emptyListRE.test(line)) {\n        cm.replaceRange(\"\", {\n          line: pos.line, ch: 0\n        }, {\n          line: pos.line, ch: pos.ch + 1\n        });\n        replacements[i] = \"\\n\";\n      } else {\n        var indent = match[1], after = match[5];\n        var bullet = unorderedListRE.test(match[2]) || match[2].indexOf(\">\") >= 0\n          ? match[2]\n          : (parseInt(match[3], 10) + 1) + match[4];\n\n        replacements[i] = \"\\n\" + indent + bullet + after;\n      }\n    }\n\n    cm.replaceSelections(replacements);\n  };\n});\n"]}