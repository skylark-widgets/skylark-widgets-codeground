{"version":3,"sources":["addon/edit/matchbrackets.js"],"names":["define","CodeMirror","findMatchingBracket","cm","where","strict","config","line","getLineHandle","pos","ch","match","matching","text","charAt","dir","style","getTokenTypeAt","Pos","found","scanForBracket","from","to","forward","maxScanLen","maxScanLineLength","maxScanLines","stack","re","bracketRegex","lineEnd","Math","min","lastLine","max","firstLine","lineNo","getLine","length","end","test","undefined","push","pop","matchBrackets","autoclear","maxHighlightLen","state","maxHighlightLineLength","marks","ranges","listSelections","i","empty","head","markText","className","ie_lt8","focused","focus","clear","operation","setTimeout","doMatchBrackets","currentlyHighlighted","navigator","userAgent","document","documentMode","(",")","[","]","{","}","defineOption","val","old","Init","off","on","defineExtension","this"],"mappings":"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","file":"../../../addon/edit/matchbrackets.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, strict, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init)\n      cm.off(\"cursorActivity\", doMatchBrackets);\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, strict, config){\n    return findMatchingBracket(this, pos, strict, config);\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n"]}