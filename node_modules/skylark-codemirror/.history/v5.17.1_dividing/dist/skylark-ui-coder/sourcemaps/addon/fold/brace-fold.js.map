{"version":3,"sources":["addon/fold/brace-fold.js"],"names":["define","CodeMirror","registerHelper","cm","start","findOpening","openCh","at","ch","pass","found","lineText","lastIndexOf","tokenType","getTokenTypeAt","Pos","line","test","length","getLine","startToken","endToken","startCh","end","endCh","count","lastLine","outer","i","text","pos","nextOpen","indexOf","nextClose","Math","min","from","to","hasImport","firstLine","getTokenAt","string","type","e","semi","prev","startLine","has","next","clipPos","hasInclude","slice"],"mappings":"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","file":"../../../addon/fold/brace-fold.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n"]}