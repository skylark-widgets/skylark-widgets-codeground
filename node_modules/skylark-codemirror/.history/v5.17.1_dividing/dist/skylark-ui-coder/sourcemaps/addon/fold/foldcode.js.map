{"version":3,"sources":["addon/fold/foldcode.js"],"names":["define","CodeMirror","doFold","cm","pos","options","force","getRange","allowFolded","range","finder","to","line","from","minSize","marks","findMarksAt","i","length","__isFold","cleared","clear","call","getOption","Pos","firstLine","myWidget","makeWidget","on","e","myRange","e_preventDefault","markText","replacedWith","clearOnEnter","signal","widget","text","document","createTextNode","createElement","appendChild","className","name","undefined","editorOptions","foldOptions","defaultOptions","newFoldFunction","rangeFinder","defineExtension","this","commands","toggleFold","foldCode","getCursor","fold","unfold","foldAll","operation","lastLine","unfoldAll","registerHelper","funcs","Array","prototype","slice","arguments","start","found","helpers","getHelpers","cur","auto","minFoldSize","scanUp","defineOption"],"mappings":"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","file":"../../../addon/fold/foldcode.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n"]}