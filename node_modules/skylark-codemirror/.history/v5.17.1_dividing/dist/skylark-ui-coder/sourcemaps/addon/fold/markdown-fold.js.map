{"version":3,"sources":["addon/fold/markdown-fold.js"],"names":["define","CodeMirror","registerHelper","cm","start","isHeader","lineNo","tokentype","getTokenTypeAt","Pos","test","headerLevel","line","nextLine","match","length","maxDepth","firstLine","getLine","level","lastLineNo","lastLine","end","nextNextLine","from","to"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GACjC,YAEAA,GAAWC,eAAe,OAAQ,WAAY,SAASC,EAAIC,GAGzD,QAASC,GAASC,GAChB,GAAIC,GAAYJ,EAAGK,eAAeP,EAAWQ,IAAIH,EAAQ,GACzD,OAAOC,IAAa,aAAaG,KAAKH,GAGxC,QAASI,GAAYL,EAAQM,EAAMC,GACjC,GAAIC,GAAQF,GAAQA,EAAKE,MAAM,MAC/B,OAAIA,IAAST,EAASC,GAAgBQ,EAAM,GAAGC,QAC/CD,EAAQD,GAAYA,EAASC,MAAM,eAC/BA,GAAST,EAASC,EAAS,GAA0B,KAAfO,EAAS,GAAY,EAAI,EAC5DG,GAZT,GAAIA,GAAW,IAeXC,EAAYd,EAAGe,QAAQd,EAAMQ,MAAOC,EAAWV,EAAGe,QAAQd,EAAMQ,KAAO,GACvEO,EAAQR,EAAYP,EAAMQ,KAAMK,EAAWJ,EAC/C,IAAIM,IAAUH,EAAd,CAIA,IAFA,GAAII,GAAajB,EAAGkB,WAChBC,EAAMlB,EAAMQ,KAAMW,EAAepB,EAAGe,QAAQI,EAAM,GAC/CA,EAAMF,KACPT,EAAYW,EAAM,EAAGT,EAAUU,IAAiBJ,MAClDG,EACFT,EAAWU,EACXA,EAAepB,EAAGe,QAAQI,EAAM,EAGlC,QACEE,KAAMvB,EAAWQ,IAAIL,EAAMQ,KAAMK,EAAUF,QAC3CU,GAAIxB,EAAWQ,IAAIa,EAAKnB,EAAGe,QAAQI,GAAKP","file":"../../../addon/fold/markdown-fold.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"markdown\", function(cm, start) {\n  var maxDepth = 100;\n\n  function isHeader(lineNo) {\n    var tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n    return tokentype && /\\bheader\\b/.test(tokentype);\n  }\n\n  function headerLevel(lineNo, line, nextLine) {\n    var match = line && line.match(/^#+/);\n    if (match && isHeader(lineNo)) return match[0].length;\n    match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n    if (match && isHeader(lineNo + 1)) return nextLine[0] == \"=\" ? 1 : 2;\n    return maxDepth;\n  }\n\n  var firstLine = cm.getLine(start.line), nextLine = cm.getLine(start.line + 1);\n  var level = headerLevel(start.line, firstLine, nextLine);\n  if (level === maxDepth) return undefined;\n\n  var lastLineNo = cm.lastLine();\n  var end = start.line, nextNextLine = cm.getLine(end + 2);\n  while (end < lastLineNo) {\n    if (headerLevel(end + 1, nextLine, nextNextLine) <= level) break;\n    ++end;\n    nextLine = nextNextLine;\n    nextNextLine = cm.getLine(end + 2);\n  }\n\n  return {\n    from: CodeMirror.Pos(start.line, firstLine.length),\n    to: CodeMirror.Pos(end, cm.getLine(end).length)\n  };\n});\n\n});\n"]}