{"version":3,"sources":["addon/hint/sql-hint.js"],"names":["define","CodeMirror","isArray","val","Object","prototype","toString","call","getKeywords","editor","mode","doc","modeOption","resolveMode","keywords","getText","item","text","wrapTable","name","value","columns","parseTables","input","result","i","length","toUpperCase","getTable","tables","shallowClone","object","key","hasOwnProperty","match","string","word","len","sub","substr","addMatches","search","wordlist","formatter","push","displayText","cleanName","charAt","replace","insertBackticks","nameParts","split","escaped","join","nameCompletion","cur","token","useBacktick","start","cont","unshift","getTokenAt","Pos","line","w","defaultTable","pop","table","alias","aliasTable","oldTable","findTableByAlias","tableInsert","eachWord","lineText","f","excepted","words","fullQuery","getValue","aliasUpperCase","previousWord","separator","validRange","end","lastLine","getLineHandle","indexOfSeparator","indexOf","CONS","QUERY_DIV","posFromIndex","prevItem","current","getCursor","cmpPos","query","getRange","wordUpperCase","ALIAS_KEYWORD","registerHelper","options","defaultTableName","disableKeywords","ch","slice","list","from","to"],"mappings":"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","file":"../../../addon/hint/sql-hint.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\", \"../../mode/sql/sql\"], function(CodeMirror) {\n  \"use strict\";\n\n  var tables;\n  var defaultTable;\n  var keywords;\n  var CONS = {\n    QUERY_DIV: \";\",\n    ALIAS_KEYWORD: \"AS\"\n  };\n  var Pos = CodeMirror.Pos, cmpPos = CodeMirror.cmpPos;\n\n  function isArray(val) { return Object.prototype.toString.call(val) == \"[object Array]\" }\n\n  function getKeywords(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).keywords;\n  }\n\n  function getText(item) {\n    return typeof item == \"string\" ? item : item.text;\n  }\n\n  function wrapTable(name, value) {\n    if (isArray(value)) value = {columns: value}\n    if (!value.text) value.text = name\n    return value\n  }\n\n  function parseTables(input) {\n    var result = {}\n    if (isArray(input)) {\n      for (var i = input.length - 1; i >= 0; i--) {\n        var item = input[i]\n        result[getText(item).toUpperCase()] = wrapTable(getText(item), item)\n      }\n    } else if (input) {\n      for (var name in input)\n        result[name.toUpperCase()] = wrapTable(name, input[name])\n    }\n    return result\n  }\n\n  function getTable(name) {\n    return tables[name.toUpperCase()]\n  }\n\n  function shallowClone(object) {\n    var result = {};\n    for (var key in object) if (object.hasOwnProperty(key))\n      result[key] = object[key];\n    return result;\n  }\n\n  function match(string, word) {\n    var len = string.length;\n    var sub = getText(word).substr(0, len);\n    return string.toUpperCase() === sub.toUpperCase();\n  }\n\n  function addMatches(result, search, wordlist, formatter) {\n    if (isArray(wordlist)) {\n      for (var i = 0; i < wordlist.length; i++)\n        if (match(search, wordlist[i])) result.push(formatter(wordlist[i]))\n    } else {\n      for (var word in wordlist) if (wordlist.hasOwnProperty(word)) {\n        var val = wordlist[word]\n        if (!val || val === true)\n          val = word\n        else\n          val = val.displayText ? {text: val.text, displayText: val.displayText} : val.text\n        if (match(search, val)) result.push(formatter(val))\n      }\n    }\n  }\n\n  function cleanName(name) {\n    // Get rid name from backticks(`) and preceding dot(.)\n    if (name.charAt(0) == \".\") {\n      name = name.substr(1);\n    }\n    return name.replace(/`/g, \"\");\n  }\n\n  function insertBackticks(name) {\n    var nameParts = getText(name).split(\".\");\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = \"`\" + nameParts[i] + \"`\";\n    var escaped = nameParts.join(\".\");\n    if (typeof name == \"string\") return escaped;\n    name = shallowClone(name);\n    name.text = escaped;\n    return name;\n  }\n\n  function nameCompletion(cur, token, result, editor) {\n    // Try to complete table, column names and return start position of completion\n    var useBacktick = false;\n    var nameParts = [];\n    var start = token.start;\n    var cont = true;\n    while (cont) {\n      cont = (token.string.charAt(0) == \".\");\n      useBacktick = useBacktick || (token.string.charAt(0) == \"`\");\n\n      start = token.start;\n      nameParts.unshift(cleanName(token.string));\n\n      token = editor.getTokenAt(Pos(cur.line, token.start));\n      if (token.string == \".\") {\n        cont = true;\n        token = editor.getTokenAt(Pos(cur.line, token.start));\n      }\n    }\n\n    // Try to complete table names\n    var string = nameParts.join(\".\");\n    addMatches(result, string, tables, function(w) {\n      return useBacktick ? insertBackticks(w) : w;\n    });\n\n    // Try to complete columns from defaultTable\n    addMatches(result, string, defaultTable, function(w) {\n      return useBacktick ? insertBackticks(w) : w;\n    });\n\n    // Try to complete columns\n    string = nameParts.pop();\n    var table = nameParts.join(\".\");\n\n    var alias = false;\n    var aliasTable = table;\n    // Check if table is available. If not, find table by Alias\n    if (!getTable(table)) {\n      var oldTable = table;\n      table = findTableByAlias(table, editor);\n      if (table !== oldTable) alias = true;\n    }\n\n    var columns = getTable(table);\n    if (columns && columns.columns)\n      columns = columns.columns;\n\n    if (columns) {\n      addMatches(result, string, columns, function(w) {\n        var tableInsert = table;\n        if (alias == true) tableInsert = aliasTable;\n        if (typeof w == \"string\") {\n          w = tableInsert + \".\" + w;\n        } else {\n          w = shallowClone(w);\n          w.text = tableInsert + \".\" + w.text;\n        }\n        return useBacktick ? insertBackticks(w) : w;\n      });\n    }\n\n    return start;\n  }\n\n  function eachWord(lineText, f) {\n    if (!lineText) return;\n    var excepted = /[,;]/g;\n    var words = lineText.split(\" \");\n    for (var i = 0; i < words.length; i++) {\n      f(words[i]?words[i].replace(excepted, '') : '');\n    }\n  }\n\n  function findTableByAlias(alias, editor) {\n    var doc = editor.doc;\n    var fullQuery = doc.getValue();\n    var aliasUpperCase = alias.toUpperCase();\n    var previousWord = \"\";\n    var table = \"\";\n    var separator = [];\n    var validRange = {\n      start: Pos(0, 0),\n      end: Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).length)\n    };\n\n    //add separator\n    var indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV);\n    while(indexOfSeparator != -1) {\n      separator.push(doc.posFromIndex(indexOfSeparator));\n      indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV, indexOfSeparator+1);\n    }\n    separator.unshift(Pos(0, 0));\n    separator.push(Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).text.length));\n\n    //find valid range\n    var prevItem = null;\n    var current = editor.getCursor()\n    for (var i = 0; i < separator.length; i++) {\n      if ((prevItem == null || cmpPos(current, prevItem) > 0) && cmpPos(current, separator[i]) <= 0) {\n        validRange = {start: prevItem, end: separator[i]};\n        break;\n      }\n      prevItem = separator[i];\n    }\n\n    var query = doc.getRange(validRange.start, validRange.end, false);\n\n    for (var i = 0; i < query.length; i++) {\n      var lineText = query[i];\n      eachWord(lineText, function(word) {\n        var wordUpperCase = word.toUpperCase();\n        if (wordUpperCase === aliasUpperCase && getTable(previousWord))\n          table = previousWord;\n        if (wordUpperCase !== CONS.ALIAS_KEYWORD)\n          previousWord = word;\n      });\n      if (table) break;\n    }\n    return table;\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"sql\", function(editor, options) {\n    tables = parseTables(options && options.tables)\n    var defaultTableName = options && options.defaultTable;\n    var disableKeywords = options && options.disableKeywords;\n    defaultTable = defaultTableName && getTable(defaultTableName);\n    keywords = getKeywords(editor);\n\n    if (defaultTableName && !defaultTable)\n      defaultTable = findTableByAlias(defaultTableName, editor);\n\n    defaultTable = defaultTable || [];\n\n    if (defaultTable.columns)\n      defaultTable = defaultTable.columns;\n\n    var cur = editor.getCursor();\n    var result = [];\n    var token = editor.getTokenAt(cur), start, end, search;\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    if (token.string.match(/^[.`\\w@]\\w*$/)) {\n      search = token.string;\n      start = token.start;\n      end = token.end;\n    } else {\n      start = end = cur.ch;\n      search = \"\";\n    }\n    if (search.charAt(0) == \".\" || search.charAt(0) == \"`\") {\n      start = nameCompletion(cur, token, result, editor);\n    } else {\n      addMatches(result, search, tables, function(w) {return w;});\n      addMatches(result, search, defaultTable, function(w) {return w;});\n      if (!disableKeywords)\n        addMatches(result, search, keywords, function(w) {return w.toUpperCase();});\n    }\n\n    return {list: result, from: Pos(cur.line, start), to: Pos(cur.line, end)};\n  });\n});\n"]}