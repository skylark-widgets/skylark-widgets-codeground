{"version":3,"sources":["addon/hint/xml-hint.js"],"names":["define","CodeMirror","getHints","cm","options","tags","schemaInfo","quote","quoteChar","cur","getCursor","token","getTokenAt","end","ch","string","slice","start","inner","innerMode","getMode","state","mode","name","prefix","tagStart","result","replaceToken","tag","test","type","tagName","before","getLine","line","Math","max","tagType","cx","context","curTag","childList","children","i","length","lastIndexOf","push","hasOwnProperty","attrs","globalAttrs","set","nm","atValues","getRange","Pos","atName","match","call","this","n","charAt","len","substr","attr","list","from","to","registerHelper"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GAC/B,YAIA,SAASC,GAASC,EAAIC,GACpB,GAAIC,GAAOD,GAAWA,EAAQE,WAC1BC,EAASH,GAAWA,EAAQI,WAAc,GAC9C,IAAKH,EAAL,CACA,GAAII,GAAMN,EAAGO,YAAaC,EAAQR,EAAGS,WAAWH,EAC5CE,GAAME,IAAMJ,EAAIK,KAClBH,EAAME,IAAMJ,EAAIK,GAChBH,EAAMI,OAASJ,EAAMI,OAAOC,MAAM,EAAGP,EAAIK,GAAKH,EAAMM,OAEtD,IAAIC,GAAQjB,EAAWkB,UAAUhB,EAAGiB,UAAWT,EAAMU,MACrD,IAAuB,OAAnBH,EAAMI,KAAKC,KAAf,CACA,GAAuCC,GAEQC,EAF3CC,KAAaC,GAAe,EAC5BC,EAAM,UAAUC,KAAKlB,EAAMmB,QAAU,KAAKD,KAAKlB,EAAMI,QACrDgB,EAAUH,GAAO,MAAMC,KAAKlB,EAAMI,OAEtC,IAAIgB,EAAS,CACX,GAAIC,GAAS7B,EAAG8B,QAAQxB,EAAIyB,MAAMlB,MAAMmB,KAAKC,IAAI,EAAGzB,EAAMM,MAAQ,GAAIN,EAAMM,OACxEoB,EAAU,OAAOR,KAAKG,GAAU,QAAU,KAAKH,KAAKG,GAAU,OAAS,IACvEK,KAASZ,EAAWd,EAAMM,OAAoB,SAAXoB,EAAqB,EAAI,QACvDT,IAAuB,KAAhBjB,EAAMI,OACtBsB,EAAU,OACDT,GAAuB,MAAhBjB,EAAMI,SACtBsB,EAAU,QAGZ,KAAKT,IAAQV,EAAMG,MAAMU,SAAWM,EAAS,CACvCN,IACFP,EAASb,EAAMI,QACjBY,EAAeU,CACf,IAAIC,GAAKpB,EAAMG,MAAMkB,QAASC,EAASF,GAAMjC,EAAKiC,EAAGP,SACjDU,EAAYH,EAAKE,GAAUA,EAAOE,SAAWrC,EAAK,OACtD,IAAIoC,GAAwB,SAAXJ,EACf,IAAK,GAAIM,GAAI,EAAGA,EAAIF,EAAUG,SAAUD,EAAQnB,GAAiD,GAAvCiB,EAAUE,GAAGE,YAAYrB,EAAQ,IACzFE,EAAOoB,KAAK,IAAML,EAAUE,QACzB,IAAe,SAAXN,EACT,IAAK,GAAId,KAAQlB,IACXA,EAAK0C,eAAexB,IAAiB,QAARA,GAA0B,UAARA,GAAsBC,GAAyC,GAA/BD,EAAKsB,YAAYrB,EAAQ,IAC1GE,EAAOoB,KAAK,IAAMvB,EAEpBe,MAAQd,GAAqB,SAAXa,GAA2D,GAArCC,EAAGP,QAAQc,YAAYrB,EAAQ,KACzEE,EAAOoB,KAAK,KAAOR,EAAGP,QAAU,SAC7B,CAEL,GAAIS,GAASnC,EAAKa,EAAMG,MAAMU,SAAUiB,EAAQR,GAAUA,EAAOQ,MAC7DC,EAAc5C,EAAK,SACvB,KAAK2C,IAAUC,EAAa,MAC5B,IAAKD,GAEE,GAAIC,EAAa,CACtB,GAAIC,KACJ,KAAK,GAAIC,KAAMF,GAAiBA,EAAYF,eAAeI,KAAKD,EAAIC,GAAMF,EAAYE,GACtF,KAAK,GAAIA,KAAMH,GAAWA,EAAMD,eAAeI,KAAKD,EAAIC,GAAMH,EAAMG,GACpEH,GAAQE,OALRF,GAAQC,CAOV,IAAkB,UAAdtC,EAAMmB,MAAoC,KAAhBnB,EAAMI,OAAe,CACjD,GAEsDqC,GAFlDpB,EAAS7B,EAAGkD,SAASC,EAAI7C,EAAIyB,KAAMC,KAAKC,IAAI,EAAG3B,EAAIK,GAAK,KACnCwC,EAAI7C,EAAIyB,KAAoB,UAAdvB,EAAMmB,KAAmBnB,EAAMM,MAAQN,EAAME,MAChF0C,EAASvB,EAAOwB,MAAM,0BAC1B,KAAKD,IAAWP,EAAMD,eAAeQ,EAAO,OAASH,EAAWJ,EAAMO,EAAO,KAAM,MAEnF,IADuB,kBAAZH,KAAwBA,EAAWA,EAASK,KAAKC,KAAMvD,IAChD,UAAdQ,EAAMmB,KAAkB,CAC1BN,EAASb,EAAMI,MACf,IAAI4C,GAAI,CACJ,QAAO9B,KAAKlB,EAAMI,OAAO6C,OAAO,MAClCrD,EAAQI,EAAMI,OAAO6C,OAAO,GAC5BpC,EAASb,EAAMI,OAAOC,MAAM,GAC5B2C,IAEF,IAAIE,GAAMlD,EAAMI,OAAO6B,MACnB,QAAOf,KAAKlB,EAAMI,OAAO6C,OAAOC,EAAM,MACxCtD,EAAQI,EAAMI,OAAO6C,OAAOC,EAAM,GAClCrC,EAASb,EAAMI,OAAO+C,OAAOH,EAAGE,EAAM,IAExClC,GAAe,EAEjB,IAAK,GAAIgB,GAAI,EAAGA,EAAIS,EAASR,SAAUD,EAAQnB,GAAgD,GAAtC4B,EAAST,GAAGE,YAAYrB,EAAQ,IACvFE,EAAOoB,KAAKvC,EAAQ6C,EAAST,GAAKpC,OAC/B,CACa,aAAdI,EAAMmB,OACRN,EAASb,EAAMI,OACfY,GAAe,EAEjB,KAAK,GAAIoC,KAAQf,IAAWA,EAAMD,eAAegB,IAAWvC,GAAyC,GAA/BuC,EAAKlB,YAAYrB,EAAQ,IAC7FE,EAAOoB,KAAKiB,IAGlB,OACEC,KAAMtC,EACNuC,KAAMtC,EAAe2B,EAAI7C,EAAIyB,KAAkB,MAAZT,EAAmBd,EAAMM,MAAQQ,GAAYhB,EAChFyD,GAAIvC,EAAe2B,EAAI7C,EAAIyB,KAAMvB,EAAME,KAAOJ,KA3FlD,GAAI6C,GAAMrD,EAAWqD,GA+FrBrD,GAAWkE,eAAe,OAAQ,MAAOjE","file":"../../../addon/hint/xml-hint.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n\n  function getHints(cm, options) {\n    var tags = options && options.schemaInfo;\n    var quote = (options && options.quoteChar) || '\"';\n    if (!tags) return;\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n    var inner = CodeMirror.innerMode(cm.getMode(), token.state);\n    if (inner.mode.name != \"xml\") return;\n    var result = [], replaceToken = false, prefix;\n    var tag = /\\btag\\b/.test(token.type) && !/>$/.test(token.string);\n    var tagName = tag && /^\\w/.test(token.string), tagStart;\n\n    if (tagName) {\n      var before = cm.getLine(cur.line).slice(Math.max(0, token.start - 2), token.start);\n      var tagType = /<\\/$/.test(before) ? \"close\" : /<$/.test(before) ? \"open\" : null;\n      if (tagType) tagStart = token.start - (tagType == \"close\" ? 2 : 1);\n    } else if (tag && token.string == \"<\") {\n      tagType = \"open\";\n    } else if (tag && token.string == \"</\") {\n      tagType = \"close\";\n    }\n\n    if (!tag && !inner.state.tagName || tagType) {\n      if (tagName)\n        prefix = token.string;\n      replaceToken = tagType;\n      var cx = inner.state.context, curTag = cx && tags[cx.tagName];\n      var childList = cx ? curTag && curTag.children : tags[\"!top\"];\n      if (childList && tagType != \"close\") {\n        for (var i = 0; i < childList.length; ++i) if (!prefix || childList[i].lastIndexOf(prefix, 0) == 0)\n          result.push(\"<\" + childList[i]);\n      } else if (tagType != \"close\") {\n        for (var name in tags)\n          if (tags.hasOwnProperty(name) && name != \"!top\" && name != \"!attrs\" && (!prefix || name.lastIndexOf(prefix, 0) == 0))\n            result.push(\"<\" + name);\n      }\n      if (cx && (!prefix || tagType == \"close\" && cx.tagName.lastIndexOf(prefix, 0) == 0))\n        result.push(\"</\" + cx.tagName + \">\");\n    } else {\n      // Attribute completion\n      var curTag = tags[inner.state.tagName], attrs = curTag && curTag.attrs;\n      var globalAttrs = tags[\"!attrs\"];\n      if (!attrs && !globalAttrs) return;\n      if (!attrs) {\n        attrs = globalAttrs;\n      } else if (globalAttrs) { // Combine tag-local and global attributes\n        var set = {};\n        for (var nm in globalAttrs) if (globalAttrs.hasOwnProperty(nm)) set[nm] = globalAttrs[nm];\n        for (var nm in attrs) if (attrs.hasOwnProperty(nm)) set[nm] = attrs[nm];\n        attrs = set;\n      }\n      if (token.type == \"string\" || token.string == \"=\") { // A value\n        var before = cm.getRange(Pos(cur.line, Math.max(0, cur.ch - 60)),\n                                 Pos(cur.line, token.type == \"string\" ? token.start : token.end));\n        var atName = before.match(/([^\\s\\u00a0=<>\\\"\\']+)=$/), atValues;\n        if (!atName || !attrs.hasOwnProperty(atName[1]) || !(atValues = attrs[atName[1]])) return;\n        if (typeof atValues == 'function') atValues = atValues.call(this, cm); // Functions can be used to supply values for autocomplete widget\n        if (token.type == \"string\") {\n          prefix = token.string;\n          var n = 0;\n          if (/['\"]/.test(token.string.charAt(0))) {\n            quote = token.string.charAt(0);\n            prefix = token.string.slice(1);\n            n++;\n          }\n          var len = token.string.length;\n          if (/['\"]/.test(token.string.charAt(len - 1))) {\n            quote = token.string.charAt(len - 1);\n            prefix = token.string.substr(n, len - 2);\n          }\n          replaceToken = true;\n        }\n        for (var i = 0; i < atValues.length; ++i) if (!prefix || atValues[i].lastIndexOf(prefix, 0) == 0)\n          result.push(quote + atValues[i] + quote);\n      } else { // An attribute name\n        if (token.type == \"attribute\") {\n          prefix = token.string;\n          replaceToken = true;\n        }\n        for (var attr in attrs) if (attrs.hasOwnProperty(attr) && (!prefix || attr.lastIndexOf(prefix, 0) == 0))\n          result.push(attr);\n      }\n    }\n    return {\n      list: result,\n      from: replaceToken ? Pos(cur.line, tagStart == null ? token.start : tagStart) : cur,\n      to: replaceToken ? Pos(cur.line, token.end) : cur\n    };\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"xml\", getHints);\n});\n"]}