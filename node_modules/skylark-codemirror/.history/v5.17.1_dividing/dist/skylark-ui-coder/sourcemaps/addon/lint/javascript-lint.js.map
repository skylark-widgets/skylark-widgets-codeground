{"version":3,"sources":["addon/lint/javascript-lint.js"],"names":["define","CodeMirror","validator","text","options","window","JSHINT","globals","errors","data","result","parseErrors","cleanup","error","fixWith","warnings","isBogus","fixes","severity","force","description","fix","find","replace","found","i","length","indexOf","bogus","output","linetabpositions","index","evidence","tabpositions","line","Array","prototype","forEach","call","item","push","pos","character","tabposition","start","end","substring","search","reason","message","from","Pos","to","registerHelper"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GAC/B,YAYA,SAASC,GAAUC,EAAMC,GACvB,IAAKC,OAAOC,OAAQ,QACpBA,QAAOH,EAAMC,EAASA,EAAQG,QAC9B,IAAIC,GAASF,OAAOG,OAAOD,OAAQE,IAEnC,OADIF,IAAQG,EAAYH,EAAQE,GACzBA,EAKT,QAASE,GAAQC,GAKf,MAHAC,GAAQD,EAAOE,EAAU,WAAW,GACpCD,EAAQD,EAAOL,EAAQ,SAEhBQ,EAAQH,GAAS,KAAOA,EAGjC,QAASC,GAAQD,EAAOI,EAAOC,EAAUC,GACvC,GAAIC,GAAaC,EAAKC,EAAMC,EAASC,CAErCJ,GAAcP,EAAMO,WAEpB,KAAM,GAAIK,GAAI,EAAGA,EAAIR,EAAMS,OAAQD,IACjCJ,EAAMJ,EAAMQ,GACZH,EAAuB,gBAARD,GAAmBA,EAAMA,EAAI,GAC5CE,EAA0B,gBAARF,GAAmB,KAAOA,EAAI,GAChDG,EAAQJ,EAAYO,QAAQL,SAExBH,GAASK,KACXX,EAAMK,SAAWA,GAEfM,GAASD,IACXV,EAAMO,YAAcG,GAK1B,QAASP,GAAQH,GAEf,IAAM,GADFO,GAAcP,EAAMO,YACdK,EAAI,EAAGA,EAAIG,EAAMF,OAAQD,IACjC,GAAIL,EAAYO,QAAQC,EAAMH,SAC5B,OAAO,CAGX,QAAO,EAGT,QAASd,GAAYH,EAAQqB,GAC3B,IAAM,GAAIJ,GAAI,EAAGA,EAAIjB,EAAOkB,OAAQD,IAAK,CACvC,GAAIZ,GAAQL,EAAOiB,EACnB,IAAIZ,EAAO,CACT,GAAIiB,GAAkBC,CAWtB,IATAD,KASIjB,EAAMmB,SAAU,CAElB,GAAIC,GAAeH,EAAiBjB,EAAMqB,KAC1C,KAAKD,EAAc,CACjB,GAAID,GAAWnB,EAAMmB,QACrBC,MAGAE,MAAMC,UAAUC,QAAQC,KAAKN,EAAU,SAASO,EACAR,GACjC,OAATQ,GAGFN,EAAaO,KAAKT,EAAQ,KAG9BD,EAAiBjB,EAAMqB,MAAQD,EAEjC,GAAIA,EAAaP,OAAS,EAAG,CAC3B,GAAIe,GAAM5B,EAAM6B,SAChBT,GAAaI,QAAQ,SAASM,GACxBF,EAAME,IAAaF,GAAO,KAEhC5B,EAAM6B,UAAYD,GAItB,GAAIG,GAAQ/B,EAAM6B,UAAY,EAAGG,EAAMD,EAAQ,CAC3C/B,GAAMmB,WACRD,EAAQlB,EAAMmB,SAASc,UAAUF,GAAOG,OAAO,OAC3ChB,OACFc,GAAOd,IAKXlB,EAAMO,YAAcP,EAAMmC,OAC1BnC,EAAM+B,MAAQ/B,EAAM6B,UACpB7B,EAAMgC,IAAMA,EACZhC,EAAQD,EAAQC,GAEZA,GACFgB,EAAOW,MAAMS,QAASpC,EAAMO,YACfF,SAAUL,EAAMK,SAChBgC,KAAMjD,EAAWkD,IAAItC,EAAMqB,KAAO,EAAGU,GACrCQ,GAAInD,EAAWkD,IAAItC,EAAMqB,KAAO,EAAGW,OArHxD,GAAIjB,IAAU,qBAEVb,IAAe,eACA,kDAEfP,GAAW,oBAAqB,cAAe,wBACpC,aAAc,mBAAoB,kBAClC,kBAAmB,+BAUlCP,GAAWoD,eAAe,OAAQ,aAAcnD","file":"../../../addon/lint/javascript-lint.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n  // declare global: JSHINT\n\n  var bogus = [ \"Dangerous comment\" ];\n\n  var warnings = [ [ \"Expected '{'\",\n                     \"Statement body should be inside '{ }' braces.\" ] ];\n\n  var errors = [ \"Missing semicolon\", \"Extra comma\", \"Missing property name\",\n                 \"Unmatched \", \" and instead saw\", \" is not defined\",\n                 \"Unclosed string\", \"Stopping, unable to continue\" ];\n\n  function validator(text, options) {\n    if (!window.JSHINT) return [];\n    JSHINT(text, options, options.globals);\n    var errors = JSHINT.data().errors, result = [];\n    if (errors) parseErrors(errors, result);\n    return result;\n  }\n\n  CodeMirror.registerHelper(\"lint\", \"javascript\", validator);\n\n  function cleanup(error) {\n    // All problems are warnings by default\n    fixWith(error, warnings, \"warning\", true);\n    fixWith(error, errors, \"error\");\n\n    return isBogus(error) ? null : error;\n  }\n\n  function fixWith(error, fixes, severity, force) {\n    var description, fix, find, replace, found;\n\n    description = error.description;\n\n    for ( var i = 0; i < fixes.length; i++) {\n      fix = fixes[i];\n      find = (typeof fix === \"string\" ? fix : fix[0]);\n      replace = (typeof fix === \"string\" ? null : fix[1]);\n      found = description.indexOf(find) !== -1;\n\n      if (force || found) {\n        error.severity = severity;\n      }\n      if (found && replace) {\n        error.description = replace;\n      }\n    }\n  }\n\n  function isBogus(error) {\n    var description = error.description;\n    for ( var i = 0; i < bogus.length; i++) {\n      if (description.indexOf(bogus[i]) !== -1) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function parseErrors(errors, output) {\n    for ( var i = 0; i < errors.length; i++) {\n      var error = errors[i];\n      if (error) {\n        var linetabpositions, index;\n\n        linetabpositions = [];\n\n        // This next block is to fix a problem in jshint. Jshint\n        // replaces\n        // all tabs with spaces then performs some checks. The error\n        // positions (character/space) are then reported incorrectly,\n        // not taking the replacement step into account. Here we look\n        // at the evidence line and try to adjust the character position\n        // to the correct value.\n        if (error.evidence) {\n          // Tab positions are computed once per line and cached\n          var tabpositions = linetabpositions[error.line];\n          if (!tabpositions) {\n            var evidence = error.evidence;\n            tabpositions = [];\n            // ugggh phantomjs does not like this\n            // forEachChar(evidence, function(item, index) {\n            Array.prototype.forEach.call(evidence, function(item,\n                                                            index) {\n              if (item === '\\t') {\n                // First col is 1 (not 0) to match error\n                // positions\n                tabpositions.push(index + 1);\n              }\n            });\n            linetabpositions[error.line] = tabpositions;\n          }\n          if (tabpositions.length > 0) {\n            var pos = error.character;\n            tabpositions.forEach(function(tabposition) {\n              if (pos > tabposition) pos -= 1;\n            });\n            error.character = pos;\n          }\n        }\n\n        var start = error.character - 1, end = start + 1;\n        if (error.evidence) {\n          index = error.evidence.substring(start).search(/.\\b/);\n          if (index > -1) {\n            end += index;\n          }\n        }\n\n        // Convert to format expected by validation service\n        error.description = error.reason;// + \"(jshint)\";\n        error.start = error.character;\n        error.end = end;\n        error = cleanup(error);\n\n        if (error)\n          output.push({message: error.description,\n                       severity: error.severity,\n                       from: CodeMirror.Pos(error.line - 1, start),\n                       to: CodeMirror.Pos(error.line - 1, end)});\n      }\n    }\n  }\n});\n"]}