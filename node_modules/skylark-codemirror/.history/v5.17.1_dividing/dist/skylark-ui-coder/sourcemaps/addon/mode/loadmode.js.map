{"version":3,"sources":["addon/mode/loadmode.js"],"names":["define","CodeMirror","env","splitCallback","cont","n","countDown","ensureDeps","mode","deps","modes","dependencies","missing","i","length","hasOwnProperty","push","split","requireMode","modeURL","loading","name","file","replace","script","document","createElement","src","others","getElementsByTagName","list","on","parentNode","insertBefore","require","requirejs","autoLoadMode","instance","setOption","getOption"],"mappings":";;;;;;;AAEAA,QAAQ,eAAgB,SAASC,EAAYC,GAI3C,QAASC,GAAcC,EAAMC,GAC3B,GAAIC,GAAYD,CAChB,OAAO,YAAgC,KAAbC,GAAgBF,KAE5C,QAASG,GAAWC,EAAMJ,GACxB,GAAIK,GAAOR,EAAWS,MAAMF,GAAMG,YAClC,KAAKF,EAAM,MAAOL,IAElB,KAAK,GADDQ,MACKC,EAAI,EAAGA,EAAIJ,EAAKK,SAAUD,EAC5BZ,EAAWS,MAAMK,eAAeN,EAAKI,KACxCD,EAAQI,KAAKP,EAAKI,GAEtB,KAAKD,EAAQE,OAAQ,MAAOV,IAE5B,KAAK,GADDa,GAAQd,EAAcC,EAAMQ,EAAQE,QAC/BD,EAAI,EAAGA,EAAID,EAAQE,SAAUD,EACpCZ,EAAWiB,YAAYN,EAAQC,GAAII,GAlBlChB,EAAWkB,UAASlB,EAAWkB,QAAU,mBAE9C,IAAIC,KAmBJnB,GAAWiB,YAAc,SAASV,EAAMJ,GAEtC,GADmB,gBAARI,KAAkBA,EAAOA,EAAKa,MACrCpB,EAAWS,MAAMK,eAAeP,GAAO,MAAOD,GAAWC,EAAMJ,EACnE,IAAIgB,EAAQL,eAAeP,GAAO,MAAOY,GAAQZ,GAAMQ,KAAKZ,EAE5D,IAAIkB,GAAOrB,EAAWkB,QAAQI,QAAQ,MAAOf,EAC7C,IAAW,SAAPN,EAAgB,CAClB,GAAIsB,GAASC,SAASC,cAAc,SACpCF,GAAOG,IAAML,CACb,IAAIM,GAASH,SAASI,qBAAqB,UAAU,GACjDC,EAAOV,EAAQZ,IAASJ,EAC5BH,GAAW8B,GAAGP,EAAQ,OAAQ,WAC5BjB,EAAWC,EAAM,WACf,IAAK,GAAIK,GAAI,EAAGA,EAAIiB,EAAKhB,SAAUD,EAAGiB,EAAKjB,SAG/Ce,EAAOI,WAAWC,aAAaT,EAAQI,OACvB,OAAP1B,GACTgC,QAAQZ,GACRlB,KACgB,OAAPF,GACTiC,WAAWb,GAAOlB,IAItBH,EAAWmC,aAAe,SAASC,EAAU7B,GACtCP,EAAWS,MAAMK,eAAeP,IACnCP,EAAWiB,YAAYV,EAAM,WAC3B6B,EAASC,UAAU,OAAQD,EAASE,UAAU","file":"../../../addon/mode/loadmode.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\ndefine([\"../../Coder\"], function(CodeMirror, env) {\n  if (!CodeMirror.modeURL) CodeMirror.modeURL = \"../mode/%N/%N.js\";\n\n  var loading = {};\n  function splitCallback(cont, n) {\n    var countDown = n;\n    return function() { if (--countDown == 0) cont(); };\n  }\n  function ensureDeps(mode, cont) {\n    var deps = CodeMirror.modes[mode].dependencies;\n    if (!deps) return cont();\n    var missing = [];\n    for (var i = 0; i < deps.length; ++i) {\n      if (!CodeMirror.modes.hasOwnProperty(deps[i]))\n        missing.push(deps[i]);\n    }\n    if (!missing.length) return cont();\n    var split = splitCallback(cont, missing.length);\n    for (var i = 0; i < missing.length; ++i)\n      CodeMirror.requireMode(missing[i], split);\n  }\n\n  CodeMirror.requireMode = function(mode, cont) {\n    if (typeof mode != \"string\") mode = mode.name;\n    if (CodeMirror.modes.hasOwnProperty(mode)) return ensureDeps(mode, cont);\n    if (loading.hasOwnProperty(mode)) return loading[mode].push(cont);\n\n    var file = CodeMirror.modeURL.replace(/%N/g, mode);\n    if (env == \"plain\") {\n      var script = document.createElement(\"script\");\n      script.src = file;\n      var others = document.getElementsByTagName(\"script\")[0];\n      var list = loading[mode] = [cont];\n      CodeMirror.on(script, \"load\", function() {\n        ensureDeps(mode, function() {\n          for (var i = 0; i < list.length; ++i) list[i]();\n        });\n      });\n      others.parentNode.insertBefore(script, others);\n    } else if (env == \"cjs\") {\n      require(file);\n      cont();\n    } else if (env == \"amd\") {\n      requirejs([file], cont);\n    }\n  };\n\n  CodeMirror.autoLoadMode = function(instance, mode) {\n    if (!CodeMirror.modes.hasOwnProperty(mode))\n      CodeMirror.requireMode(mode, function() {\n        instance.setOption(\"mode\", instance.getOption(\"mode\"));\n      });\n  };\n});\n"]}