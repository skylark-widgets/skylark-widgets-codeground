{"version":3,"sources":["addon/tern/worker.js"],"names":["getFile","file","c","postMessage","type","name","id","nextId","pending","startServer","defs","plugins","scripts","importScripts","apply","server","tern","Server","async","this","onmessage","e","data","addFile","text","delFile","request","body","err","reqData","String","Error","console","log","v","message"],"mappings":";;;;;;;AAyBA,QAASA,SAAQC,EAAMC,GACrBC,aAAaC,KAAM,UAAWC,KAAMJ,EAAMK,KAAMC,SAChDC,QAAQD,QAAUL,EAGpB,QAASO,aAAYC,EAAMC,EAASC,GAC9BA,GAASC,cAAcC,MAAM,KAAMF,GAEvCG,OAAS,GAAIC,MAAKC,QAChBjB,QAASA,QACTkB,OAAO,EACPR,KAAMA,EACNC,QAASA,IAhCb,GAAII,OAEJI,MAAKC,UAAY,SAASC,GACxB,GAAIC,GAAOD,EAAEC,IACb,QAAQA,EAAKlB,MACb,IAAK,OAAQ,MAAOK,aAAYa,EAAKZ,KAAMY,EAAKX,QAASW,EAAKV,QAC9D,KAAK,MAAO,MAAOG,QAAOQ,QAAQD,EAAKjB,KAAMiB,EAAKE,KAClD,KAAK,MAAO,MAAOT,QAAOU,QAAQH,EAAKjB,KACvC,KAAK,MAAO,MAAOU,QAAOW,QAAQJ,EAAKK,KAAM,SAASC,EAAKC,GACzD1B,aAAaG,GAAIgB,EAAKhB,GAAIqB,KAAME,EAASD,IAAKA,GAAOE,OAAOF,MAE9D,KAAK,UACH,GAAI1B,GAAIM,QAAQc,EAAKhB,GAErB,cADOE,SAAQc,EAAKhB,IACbJ,EAAEoB,EAAKM,IAAKN,EAAKE,KAC1B,SAAS,KAAM,IAAIO,OAAM,yBAA2BT,EAAKlB,OAI3D,IAAIG,QAAS,EAAGC,UAiBhBW,MAAKa,SACHC,IAAK,SAASC,GAAK/B,aAAaC,KAAM,QAAS+B,QAASD","file":"../../../addon/tern/worker.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// declare global: tern, server\n\nvar server;\n\nthis.onmessage = function(e) {\n  var data = e.data;\n  switch (data.type) {\n  case \"init\": return startServer(data.defs, data.plugins, data.scripts);\n  case \"add\": return server.addFile(data.name, data.text);\n  case \"del\": return server.delFile(data.name);\n  case \"req\": return server.request(data.body, function(err, reqData) {\n    postMessage({id: data.id, body: reqData, err: err && String(err)});\n  });\n  case \"getFile\":\n    var c = pending[data.id];\n    delete pending[data.id];\n    return c(data.err, data.text);\n  default: throw new Error(\"Unknown message type: \" + data.type);\n  }\n};\n\nvar nextId = 0, pending = {};\nfunction getFile(file, c) {\n  postMessage({type: \"getFile\", name: file, id: ++nextId});\n  pending[nextId] = c;\n}\n\nfunction startServer(defs, plugins, scripts) {\n  if (scripts) importScripts.apply(null, scripts);\n\n  server = new tern.Server({\n    getFile: getFile,\n    async: true,\n    defs: defs,\n    plugins: plugins\n  });\n}\n\nthis.console = {\n  log: function(v) { postMessage({type: \"debug\", message: v}); }\n};\n"]}