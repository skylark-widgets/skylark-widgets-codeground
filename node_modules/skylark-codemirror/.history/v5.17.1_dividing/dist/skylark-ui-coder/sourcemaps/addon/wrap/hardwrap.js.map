{"version":3,"sources":["addon/wrap/hardwrap.js"],"names":["define","CodeMirror","findParagraph","cm","pos","options","startRE","paragraphStart","getHelper","start","line","first","firstLine","getLine","test","endRE","paragraphEnd","end","last","lastLine","from","to","findBreakPoint","text","column","wrapOn","killTrailingSpace","at","length","charAt","slice","endOfText","wrapRange","clipPos","killTrailing","changes","curLine","curNo","lines","getRange","leadingSpace","match","i","oldLen","spaceInserted","spaceTrimmed","firstBreak","push","Pos","bp","operation","change","cmpPos","replaceRange","changeEnd","defineExtension","this","getCursor","para","commands","wrapLines","ranges","listSelections","span","range","empty","head","paras","madeChange"],"mappings":"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","file":"../../../addon/wrap/hardwrap.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n\n  function findParagraph(cm, pos, options) {\n    var startRE = options.paragraphStart || cm.getHelper(pos, \"paragraphStart\");\n    for (var start = pos.line, first = cm.firstLine(); start > first; --start) {\n      var line = cm.getLine(start);\n      if (startRE && startRE.test(line)) break;\n      if (!/\\S/.test(line)) { ++start; break; }\n    }\n    var endRE = options.paragraphEnd || cm.getHelper(pos, \"paragraphEnd\");\n    for (var end = pos.line + 1, last = cm.lastLine(); end <= last; ++end) {\n      var line = cm.getLine(end);\n      if (endRE && endRE.test(line)) { ++end; break; }\n      if (!/\\S/.test(line)) break;\n    }\n    return {from: start, to: end};\n  }\n\n  function findBreakPoint(text, column, wrapOn, killTrailingSpace) {\n    var at = column\n    while (at < text.length && text.charAt(at) == \" \") at++\n    for (; at > 0; --at)\n      if (wrapOn.test(text.slice(at - 1, at + 1))) break;\n    for (var first = true;; first = false) {\n      var endOfText = at;\n      if (killTrailingSpace)\n        while (text.charAt(endOfText - 1) == \" \") --endOfText;\n      if (endOfText == 0 && first) at = column;\n      else return {from: endOfText, to: at};\n    }\n  }\n\n  function wrapRange(cm, from, to, options) {\n    from = cm.clipPos(from); to = cm.clipPos(to);\n    var column = options.column || 80;\n    var wrapOn = options.wrapOn || /\\s\\S|-[^\\.\\d]/;\n    var killTrailing = options.killTrailingSpace !== false;\n    var changes = [], curLine = \"\", curNo = from.line;\n    var lines = cm.getRange(from, to, false);\n    if (!lines.length) return null;\n    var leadingSpace = lines[0].match(/^[ \\t]*/)[0];\n\n    for (var i = 0; i < lines.length; ++i) {\n      var text = lines[i], oldLen = curLine.length, spaceInserted = 0;\n      if (curLine && text && !wrapOn.test(curLine.charAt(curLine.length - 1) + text.charAt(0))) {\n        curLine += \" \";\n        spaceInserted = 1;\n      }\n      var spaceTrimmed = \"\";\n      if (i) {\n        spaceTrimmed = text.match(/^\\s*/)[0];\n        text = text.slice(spaceTrimmed.length);\n      }\n      curLine += text;\n      if (i) {\n        var firstBreak = curLine.length > column && leadingSpace == spaceTrimmed &&\n          findBreakPoint(curLine, column, wrapOn, killTrailing);\n        // If this isn't broken, or is broken at a different point, remove old break\n        if (!firstBreak || firstBreak.from != oldLen || firstBreak.to != oldLen + spaceInserted) {\n          changes.push({text: [spaceInserted ? \" \" : \"\"],\n                        from: Pos(curNo, oldLen),\n                        to: Pos(curNo + 1, spaceTrimmed.length)});\n        } else {\n          curLine = leadingSpace + text;\n          ++curNo;\n        }\n      }\n      while (curLine.length > column) {\n        var bp = findBreakPoint(curLine, column, wrapOn, killTrailing);\n        changes.push({text: [\"\", leadingSpace],\n                      from: Pos(curNo, bp.from),\n                      to: Pos(curNo, bp.to)});\n        curLine = leadingSpace + curLine.slice(bp.to);\n        ++curNo;\n      }\n    }\n    if (changes.length) cm.operation(function() {\n      for (var i = 0; i < changes.length; ++i) {\n        var change = changes[i];\n        if (change.text || CodeMirror.cmpPos(change.from, change.to))\n          cm.replaceRange(change.text, change.from, change.to);\n      }\n    });\n    return changes.length ? {from: changes[0].from, to: CodeMirror.changeEnd(changes[changes.length - 1])} : null;\n  }\n\n  CodeMirror.defineExtension(\"wrapParagraph\", function(pos, options) {\n    options = options || {};\n    if (!pos) pos = this.getCursor();\n    var para = findParagraph(this, pos, options);\n    return wrapRange(this, Pos(para.from, 0), Pos(para.to - 1), options);\n  });\n\n  CodeMirror.commands.wrapLines = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections(), at = cm.lastLine() + 1;\n      for (var i = ranges.length - 1; i >= 0; i--) {\n        var range = ranges[i], span;\n        if (range.empty()) {\n          var para = findParagraph(cm, range.head, {});\n          span = {from: Pos(para.from, 0), to: Pos(para.to - 1)};\n        } else {\n          span = {from: range.from(), to: range.to()};\n        }\n        if (span.to.line >= at) continue;\n        at = span.from.line;\n        wrapRange(cm, span.from, span.to, {});\n      }\n    });\n  };\n\n  CodeMirror.defineExtension(\"wrapRange\", function(from, to, options) {\n    return wrapRange(this, from, to, options || {});\n  });\n\n  CodeMirror.defineExtension(\"wrapParagraphsInRange\", function(from, to, options) {\n    options = options || {};\n    var cm = this, paras = [];\n    for (var line = from.line; line <= to.line;) {\n      var para = findParagraph(cm, Pos(line, 0), options);\n      paras.push(para);\n      line = para.to;\n    }\n    var madeChange = false;\n    if (paras.length) cm.operation(function() {\n      for (var i = paras.length - 1; i >= 0; --i)\n        madeChange = madeChange || wrapRange(cm, Pos(paras[i].from, 0), Pos(paras[i].to - 1), options);\n    });\n    return madeChange;\n  });\n});\n"]}