{"version":3,"sources":["mode/clike/clike.js"],"names":["define","CodeMirror","Context","indented","column","type","info","align","prev","this","pushContext","state","col","indent","context","popContext","t","typeBefore","stream","pos","prevToken","test","string","slice","typeAtEndOfLine","indentation","isTopScope","words","str","obj","split","i","length","contains","word","propertyIsEnumerable","cppHook","startOfLine","ch","next","peek","match","tokenize","pointerHook","_stream","cpp14Literal","eatWhile","cpp11StringHook","backUp","cpp11RawStringDelim","tokenRawString","cppLooksLikeConstructor","lastTwo","exec","tokenAtString","eat","delim","replace","RegExp","skipToEnd","def","mimes","mode","add","prop","hasOwnProperty","push","keywords","types","builtin","atoms","helperType","registerHelper","defineMIME","tokenTripleString","escaped","eol","tokenKotlinString","tripleString","end","skipTo","tokenCeylonString","stringTokenizer","defineMode","config","parserConfig","tokenBase","hooks","result","tokenString","isPunctuationChar","curPunc","numberStart","number","tokenComment","isOperatorChar","namespaceSeparator","cur","current","blockKeywords","defKeywords","isDefKeyword","quote","multiLineStrings","maybeEnd","maybeEOL","typeFirstDefinitions","indentUnit","statementIndentUnit","dontAlignCalls","indentStatements","indentSwitch","endStatement","startState","basecolumn","token","ctx","sol","eatSpace","style","start","undefined","styleDefs","textAfter","Pass","firstChar","charAt","dontIndentStatements","hook","closing","switchBlock","allmanIndentation","electricInput","blockCommentStart","blockCommentEnd","lineComment","fold","cKeywords","cTypes","name","#","*","modeProps","u","U","L","R","0","1","2","3","4","5","6","7","8","9","@","\"","'","=","cx","closeBrackets","triples","intendSwitch","_state","first","toUpperCase","toLowerCase","`"],"mappings":"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","file":"../../../mode/clike/clike.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nfunction Context(indented, column, type, info, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.info = info;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type, info) {\n  var indent = state.indented;\n  if (state.context && state.context.type != \"statement\" && type != \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, info, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\nfunction typeBefore(stream, state, pos) {\n  if (state.prevToken == \"variable\" || state.prevToken == \"variable-3\") return true;\n  if (/\\S(?:[^- ]>|[*\\]])\\s*$|\\*$/.test(stream.string.slice(0, pos))) return true;\n  if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;\n}\n\nfunction isTopScope(context) {\n  for (;;) {\n    if (!context || context.type == \"top\") return true;\n    if (context.type == \"}\" && context.prev.info != \"namespace\") return false;\n    context = context.prev;\n  }\n}\n\nCodeMirror.defineMode(\"clike\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      keywords = parserConfig.keywords || {},\n      types = parserConfig.types || {},\n      builtin = parserConfig.builtin || {},\n      blockKeywords = parserConfig.blockKeywords || {},\n      defKeywords = parserConfig.defKeywords || {},\n      atoms = parserConfig.atoms || {},\n      hooks = parserConfig.hooks || {},\n      multiLineStrings = parserConfig.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false,\n      indentSwitch = parserConfig.indentSwitch !== false,\n      namespaceSeparator = parserConfig.namespaceSeparator,\n      isPunctuationChar = parserConfig.isPunctuationChar || /[\\[\\]{}\\(\\),;\\:\\.]/,\n      numberStart = parserConfig.numberStart || /[\\d\\.]/,\n      number = parserConfig.number || /^(?:0x[a-f\\d]+|0b[01]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:e[-+]?\\d+)?)(u|ll?|l|f)?/i,\n      isOperatorChar = parserConfig.isOperatorChar || /[+\\-*&%=<>!?|\\/]/,\n      endStatement = parserConfig.endStatement || /^[;:,]$/;\n\n  var curPunc, isDefKeyword;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (isPunctuationChar.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (numberStart.test(ch)) {\n      stream.backUp(1)\n      if (stream.match(number)) return \"number\"\n      stream.next()\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      while (!stream.match(/^\\/[\\/*]/, false) && stream.eat(isOperatorChar)) {}\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    if (namespaceSeparator) while (stream.match(namespaceSeparator))\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n\n    var cur = stream.current();\n    if (contains(keywords, cur)) {\n      if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n      if (contains(defKeywords, cur)) isDefKeyword = true;\n      return \"keyword\";\n    }\n    if (contains(types, cur)) return \"variable-3\";\n    if (contains(builtin, cur)) {\n      if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n      return \"builtin\";\n    }\n    if (contains(atoms, cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function maybeEOL(stream, state) {\n    if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context))\n      state.typeAtEndOfLine = typeBefore(stream, state, stream.pos)\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", null, false),\n        indented: 0,\n        startOfLine: true,\n        prevToken: null\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) { maybeEOL(stream, state); return null; }\n      curPunc = isDefKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (endStatement.test(curPunc)) while (state.context.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (indentStatements &&\n               (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != \";\") ||\n                (ctx.type == \"statement\" && curPunc == \"newstatement\"))) {\n        pushContext(state, stream.column(), \"statement\", stream.current());\n      }\n\n      if (style == \"variable\" &&\n          ((state.prevToken == \"def\" ||\n            (parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) &&\n             isTopScope(state.context) && stream.match(/^\\s*\\(/, false)))))\n        style = \"def\";\n\n      if (hooks.token) {\n        var result = hooks.token(stream, state, style);\n        if (result !== undefined) style = result;\n      }\n\n      if (style == \"def\" && parserConfig.styleDefs === false) style = \"variable\";\n\n      state.startOfLine = false;\n      state.prevToken = isDefKeyword ? \"def\" : style || curPunc;\n      maybeEOL(stream, state);\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      if (parserConfig.dontIndentStatements)\n        while (ctx.type == \"statement\" && parserConfig.dontIndentStatements.test(ctx.info))\n          ctx = ctx.prev\n      if (hooks.indent) {\n        var hook = hooks.indent(state, ctx, textAfter);\n        if (typeof hook == \"number\") return hook\n      }\n      var closing = firstChar == ctx.type;\n      var switchBlock = ctx.prev && ctx.prev.info == \"switch\";\n      if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {\n        while (ctx.type != \"top\" && ctx.type != \"}\") ctx = ctx.prev\n        return ctx.indented\n      }\n      if (ctx.type == \"statement\")\n        return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      if (ctx.align && (!dontAlignCalls || ctx.type != \")\"))\n        return ctx.column + (closing ? 0 : 1);\n      if (ctx.type == \")\" && !closing)\n        return ctx.indented + statementIndentUnit;\n\n      return ctx.indented + (closing ? 0 : indentUnit) +\n        (!closing && switchBlock && !/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 0);\n    },\n\n    electricInput: indentSwitch ? /^\\s*(?:case .*?:|default:|\\{\\}?|\\})$/ : /^\\s*[{}]$/,\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"brace\"\n  };\n});\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  function contains(words, word) {\n    if (typeof words === \"function\") {\n      return words(word);\n    } else {\n      return words.propertyIsEnumerable(word);\n    }\n  }\n  var cKeywords = \"auto if break case register continue return default do sizeof \" +\n    \"static else struct switch extern typedef union for goto while enum const volatile\";\n  var cTypes = \"int long char short double float unsigned signed void size_t ptrdiff_t\";\n\n  function cppHook(stream, state) {\n    if (!state.startOfLine) return false\n    for (var ch, next = null; ch = stream.peek();) {\n      if (ch == \"\\\\\" && stream.match(/^.$/)) {\n        next = cppHook\n        break\n      } else if (ch == \"/\" && stream.match(/^\\/[\\/\\*]/, false)) {\n        break\n      }\n      stream.next()\n    }\n    state.tokenize = next\n    return \"meta\"\n  }\n\n  function pointerHook(_stream, state) {\n    if (state.prevToken == \"variable-3\") return \"variable-3\";\n    return false;\n  }\n\n  function cpp14Literal(stream) {\n    stream.eatWhile(/[\\w\\.']/);\n    return \"number\";\n  }\n\n  function cpp11StringHook(stream, state) {\n    stream.backUp(1);\n    // Raw strings.\n    if (stream.match(/(R|u8R|uR|UR|LR)/)) {\n      var match = stream.match(/\"([^\\s\\\\()]{0,16})\\(/);\n      if (!match) {\n        return false;\n      }\n      state.cpp11RawStringDelim = match[1];\n      state.tokenize = tokenRawString;\n      return tokenRawString(stream, state);\n    }\n    // Unicode strings/chars.\n    if (stream.match(/(u8|u|U|L)/)) {\n      if (stream.match(/[\"']/, /* eat */ false)) {\n        return \"string\";\n      }\n      return false;\n    }\n    // Ignore this hook.\n    stream.next();\n    return false;\n  }\n\n  function cppLooksLikeConstructor(word) {\n    var lastTwo = /(\\w+)::(\\w+)$/.exec(word);\n    return lastTwo && lastTwo[1] == lastTwo[2];\n  }\n\n  // C#-style strings where \"\" escapes a quote.\n  function tokenAtString(stream, state) {\n    var next;\n    while ((next = stream.next()) != null) {\n      if (next == '\"' && !stream.eat('\"')) {\n        state.tokenize = null;\n        break;\n      }\n    }\n    return \"string\";\n  }\n\n  // C++11 raw string literal is <prefix>\"<delim>( anything )<delim>\", where\n  // <delim> can be a string up to 16 characters long.\n  function tokenRawString(stream, state) {\n    // Escape characters that have special regex meanings.\n    var delim = state.cpp11RawStringDelim.replace(/[^\\w\\s]/g, '\\\\$&');\n    var match = stream.match(new RegExp(\".*?\\\\)\" + delim + '\"'));\n    if (match)\n      state.tokenize = null;\n    else\n      stream.skipToEnd();\n    return \"string\";\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n        words.push(prop);\n    }\n    add(mode.keywords);\n    add(mode.types);\n    add(mode.builtin);\n    add(mode.atoms);\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i)\n      CodeMirror.defineMIME(mimes[i], mode);\n  }\n\n  def([\"text/x-csrc\", \"text/x-c\", \"text/x-chdr\"], {\n    name: \"clike\",\n    keywords: words(cKeywords),\n    types: words(cTypes + \" bool _Complex _Bool float_t double_t intptr_t intmax_t \" +\n                 \"int8_t int16_t int32_t int64_t uintptr_t uintmax_t uint8_t uint16_t \" +\n                 \"uint32_t uint64_t\"),\n    blockKeywords: words(\"case do else for if switch while struct\"),\n    defKeywords: words(\"struct\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"null true false\"),\n    hooks: {\"#\": cppHook, \"*\": pointerHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def([\"text/x-c++src\", \"text/x-c++hdr\"], {\n    name: \"clike\",\n    keywords: words(cKeywords + \" asm dynamic_cast namespace reinterpret_cast try explicit new \" +\n                    \"static_cast typeid catch operator template typename class friend private \" +\n                    \"this using const_cast inline public throw virtual delete mutable protected \" +\n                    \"alignas alignof constexpr decltype nullptr noexcept thread_local final \" +\n                    \"static_assert override\"),\n    types: words(cTypes + \" bool wchar_t\"),\n    blockKeywords: words(\"catch class do else finally for if struct switch try while\"),\n    defKeywords: words(\"class namespace struct enum union\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    dontIndentStatements: /^template$/,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n      \"u\": cpp11StringHook,\n      \"U\": cpp11StringHook,\n      \"L\": cpp11StringHook,\n      \"R\": cpp11StringHook,\n      \"0\": cpp14Literal,\n      \"1\": cpp14Literal,\n      \"2\": cpp14Literal,\n      \"3\": cpp14Literal,\n      \"4\": cpp14Literal,\n      \"5\": cpp14Literal,\n      \"6\": cpp14Literal,\n      \"7\": cpp14Literal,\n      \"8\": cpp14Literal,\n      \"9\": cpp14Literal,\n      token: function(stream, state, style) {\n        if (style == \"variable\" && stream.peek() == \"(\" &&\n            (state.prevToken == \";\" || state.prevToken == null ||\n             state.prevToken == \"}\") &&\n            cppLooksLikeConstructor(stream.current()))\n          return \"def\";\n      }\n    },\n    namespaceSeparator: \"::\",\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-java\", {\n    name: \"clike\",\n    keywords: words(\"abstract assert break case catch class const continue default \" +\n                    \"do else enum extends final finally float for goto if implements import \" +\n                    \"instanceof interface native new package private protected public \" +\n                    \"return static strictfp super switch synchronized this throw throws transient \" +\n                    \"try volatile while\"),\n    types: words(\"byte short int long float double boolean char void Boolean Byte Character Double Float \" +\n                 \"Integer Long Number Object Short String StringBuffer StringBuilder Void\"),\n    blockKeywords: words(\"catch class do else finally for if switch try while\"),\n    defKeywords: words(\"class interface package enum\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    endStatement: /^[;:]$/,\n    number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+\\.?\\d*|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    },\n    modeProps: {fold: [\"brace\", \"import\"]}\n  });\n\n  def(\"text/x-csharp\", {\n    name: \"clike\",\n    keywords: words(\"abstract as async await base break case catch checked class const continue\" +\n                    \" default delegate do else enum event explicit extern finally fixed for\" +\n                    \" foreach goto if implicit in interface internal is lock namespace new\" +\n                    \" operator out override params private protected public readonly ref return sealed\" +\n                    \" sizeof stackalloc static struct switch this throw try typeof unchecked\" +\n                    \" unsafe using virtual void volatile while add alias ascending descending dynamic from get\" +\n                    \" global group into join let orderby partial remove select set value var yield\"),\n    types: words(\"Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func\" +\n                 \" Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32\" +\n                 \" UInt64 bool byte char decimal double short int long object\"  +\n                 \" sbyte float string ushort uint ulong\"),\n    blockKeywords: words(\"catch class do else finally for foreach if struct switch try while\"),\n    defKeywords: words(\"class interface namespace struct var\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    hooks: {\n      \"@\": function(stream, state) {\n        if (stream.eat('\"')) {\n          state.tokenize = tokenAtString;\n          return tokenAtString(stream, state);\n        }\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n\n  function tokenTripleString(stream, state) {\n    var escaped = false;\n    while (!stream.eol()) {\n      if (!escaped && stream.match('\"\"\"')) {\n        state.tokenize = null;\n        break;\n      }\n      escaped = stream.next() == \"\\\\\" && !escaped;\n    }\n    return \"string\";\n  }\n\n  def(\"text/x-scala\", {\n    name: \"clike\",\n    keywords: words(\n\n      /* scala */\n      \"abstract case catch class def do else extends final finally for forSome if \" +\n      \"implicit import lazy match new null object override package private protected return \" +\n      \"sealed super this throw trait try type val var while with yield _ : = => <- <: \" +\n      \"<% >: # @ \" +\n\n      /* package scala */\n      \"assert assume require print println printf readLine readBoolean readByte readShort \" +\n      \"readChar readInt readLong readFloat readDouble \" +\n\n      \":: #:: \"\n    ),\n    types: words(\n      \"AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either \" +\n      \"Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable \" +\n      \"Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering \" +\n      \"Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder \" +\n      \"StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector \" +\n\n      /* package java.lang */\n      \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" +\n      \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" +\n      \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" +\n      \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void\"\n    ),\n    multiLineStrings: true,\n    blockKeywords: words(\"catch class do else finally for forSome if match switch try while\"),\n    defKeywords: words(\"class def object package trait type val var\"),\n    atoms: words(\"true false null\"),\n    indentStatements: false,\n    indentSwitch: false,\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function(stream, state) {\n        if (!stream.match('\"\"')) return false;\n        state.tokenize = tokenTripleString;\n        return state.tokenize(stream, state);\n      },\n      \"'\": function(stream) {\n        stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n        return \"atom\";\n      },\n      \"=\": function(stream, state) {\n        var cx = state.context\n        if (cx.type == \"}\" && cx.align && stream.eat(\">\")) {\n          state.context = new Context(cx.indented, cx.column, cx.type, cx.info, null, cx.prev)\n          return \"operator\"\n        } else {\n          return false\n        }\n      }\n    },\n    modeProps: {closeBrackets: {triples: '\"'}}\n  });\n\n  function tokenKotlinString(tripleString){\n    return function (stream, state) {\n      var escaped = false, next, end = false;\n      while (!stream.eol()) {\n        if (!tripleString && !escaped && stream.match('\"') ) {end = true; break;}\n        if (tripleString && stream.match('\"\"\"')) {end = true; break;}\n        next = stream.next();\n        if(!escaped && next == \"$\" && stream.match('{'))\n          stream.skipTo(\"}\");\n        escaped = !escaped && next == \"\\\\\" && !tripleString;\n      }\n      if (end || !tripleString)\n        state.tokenize = null;\n      return \"string\";\n    }\n  }\n\n  def(\"text/x-kotlin\", {\n    name: \"clike\",\n    keywords: words(\n      /*keywords*/\n      \"package as typealias class interface this super val \" +\n      \"var fun for is in This throw return \" +\n      \"break continue object if else while do try when !in !is as? \" +\n\n      /*soft keywords*/\n      \"file import where by get set abstract enum open inner override private public internal \" +\n      \"protected catch finally out final vararg reified dynamic companion constructor init \" +\n      \"sealed field property receiver param sparam lateinit data inline noinline tailrec \" +\n      \"external annotation crossinline const operator infix\"\n    ),\n    types: words(\n      /* package java.lang */\n      \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" +\n      \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" +\n      \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" +\n      \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void\"\n    ),\n    intendSwitch: false,\n    indentStatements: false,\n    multiLineStrings: true,\n    blockKeywords: words(\"catch class do else finally for if where try while enum\"),\n    defKeywords: words(\"class val var object package interface fun\"),\n    atoms: words(\"true false null this\"),\n    hooks: {\n      '\"': function(stream, state) {\n        state.tokenize = tokenKotlinString(stream.match('\"\"'));\n        return state.tokenize(stream, state);\n      }\n    },\n    modeProps: {closeBrackets: {triples: '\"'}}\n  });\n\n  def([\"x-shader/x-vertex\", \"x-shader/x-fragment\"], {\n    name: \"clike\",\n    keywords: words(\"sampler1D sampler2D sampler3D samplerCube \" +\n                    \"sampler1DShadow sampler2DShadow \" +\n                    \"const attribute uniform varying \" +\n                    \"break continue discard return \" +\n                    \"for while do if else struct \" +\n                    \"in out inout\"),\n    types: words(\"float int bool void \" +\n                 \"vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 \" +\n                 \"mat2 mat3 mat4\"),\n    blockKeywords: words(\"for while do if else struct\"),\n    builtin: words(\"radians degrees sin cos tan asin acos atan \" +\n                    \"pow exp log exp2 sqrt inversesqrt \" +\n                    \"abs sign floor ceil fract mod min max clamp mix step smoothstep \" +\n                    \"length distance dot cross normalize ftransform faceforward \" +\n                    \"reflect refract matrixCompMult \" +\n                    \"lessThan lessThanEqual greaterThan greaterThanEqual \" +\n                    \"equal notEqual any all not \" +\n                    \"texture1D texture1DProj texture1DLod texture1DProjLod \" +\n                    \"texture2D texture2DProj texture2DLod texture2DProjLod \" +\n                    \"texture3D texture3DProj texture3DLod texture3DProjLod \" +\n                    \"textureCube textureCubeLod \" +\n                    \"shadow1D shadow2D shadow1DProj shadow2DProj \" +\n                    \"shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod \" +\n                    \"dFdx dFdy fwidth \" +\n                    \"noise1 noise2 noise3 noise4\"),\n    atoms: words(\"true false \" +\n                \"gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex \" +\n                \"gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 \" +\n                \"gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 \" +\n                \"gl_FogCoord gl_PointCoord \" +\n                \"gl_Position gl_PointSize gl_ClipVertex \" +\n                \"gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor \" +\n                \"gl_TexCoord gl_FogFragCoord \" +\n                \"gl_FragCoord gl_FrontFacing \" +\n                \"gl_FragData gl_FragDepth \" +\n                \"gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix \" +\n                \"gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse \" +\n                \"gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse \" +\n                \"gl_TexureMatrixTranspose gl_ModelViewMatrixInverseTranspose \" +\n                \"gl_ProjectionMatrixInverseTranspose \" +\n                \"gl_ModelViewProjectionMatrixInverseTranspose \" +\n                \"gl_TextureMatrixInverseTranspose \" +\n                \"gl_NormalScale gl_DepthRange gl_ClipPlane \" +\n                \"gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel \" +\n                \"gl_FrontLightModelProduct gl_BackLightModelProduct \" +\n                \"gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ \" +\n                \"gl_FogParameters \" +\n                \"gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords \" +\n                \"gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats \" +\n                \"gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits \" +\n                \"gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits \" +\n                \"gl_MaxDrawBuffers\"),\n    indentSwitch: false,\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-nesc\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \"as atomic async call command component components configuration event generic \" +\n                    \"implementation includes interface module new norace nx_struct nx_union post provides \" +\n                    \"signal task uses abstract extends\"),\n    types: words(cTypes),\n    blockKeywords: words(\"case do else for if switch while struct\"),\n    atoms: words(\"null true false\"),\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-objectivec\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \"inline restrict _Bool _Complex _Imaginary BOOL Class bycopy byref id IMP in \" +\n                    \"inout nil oneway out Protocol SEL self super atomic nonatomic retain copy readwrite readonly\"),\n    types: words(cTypes),\n    atoms: words(\"YES NO NULL NILL ON OFF true false\"),\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$]/);\n        return \"keyword\";\n      },\n      \"#\": cppHook,\n      indent: function(_state, ctx, textAfter) {\n        if (ctx.type == \"statement\" && /^@\\w/.test(textAfter)) return ctx.indented\n      }\n    },\n    modeProps: {fold: \"brace\"}\n  });\n\n  def(\"text/x-squirrel\", {\n    name: \"clike\",\n    keywords: words(\"base break clone continue const default delete enum extends function in class\" +\n                    \" foreach local resume return this throw typeof yield constructor instanceof static\"),\n    types: words(cTypes),\n    blockKeywords: words(\"case catch class else for foreach if switch try while\"),\n    defKeywords: words(\"function local class\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  // Ceylon Strings need to deal with interpolation\n  var stringTokenizer = null;\n  function tokenCeylonString(type) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while (!stream.eol()) {\n        if (!escaped && stream.match('\"') &&\n              (type == \"single\" || stream.match('\"\"'))) {\n          end = true;\n          break;\n        }\n        if (!escaped && stream.match('``')) {\n          stringTokenizer = tokenCeylonString(type);\n          end = true;\n          break;\n        }\n        next = stream.next();\n        escaped = type == \"single\" && !escaped && next == \"\\\\\";\n      }\n      if (end)\n          state.tokenize = null;\n      return \"string\";\n    }\n  }\n\n  def(\"text/x-ceylon\", {\n    name: \"clike\",\n    keywords: words(\"abstracts alias assembly assert assign break case catch class continue dynamic else\" +\n                    \" exists extends finally for function given if import in interface is let module new\" +\n                    \" nonempty object of out outer package return satisfies super switch then this throw\" +\n                    \" try value void while\"),\n    types: function(word) {\n        // In Ceylon all identifiers that start with an uppercase are types\n        var first = word.charAt(0);\n        return (first === first.toUpperCase() && first !== first.toLowerCase());\n    },\n    blockKeywords: words(\"case catch class dynamic else finally for function if interface module new object switch try while\"),\n    defKeywords: words(\"class dynamic function interface module object package value\"),\n    builtin: words(\"abstract actual aliased annotation by default deprecated doc final formal late license\" +\n                   \" native optional sealed see serializable shared suppressWarnings tagged throws variable\"),\n    isPunctuationChar: /[\\[\\]{}\\(\\),;\\:\\.`]/,\n    isOperatorChar: /[+\\-*&%=<>!?|^~:\\/]/,\n    numberStart: /[\\d#$]/,\n    number: /^(?:#[\\da-fA-F_]+|\\$[01_]+|[\\d_]+[kMGTPmunpf]?|[\\d_]+\\.[\\d_]+(?:[eE][-+]?\\d+|[kMGTPmunpf]|)|)/i,\n    multiLineStrings: true,\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null larger smaller equal empty finished\"),\n    indentSwitch: false,\n    styleDefs: false,\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function(stream, state) {\n          state.tokenize = tokenCeylonString(stream.match('\"\"') ? \"triple\" : \"single\");\n          return state.tokenize(stream, state);\n        },\n      '`': function(stream, state) {\n          if (!stringTokenizer || !stream.match('`')) return false;\n          state.tokenize = stringTokenizer;\n          stringTokenizer = null;\n          return state.tokenize(stream, state);\n        },\n      \"'\": function(stream) {\n        stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n        return \"atom\";\n      },\n      token: function(_stream, state, style) {\n          if ((style == \"variable\" || style == \"variable-3\") &&\n              state.prevToken == \".\") {\n            return \"variable-2\";\n          }\n        }\n    },\n    modeProps: {\n        fold: [\"brace\", \"import\"],\n        closeBrackets: {triples: '\"'}\n    }\n  });\n\n});\n"]}