{"version":3,"sources":["mode/clike/test.js"],"names":["MT","name","test","mode","Array","prototype","slice","call","arguments","MTCPP","mode_cpp","CodeMirror","getMode","indentUnit"],"mappings":";;;;;;;CAGA,WAEE,QAASA,GAAGC,GAAQC,KAAKC,KAAKF,EAAME,EAAMC,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IA0ChF,QAASC,GAAMR,GAAQC,KAAKC,KAAKF,EAAMS,EAAUN,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IA3CvF,GAAIL,GAAOQ,WAAWC,SAASC,WAAY,GAAI,WAG/Cb,GAAG,SACA,gGACA,yEACA,kBACA,+CACA,KAEHA,EAAG,gBACA,oCACA,gCACA,oCACA,uBACA,0DACA,KAEHA,EAAG,MACA,mCACA,+BACA,iDAEHA,EAAG,eACA,oFACA,uHAEHA,EAAG,eACA,qBACA,uBACA,iCACA,qBAEHA,EAAG,eACA,uBACA,mCACA,uBACA,WACA,iFACA,6CAGH,IAAIU,GAAWC,WAAWC,SAASC,WAAY,GAAI,gBAGnDJ,GAAM,gBACJ,mBACA,qBACA,qBACA","file":"../../../mode/clike/test.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function() {\n  var mode = CodeMirror.getMode({indentUnit: 2}, \"text/x-c\");\n  function MT(name) { test.mode(name, mode, Array.prototype.slice.call(arguments, 1)); }\n\n  MT(\"indent\",\n     \"[variable-3 void] [def foo]([variable-3 void*] [variable a], [variable-3 int] [variable b]) {\",\n     \"  [variable-3 int] [variable c] [operator =] [variable b] [operator +]\",\n     \"    [number 1];\",\n     \"  [keyword return] [operator *][variable a];\",\n     \"}\");\n\n  MT(\"indent_switch\",\n     \"[keyword switch] ([variable x]) {\",\n     \"  [keyword case] [number 10]:\",\n     \"    [keyword return] [number 20];\",\n     \"  [keyword default]:\",\n     \"    [variable printf]([string \\\"foo %c\\\"], [variable x]);\",\n     \"}\");\n\n  MT(\"def\",\n     \"[variable-3 void] [def foo]() {}\",\n     \"[keyword struct] [def bar]{}\",\n     \"[variable-3 int] [variable-3 *][def baz]() {}\");\n\n  MT(\"def_new_line\",\n     \"::[variable std]::[variable SomeTerribleType][operator <][variable T][operator >]\",\n     \"[def SomeLongMethodNameThatDoesntFitIntoOneLine]([keyword const] [variable MyType][operator &] [variable param]) {}\")\n\n  MT(\"double_block\",\n     \"[keyword for] (;;)\",\n     \"  [keyword for] (;;)\",\n     \"    [variable x][operator ++];\",\n     \"[keyword return];\");\n\n  MT(\"preprocessor\",\n     \"[meta #define FOO 3]\",\n     \"[variable-3 int] [variable foo];\",\n     \"[meta #define BAR\\\\]\",\n     \"[meta 4]\",\n     \"[variable-3 unsigned] [variable-3 int] [variable bar] [operator =] [number 8];\",\n     \"[meta #include <baz> ][comment // comment]\")\n\n\n  var mode_cpp = CodeMirror.getMode({indentUnit: 2}, \"text/x-c++src\");\n  function MTCPP(name) { test.mode(name, mode_cpp, Array.prototype.slice.call(arguments, 1)); }\n\n  MTCPP(\"cpp14_literal\",\n    \"[number 10'000];\",\n    \"[number 0b10'000];\",\n    \"[number 0x10'000];\",\n    \"[string '100000'];\");\n})();\n"]}