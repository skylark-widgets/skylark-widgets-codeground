{"version":3,"sources":["mode/d/d.js"],"names":["define","CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","tokenBase","stream","state","ch","next","hooks","result","tokenize","tokenString","test","curPunc","eatWhile","eat","tokenComment","tokenNestedComment","skipToEnd","isOperatorChar","cur","current","keywords","propertyIsEnumerable","blockKeywords","builtin","atoms","quote","escaped","end","multiLineStrings","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","indentUnit","statementIndentUnit","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","textAfter","Pass","firstChar","charAt","closing","electricChars","defineMIME","name","@","_state"],"mappings":"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","file":"../../../mode/d/d.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"d\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      keywords = parserConfig.keywords || {},\n      builtin = parserConfig.builtin || {},\n      blockKeywords = parserConfig.blockKeywords || {},\n      atoms = parserConfig.atoms || {},\n      hooks = parserConfig.hooks || {},\n      multiLineStrings = parserConfig.multiLineStrings;\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"+\")) {\n        state.tokenize = tokenComment;\n        return tokenNestedComment(stream, state);\n      }\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"keyword\";\n    }\n    if (builtin.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"builtin\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenNestedComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"+\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\")\n      indent = state.context.indented;\n    return state.context = new Context(indent, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var blockKeywords = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" +\n                      \"out scope struct switch try union unittest version while with\";\n\n  CodeMirror.defineMIME(\"text/x-d\", {\n    name: \"d\",\n    keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" +\n                    \"debug default delegate delete deprecated export extern final finally function goto immutable \" +\n                    \"import inout invariant is lazy macro module new nothrow override package pragma private \" +\n                    \"protected public pure ref return shared short static super synchronized template this \" +\n                    \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" +\n                    blockKeywords),\n    blockKeywords: words(blockKeywords),\n    builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" +\n                   \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n    atoms: words(\"exit failure success true false null\"),\n    hooks: {\n      \"@\": function(stream, _state) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n\n});\n"]}