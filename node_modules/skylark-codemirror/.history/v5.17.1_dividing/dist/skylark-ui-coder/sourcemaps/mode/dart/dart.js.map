{"version":3,"sources":["mode/dart/dart.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","set","words","obj","i","length","pushInterpolationStack","state","interpolationStack","push","tokenize","popInterpolationStack","pop","sizeInterpolationStack","tokenString","quote","stream","raw","tokenStringHelper","escaped","eol","peek","tokenInterpolation","next","tripleQuoted","match","eat","tokenInterpolationIdentifier","eatWhile","tokenNestedComment","depth","ch","keywords","split","blockKeywords","atoms","builtins","defineMIME","name","builtin","hooks","@","'","\"","r","}","_stream","/","registerHelper","concat","defineMode","conf","getMode"],"mappings":"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","file":"../../../mode/dart/dart.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../Coder\"), require(\"../clike/clike\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../Coder\", \"../clike/clike\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var keywords = (\"this super static final const abstract class extends external factory \" +\n    \"implements get native operator set typedef with enum throw rethrow \" +\n    \"assert break case continue default in return new deferred async await \" +\n    \"try catch finally do else for if switch while import library export \" +\n    \"part of show hide is as\").split(\" \");\n  var blockKeywords = \"try catch finally do else for if switch while\".split(\" \");\n  var atoms = \"true false null\".split(\" \");\n  var builtins = \"void bool num int double dynamic var String\".split(\" \");\n\n  function set(words) {\n    var obj = {};\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  function pushInterpolationStack(state) {\n    (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);\n  }\n\n  function popInterpolationStack(state) {\n    return (state.interpolationStack || (state.interpolationStack = [])).pop();\n  }\n\n  function sizeInterpolationStack(state) {\n    return state.interpolationStack ? state.interpolationStack.length : 0;\n  }\n\n  CodeMirror.defineMIME(\"application/dart\", {\n    name: \"clike\",\n    keywords: set(keywords),\n    blockKeywords: set(blockKeywords),\n    builtin: set(builtins),\n    atoms: set(atoms),\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_\\.]/);\n        return \"meta\";\n      },\n\n      // custom string handling to deal with triple-quoted strings and string interpolation\n      \"'\": function(stream, state) {\n        return tokenString(\"'\", stream, state, false);\n      },\n      \"\\\"\": function(stream, state) {\n        return tokenString(\"\\\"\", stream, state, false);\n      },\n      \"r\": function(stream, state) {\n        var peek = stream.peek();\n        if (peek == \"'\" || peek == \"\\\"\") {\n          return tokenString(stream.next(), stream, state, true);\n        }\n        return false;\n      },\n\n      \"}\": function(_stream, state) {\n        // \"}\" is end of interpolation, if interpolation stack is non-empty\n        if (sizeInterpolationStack(state) > 0) {\n          state.tokenize = popInterpolationStack(state);\n          return null;\n        }\n        return false;\n      },\n\n      \"/\": function(stream, state) {\n        if (!stream.eat(\"*\")) return false\n        state.tokenize = tokenNestedComment(1)\n        return state.tokenize(stream, state)\n      }\n    }\n  });\n\n  function tokenString(quote, stream, state, raw) {\n    var tripleQuoted = false;\n    if (stream.eat(quote)) {\n      if (stream.eat(quote)) tripleQuoted = true;\n      else return \"string\"; //empty string\n    }\n    function tokenStringHelper(stream, state) {\n      var escaped = false;\n      while (!stream.eol()) {\n        if (!raw && !escaped && stream.peek() == \"$\") {\n          pushInterpolationStack(state);\n          state.tokenize = tokenInterpolation;\n          return \"string\";\n        }\n        var next = stream.next();\n        if (next == quote && !escaped && (!tripleQuoted || stream.match(quote + quote))) {\n          state.tokenize = null;\n          break;\n        }\n        escaped = !raw && !escaped && next == \"\\\\\";\n      }\n      return \"string\";\n    }\n    state.tokenize = tokenStringHelper;\n    return tokenStringHelper(stream, state);\n  }\n\n  function tokenInterpolation(stream, state) {\n    stream.eat(\"$\");\n    if (stream.eat(\"{\")) {\n      // let clike handle the content of ${...},\n      // we take over again when \"}\" appears (see hooks).\n      state.tokenize = null;\n    } else {\n      state.tokenize = tokenInterpolationIdentifier;\n    }\n    return null;\n  }\n\n  function tokenInterpolationIdentifier(stream, state) {\n    stream.eatWhile(/[\\w_]/);\n    state.tokenize = popInterpolationStack(state);\n    return \"variable\";\n  }\n\n  function tokenNestedComment(depth) {\n    return function (stream, state) {\n      var ch\n      while (ch = stream.next()) {\n        if (ch == \"*\" && stream.eat(\"/\")) {\n          if (depth == 1) {\n            state.tokenize = null\n            break\n          } else {\n            state.tokenize = tokenNestedComment(depth - 1)\n            return state.tokenize(stream, state)\n          }\n        } else if (ch == \"/\" && stream.eat(\"*\")) {\n          state.tokenize = tokenNestedComment(depth + 1)\n          return state.tokenize(stream, state)\n        }\n      }\n      return \"comment\"\n    }\n  }\n\n  CodeMirror.registerHelper(\"hintWords\", \"application/dart\", keywords.concat(atoms).concat(builtins));\n\n  // This is needed to make loading through meta.js work.\n  CodeMirror.defineMode(\"dart\", function(conf) {\n    return CodeMirror.getMode(conf, \"application/dart\");\n  }, \"clike\");\n});\n"]}