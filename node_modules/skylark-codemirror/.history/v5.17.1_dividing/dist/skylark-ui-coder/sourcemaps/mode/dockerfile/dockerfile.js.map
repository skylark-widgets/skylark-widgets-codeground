{"version":3,"sources":["mode/dockerfile/dockerfile.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","instructions","instructionRegex","join","instructionOnlyLine","RegExp","instructionWithArguments","defineSimpleMode","start","regex","token","next","arguments","meta","lineComment","defineMIME"],"mappings":";;;;;;;CAGA,SAAUA,GACc,gBAAXC,UAAwC,gBAAVC,QACvCF,EAAIG,QAAQ,eAAgBA,QAAQ,4BACZ,kBAAVC,SAAwBA,OAAOC,IAC7CD,QAAQ,cAAe,2BAA4BJ,GAEnDA,EAAIM,aACL,SAASA,GACV,YAGA,IAAIC,IAAgB,OAAQ,aAAc,MAAO,MAAO,SAAU,MAC9C,MAAO,OAAQ,aAAc,SAAU,OACvC,UAAW,WAC3BC,EAAmB,IAAMD,EAAaE,KAAK,KAAO,IAClDC,EAAsB,GAAIC,QAAOH,EAAmB,QAAS,KAC7DI,EAA2B,GAAID,QAAOH,EAAmB,SAAU,IAEvEF,GAAWO,iBAAiB,cAC1BC,QAGIC,MAAO,OACPC,MAAO,YAIPD,MAAOL,EACPM,MAAO,eAIPD,MAAOH,EACPI,OAAQ,aAAc,MACtBC,KAAM,cAGNF,MAAO,IACPC,MAAO,OAGXE,YAGIH,MAAO,OACPC,MAAO,QACPC,KAAM,UAGNF,MAAO,WACPC,MAAO,OAIPD,MAAO,QACPC,MAAO,KACPC,KAAM,UAGNF,MAAO,IACPC,MAAO,KACPC,KAAM,UAIND,MAAO,KACPC,KAAM,UAGRE,MACIC,YAAa,OAIrBd,EAAWe,WAAW,oBAAqB","file":"../../../mode/dockerfile/dockerfile.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../Coder\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../Coder\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  // Collect all Dockerfile directives\n  var instructions = [\"from\", \"maintainer\", \"run\", \"cmd\", \"expose\", \"env\",\n                      \"add\", \"copy\", \"entrypoint\", \"volume\", \"user\",\n                      \"workdir\", \"onbuild\"],\n      instructionRegex = \"(\" + instructions.join('|') + \")\",\n      instructionOnlyLine = new RegExp(instructionRegex + \"\\\\s*$\", \"i\"),\n      instructionWithArguments = new RegExp(instructionRegex + \"(\\\\s+)\", \"i\");\n\n  CodeMirror.defineSimpleMode(\"dockerfile\", {\n    start: [\n      // Block comment: This is a line starting with a comment\n      {\n        regex: /#.*$/,\n        token: \"comment\"\n      },\n      // Highlight an instruction without any arguments (for convenience)\n      {\n        regex: instructionOnlyLine,\n        token: \"variable-2\"\n      },\n      // Highlight an instruction followed by arguments\n      {\n        regex: instructionWithArguments,\n        token: [\"variable-2\", null],\n        next: \"arguments\"\n      },\n      {\n        regex: /./,\n        token: null\n      }\n    ],\n    arguments: [\n      {\n        // Line comment without instruction arguments is an error\n        regex: /#.*$/,\n        token: \"error\",\n        next: \"start\"\n      },\n      {\n        regex: /[^#]+\\\\$/,\n        token: null\n      },\n      {\n        // Match everything except for the inline comment\n        regex: /[^#]+/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /$/,\n        token: null,\n        next: \"start\"\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n      meta: {\n          lineComment: \"#\"\n      }\n  });\n\n  CodeMirror.defineMIME(\"text/x-dockerfile\", \"dockerfile\");\n});\n"]}