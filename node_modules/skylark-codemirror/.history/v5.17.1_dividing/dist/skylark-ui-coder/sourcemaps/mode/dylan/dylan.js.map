{"version":3,"sources":["mode/dylan/dylan.js"],"names":["define","CodeMirror","defineMode","_config","chain","stream","state","f","tokenize","tokenBase","ch","peek","next","tokenString","eat","tokenComment","skipToEnd","backUp","test","match","eatWhile","indexOf","name","patterns","hasOwnProperty","pattern","Array","some","p","patternStyles","wordLookup","current","styleLookup","symbol","maybeEnd","maybeNested","nestedCount","quote","style","escaped","end","words","unnamedDefinition","namedDefinition","typeParameterizedDefinition","otherParameterizedDefinition","constantSimpleDefinition","variableSimpleDefinition","otherSimpleDefinition","statement","separator","other","signalingCalls","concat","symbolPattern","RegExp","symbolKeyword","symbolClass","symbolGlobal","symbolConstant","patternName","styles","forEach","type","word","startState","currentIndent","token","eatSpace","blockCommentStart","blockCommentEnd","defineMIME"],"mappings":"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","file":"../../../mode/dylan/dylan.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"dylan\", function(_config) {\n  // Words\n  var words = {\n    // Words that introduce unnamed definitions like \"define interface\"\n    unnamedDefinition: [\"interface\"],\n\n    // Words that introduce simple named definitions like \"define library\"\n    namedDefinition: [\"module\", \"library\", \"macro\",\n                      \"C-struct\", \"C-union\",\n                      \"C-function\", \"C-callable-wrapper\"\n                     ],\n\n    // Words that introduce type definitions like \"define class\".\n    // These are also parameterized like \"define method\" and are\n    // appended to otherParameterizedDefinitionWords\n    typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n\n    // Words that introduce trickier definitions like \"define method\".\n    // These require special definitions to be added to startExpressions\n    otherParameterizedDefinition: [\"method\", \"function\",\n                                   \"C-variable\", \"C-address\"\n                                  ],\n\n    // Words that introduce module constant definitions.\n    // These must also be simple definitions and are\n    // appended to otherSimpleDefinitionWords\n    constantSimpleDefinition: [\"constant\"],\n\n    // Words that introduce module variable definitions.\n    // These must also be simple definitions and are\n    // appended to otherSimpleDefinitionWords\n    variableSimpleDefinition: [\"variable\"],\n\n    // Other words that introduce simple definitions\n    // (without implicit bodies).\n    otherSimpleDefinition: [\"generic\", \"domain\",\n                            \"C-pointer-type\",\n                            \"table\"\n                           ],\n\n    // Words that begin statements with implicit bodies.\n    statement: [\"if\", \"block\", \"begin\", \"method\", \"case\",\n                \"for\", \"select\", \"when\", \"unless\", \"until\",\n                \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"\n               ],\n\n    // Patterns that act as separators in compound statements.\n    // This may include any general pattern that must be indented\n    // specially.\n    separator: [\"finally\", \"exception\", \"cleanup\", \"else\",\n                \"elseif\", \"afterwards\"\n               ],\n\n    // Keywords that do not require special indentation handling,\n    // but which should be highlighted\n    other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\",\n            \"instance\", \"let\", \"local\", \"otherwise\", \"slot\",\n            \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"\n           ],\n\n    // Condition signaling function calls\n    signalingCalls: [\"signal\", \"error\", \"cerror\",\n                     \"break\", \"check-type\", \"abort\"\n                    ]\n  };\n\n  words[\"otherDefinition\"] =\n    words[\"unnamedDefinition\"]\n    .concat(words[\"namedDefinition\"])\n    .concat(words[\"otherParameterizedDefinition\"]);\n\n  words[\"definition\"] =\n    words[\"typeParameterizedDefinition\"]\n    .concat(words[\"otherDefinition\"]);\n\n  words[\"parameterizedDefinition\"] =\n    words[\"typeParameterizedDefinition\"]\n    .concat(words[\"otherParameterizedDefinition\"]);\n\n  words[\"simpleDefinition\"] =\n    words[\"constantSimpleDefinition\"]\n    .concat(words[\"variableSimpleDefinition\"])\n    .concat(words[\"otherSimpleDefinition\"]);\n\n  words[\"keyword\"] =\n    words[\"statement\"]\n    .concat(words[\"separator\"])\n    .concat(words[\"other\"]);\n\n  // Patterns\n  var symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\n  var symbol = new RegExp(\"^\" + symbolPattern);\n  var patterns = {\n    // Symbols with special syntax\n    symbolKeyword: symbolPattern + \":\",\n    symbolClass: \"<\" + symbolPattern + \">\",\n    symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n    symbolConstant: \"\\\\$\" + symbolPattern\n  };\n  var patternStyles = {\n    symbolKeyword: \"atom\",\n    symbolClass: \"tag\",\n    symbolGlobal: \"variable-2\",\n    symbolConstant: \"variable-3\"\n  };\n\n  // Compile all patterns to regular expressions\n  for (var patternName in patterns)\n    if (patterns.hasOwnProperty(patternName))\n      patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n\n  // Names beginning \"with-\" and \"without-\" are commonly\n  // used as statement macro\n  patterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n\n  var styles = {};\n  styles[\"keyword\"] = \"keyword\";\n  styles[\"definition\"] = \"def\";\n  styles[\"simpleDefinition\"] = \"def\";\n  styles[\"signalingCalls\"] = \"builtin\";\n\n  // protected words lookup table\n  var wordLookup = {};\n  var styleLookup = {};\n\n  [\n    \"keyword\",\n    \"definition\",\n    \"simpleDefinition\",\n    \"signalingCalls\"\n  ].forEach(function(type) {\n    words[type].forEach(function(word) {\n      wordLookup[word] = type;\n      styleLookup[word] = styles[type];\n    });\n  });\n\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenBase(stream, state) {\n    // String\n    var ch = stream.peek();\n    if (ch == \"'\" || ch == '\"') {\n      stream.next();\n      return chain(stream, state, tokenString(ch, \"string\"));\n    }\n    // Comment\n    else if (ch == \"/\") {\n      stream.next();\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      stream.backUp(1);\n    }\n    // Decimal\n    else if (/[+\\-\\d\\.]/.test(ch)) {\n      if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||\n          stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||\n          stream.match(/^[+-]?\\d+/)) {\n        return \"number\";\n      }\n    }\n    // Hash\n    else if (ch == \"#\") {\n      stream.next();\n      // Symbol with string syntax\n      ch = stream.peek();\n      if (ch == '\"') {\n        stream.next();\n        return chain(stream, state, tokenString('\"', \"string\"));\n      }\n      // Binary number\n      else if (ch == \"b\") {\n        stream.next();\n        stream.eatWhile(/[01]/);\n        return \"number\";\n      }\n      // Hex number\n      else if (ch == \"x\") {\n        stream.next();\n        stream.eatWhile(/[\\da-f]/i);\n        return \"number\";\n      }\n      // Octal number\n      else if (ch == \"o\") {\n        stream.next();\n        stream.eatWhile(/[0-7]/);\n        return \"number\";\n      }\n      // Token concatenation in macros\n      else if (ch == '#') {\n        stream.next();\n        return \"punctuation\";\n      }\n      // Sequence literals\n      else if ((ch == '[') || (ch == '(')) {\n        stream.next();\n        return \"bracket\";\n      // Hash symbol\n      } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n        return \"atom\";\n      } else {\n        stream.eatWhile(/[-a-zA-Z]/);\n        return \"error\";\n      }\n    } else if (ch == \"~\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        ch = stream.peek();\n        if (ch == \"=\") {\n          stream.next();\n          return \"operator\";\n        }\n        return \"operator\";\n      }\n      return \"operator\";\n    } else if (ch == \":\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        return \"operator\";\n      } else if (ch == \":\") {\n        stream.next();\n        return \"punctuation\";\n      }\n    } else if (\"[](){}\".indexOf(ch) != -1) {\n      stream.next();\n      return \"bracket\";\n    } else if (\".,\".indexOf(ch) != -1) {\n      stream.next();\n      return \"punctuation\";\n    } else if (stream.match(\"end\")) {\n      return \"keyword\";\n    }\n    for (var name in patterns) {\n      if (patterns.hasOwnProperty(name)) {\n        var pattern = patterns[name];\n        if ((pattern instanceof Array && pattern.some(function(p) {\n          return stream.match(p);\n        })) || stream.match(pattern))\n          return patternStyles[name];\n      }\n    }\n    if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n      stream.next();\n      return \"operator\";\n    }\n    if (stream.match(\"define\")) {\n      return \"def\";\n    } else {\n      stream.eatWhile(/[\\w\\-]/);\n      // Keyword\n      if (wordLookup[stream.current()]) {\n        return styleLookup[stream.current()];\n      } else if (stream.current().match(symbol)) {\n        return \"variable\";\n      } else {\n        stream.next();\n        return \"variable-2\";\n      }\n    }\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n    while ((ch = stream.next())) {\n      if (ch == \"/\" && maybeEnd) {\n        if (nestedCount > 0) {\n          nestedCount--;\n        } else {\n          state.tokenize = tokenBase;\n          break;\n        }\n      } else if (ch == \"*\" && maybeNested) {\n        nestedCount++;\n      }\n      maybeEnd = (ch == \"*\");\n      maybeNested = (ch == \"/\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote, style) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) {\n        state.tokenize = tokenBase;\n      }\n      return style;\n    };\n  }\n\n  // Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        currentIndent: 0\n      };\n    },\n    token: function(stream, state) {\n      if (stream.eatSpace())\n        return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    },\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-dylan\", \"dylan\");\n\n});\n"]}