{"version":3,"sources":["mode/ebnf/ebnf.js"],"names":["define","CodeMirror","defineMode","config","commentType","slash","parenthesis","stateType","comment","_string","characterClass","bracesMode","getMode","startState","stringType","braced","lhs","localState","stack","inDefinition","token","stream","state","length","peek","next","unshift","match","eol","shift","text","current","i","skipToEnd","indexOf","eatSpace","defineMIME"],"mappings":"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","file":"../../../mode/ebnf/ebnf.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ebnf\", function (config) {\n    var commentType = {slash: 0, parenthesis: 1};\n    var stateType = {comment: 0, _string: 1, characterClass: 2};\n    var bracesMode = null;\n\n    if (config.bracesMode)\n      bracesMode = CodeMirror.getMode(config, config.bracesMode);\n\n    return {\n      startState: function () {\n        return {\n          stringType: null,\n          commentType: null,\n          braced: 0,\n          lhs: true,\n          localState: null,\n          stack: [],\n          inDefinition: false\n        };\n      },\n      token: function (stream, state) {\n        if (!stream) return;\n\n        //check for state changes\n        if (state.stack.length === 0) {\n          //strings\n          if ((stream.peek() == '\"') || (stream.peek() == \"'\")) {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n            state.stack.unshift(stateType._string);\n          } else if (stream.match(/^\\/\\*/)) { //comments starting with /*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.slash;\n          } else if (stream.match(/^\\(\\*/)) { //comments starting with (*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.parenthesis;\n          }\n        }\n\n        //return state\n        //stack has\n        switch (state.stack[0]) {\n        case stateType._string:\n          while (state.stack[0] === stateType._string && !stream.eol()) {\n            if (stream.peek() === state.stringType) {\n              stream.next(); // Skip quote\n              state.stack.shift(); // Clear flag\n            } else if (stream.peek() === \"\\\\\") {\n              stream.next();\n              stream.next();\n            } else {\n              stream.match(/^.[^\\\\\\\"\\']*/);\n            }\n          }\n          return state.lhs ? \"property string\" : \"string\"; // Token style\n\n        case stateType.comment:\n          while (state.stack[0] === stateType.comment && !stream.eol()) {\n            if (state.commentType === commentType.slash && stream.match(/\\*\\//)) {\n              state.stack.shift(); // Clear flag\n              state.commentType = null;\n            } else if (state.commentType === commentType.parenthesis && stream.match(/\\*\\)/)) {\n              state.stack.shift(); // Clear flag\n              state.commentType = null;\n            } else {\n              stream.match(/^.[^\\*]*/);\n            }\n          }\n          return \"comment\";\n\n        case stateType.characterClass:\n          while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n            if (!(stream.match(/^[^\\]\\\\]+/) || stream.match(/^\\\\./))) {\n              state.stack.shift();\n            }\n          }\n          return \"operator\";\n        }\n\n        var peek = stream.peek();\n\n        if (bracesMode !== null && (state.braced || peek === \"{\")) {\n          if (state.localState === null)\n            state.localState = CodeMirror.startState(bracesMode);\n\n          var token = bracesMode.token(stream, state.localState),\n          text = stream.current();\n\n          if (!token) {\n            for (var i = 0; i < text.length; i++) {\n              if (text[i] === \"{\") {\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n                state.braced++;\n              } else if (text[i] === \"}\") {\n                state.braced--;\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n              }\n            }\n          }\n          return token;\n        }\n\n        //no stack\n        switch (peek) {\n        case \"[\":\n          stream.next();\n          state.stack.unshift(stateType.characterClass);\n          return \"bracket\";\n        case \":\":\n        case \"|\":\n        case \";\":\n          stream.next();\n          return \"operator\";\n        case \"%\":\n          if (stream.match(\"%%\")) {\n            return \"header\";\n          } else if (stream.match(/[%][A-Za-z]+/)) {\n            return \"keyword\";\n          } else if (stream.match(/[%][}]/)) {\n            return \"matchingbracket\";\n          }\n          break;\n        case \"/\":\n          if (stream.match(/[\\/][A-Za-z]+/)) {\n          return \"keyword\";\n        }\n        case \"\\\\\":\n          if (stream.match(/[\\][a-z]+/)) {\n            return \"string-2\";\n          }\n        case \".\":\n          if (stream.match(\".\")) {\n            return \"atom\";\n          }\n        case \"*\":\n        case \"-\":\n        case \"+\":\n        case \"^\":\n          if (stream.match(peek)) {\n            return \"atom\";\n          }\n        case \"$\":\n          if (stream.match(\"$$\")) {\n            return \"builtin\";\n          } else if (stream.match(/[$][0-9]+/)) {\n            return \"variable-3\";\n          }\n        case \"<\":\n          if (stream.match(/<<[a-zA-Z_]+>>/)) {\n            return \"builtin\";\n          }\n        }\n\n        if (stream.match(/^\\/\\//)) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match(/return/)) {\n          return \"operator\";\n        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n          if (stream.match(/(?=[\\(.])/)) {\n            return \"variable\";\n          } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n            return \"def\";\n          }\n          return \"variable-2\";\n        } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n          stream.next();\n          return \"bracket\";\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n        return null;\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-ebnf\", \"ebnf\");\n});\n"]}