{"version":3,"sources":["mode/elm/elm.js"],"names":["define","CodeMirror","defineMode","switchState","source","setState","f","normal","eatWhile","whiteCharRE","ch","next","specialRE","test","eat","t","ncomment","stringLiteral","largeRE","idRE","smallRE","isDef","pos","digitRE","hexitRE","octitRE","symbolRE","skipToEnd","type","nest","currNest","eol","stringGap","wellKnownWords","wkw","keywords","i","length","startState","copyState","s","token","stream","state","w","current","hasOwnProperty","defineMIME"],"mappings":"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","file":"../../../mode/elm/elm.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"elm\", function() {\n\n    function switchState(source, setState, f) {\n      setState(f);\n      return f(source, setState);\n    }\n\n    // These should all be Unicode extended, as per the Haskell 2010 report\n    var smallRE = /[a-z_]/;\n    var largeRE = /[A-Z]/;\n    var digitRE = /[0-9]/;\n    var hexitRE = /[0-9A-Fa-f]/;\n    var octitRE = /[0-7]/;\n    var idRE = /[a-z_A-Z0-9\\']/;\n    var symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:\\u03BB\\u2192]/;\n    var specialRE = /[(),;[\\]`{}]/;\n    var whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\n    function normal() {\n      return function (source, setState) {\n        if (source.eatWhile(whiteCharRE)) {\n          return null;\n        }\n\n        var ch = source.next();\n        if (specialRE.test(ch)) {\n          if (ch == '{' && source.eat('-')) {\n            var t = \"comment\";\n            if (source.eat('#')) t = \"meta\";\n            return switchState(source, setState, ncomment(t, 1));\n          }\n          return null;\n        }\n\n        if (ch == '\\'') {\n          if (source.eat('\\\\'))\n            source.next();  // should handle other escapes here\n          else\n            source.next();\n\n          if (source.eat('\\''))\n            return \"string\";\n          return \"error\";\n        }\n\n        if (ch == '\"') {\n          return switchState(source, setState, stringLiteral);\n        }\n\n        if (largeRE.test(ch)) {\n          source.eatWhile(idRE);\n          if (source.eat('.'))\n            return \"qualifier\";\n          return \"variable-2\";\n        }\n\n        if (smallRE.test(ch)) {\n          var isDef = source.pos === 1;\n          source.eatWhile(idRE);\n          return isDef ? \"variable-3\" : \"variable\";\n        }\n\n        if (digitRE.test(ch)) {\n          if (ch == '0') {\n            if (source.eat(/[xX]/)) {\n              source.eatWhile(hexitRE); // should require at least 1\n              return \"integer\";\n            }\n            if (source.eat(/[oO]/)) {\n              source.eatWhile(octitRE); // should require at least 1\n              return \"number\";\n            }\n          }\n          source.eatWhile(digitRE);\n          var t = \"number\";\n          if (source.eat('.')) {\n            t = \"number\";\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          if (source.eat(/[eE]/)) {\n            t = \"number\";\n            source.eat(/[-+]/);\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          return t;\n        }\n\n        if (symbolRE.test(ch)) {\n          if (ch == '-' && source.eat(/-/)) {\n            source.eatWhile(/-/);\n            if (!source.eat(symbolRE)) {\n              source.skipToEnd();\n              return \"comment\";\n            }\n          }\n          source.eatWhile(symbolRE);\n          return \"builtin\";\n        }\n\n        return \"error\";\n      }\n    }\n\n    function ncomment(type, nest) {\n      if (nest == 0) {\n        return normal();\n      }\n      return function(source, setState) {\n        var currNest = nest;\n        while (!source.eol()) {\n          var ch = source.next();\n          if (ch == '{' && source.eat('-')) {\n            ++currNest;\n          } else if (ch == '-' && source.eat('}')) {\n            --currNest;\n            if (currNest == 0) {\n              setState(normal());\n              return type;\n            }\n          }\n        }\n        setState(ncomment(type, currNest));\n        return type;\n      }\n    }\n\n    function stringLiteral(source, setState) {\n      while (!source.eol()) {\n        var ch = source.next();\n        if (ch == '\"') {\n          setState(normal());\n          return \"string\";\n        }\n        if (ch == '\\\\') {\n          if (source.eol() || source.eat(whiteCharRE)) {\n            setState(stringGap);\n            return \"string\";\n          }\n          if (!source.eat('&')) source.next(); // should handle other escapes here\n        }\n      }\n      setState(normal());\n      return \"error\";\n    }\n\n    function stringGap(source, setState) {\n      if (source.eat('\\\\')) {\n        return switchState(source, setState, stringLiteral);\n      }\n      source.next();\n      setState(normal());\n      return \"error\";\n    }\n\n\n    var wellKnownWords = (function() {\n      var wkw = {};\n\n      var keywords = [\n        \"case\", \"of\", \"as\",\n        \"if\", \"then\", \"else\",\n        \"let\", \"in\",\n        \"infix\", \"infixl\", \"infixr\",\n        \"type\", \"alias\",\n        \"input\", \"output\", \"foreign\", \"loopback\",\n        \"module\", \"where\", \"import\", \"exposing\",\n        \"_\", \"..\", \"|\", \":\", \"=\", \"\\\\\", \"\\\"\", \"->\", \"<-\"\n      ];\n\n      for (var i = keywords.length; i--;)\n        wkw[keywords[i]] = \"keyword\";\n\n      return wkw;\n    })();\n\n\n\n    return {\n      startState: function ()  { return { f: normal() }; },\n      copyState:  function (s) { return { f: s.f }; },\n\n      token: function(stream, state) {\n        var t = state.f(stream, function(s) { state.f = s; });\n        var w = stream.current();\n        return (wellKnownWords.hasOwnProperty(w)) ? wellKnownWords[w] : t;\n      }\n    };\n\n  });\n\n  CodeMirror.defineMIME(\"text/x-elm\", \"elm\");\n});\n"]}