{"version":3,"sources":["mode/factor/factor.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineSimpleMode","start","regex","token","next","vocabulary","string","string3","stack","meta","dontIndentStates","lineComment","defineMIME"],"mappings":";;;;;;;CAOA,SAAUA,GACc,gBAAXC,UAAwC,gBAAVC,QACvCF,EAAIG,QAAQ,eAAgBA,QAAQ,4BACZ,kBAAVC,SAAwBA,OAAOC,IAC7CD,QAAQ,cAAe,2BAA4BJ,GAEnDA,EAAIM,aACL,SAASA,GACV,YAEAA,GAAWC,iBAAiB,UAE1BC,QAEGC,MAAO,QAASC,MAAO,YAEvBD,MAAO,MAAOC,MAAO,SAAUC,KAAM,YACrCF,MAAO,IAAKC,MAAO,SAAUC,KAAM,WAEnCF,MAAO,kEAAmEC,MAAO,WAGjFD,MAAO,0BAA2BC,OAAQ,UAAW,KAAM,MAAO,KAAM,WAAYC,KAAM,UAE1FF,MAAO,UAAWC,MAAO,UAAWC,KAAM,eAE1CF,MAAO,yBAA0BC,OAAQ,UAAW,KAAM,gBAE1DD,MAAO,QAASC,MAAO,YAEvBD,MAAO,gCAAiCC,MAAO,YAE/CD,MAAO,MAAOC,MAAO,aAGpBD,MAAO,IACPC,MAAO,OAGXE,aACGH,MAAO,IAAKC,MAAO,UAAWC,KAAM,UACpCF,MAAO,MAAOC,MAAO,eAEpBD,MAAO,IACPC,MAAO,OAGXG,SACGJ,MAAO,mBAAoBC,MAAO,SAAUC,KAAM,UAClDF,MAAO,KAAMC,MAAO,WAEvBI,UACGL,MAAO,qBAAsBC,MAAO,SAAUC,KAAM,UACpDF,MAAO,KAAMC,MAAO,WAEvBK,QACGN,MAAO,KAAMC,MAAO,OAAQC,KAAM,UAClCF,MAAO,KAAMC,MAAO,SACpBD,MAAO,MAAOC,MAAO,eAEpBD,MAAO,IACPC,MAAO,OAOXM,MACEC,kBAAmB,QAAS,aAAc,SAAU,UAAW,SAC/DC,aAAe,IAAK,SAIxBZ,EAAWa,WAAW,gBAAiB","file":"../../../mode/factor/factor.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Factor syntax highlight - simple mode\n//\n// by Dimage Sapelkin (https://github.com/kerabromsmu)\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../Coder\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../Coder\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"factor\", {\n    // The start state contains the rules that are intially used\n    start: [\n      // comments\n      {regex: /#?!.*/, token: \"comment\"},\n      // strings \"\"\", multiline --> state\n      {regex: /\"\"\"/, token: \"string\", next: \"string3\"},\n      {regex: /\"/, token: \"string\", next: \"string\"},\n      // numbers: dec, hex, unicode, bin, fractional, complex\n      {regex: /(?:[+-]?)(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\d+.?\\d*)/, token: \"number\"},\n      //{regex: /[+-]?/} //fractional\n      // definition: defining word, defined word, etc\n      {regex: /(\\:)(\\s+)(\\S+)(\\s+)(\\()/, token: [\"keyword\", null, \"def\", null, \"keyword\"], next: \"stack\"},\n      // vocabulary using --> state\n      {regex: /USING\\:/, token: \"keyword\", next: \"vocabulary\"},\n      // vocabulary definition/use\n      {regex: /(USE\\:|IN\\:)(\\s+)(\\S+)/, token: [\"keyword\", null, \"variable-2\"]},\n      // <constructors>\n      {regex: /<\\S+>/, token: \"builtin\"},\n      // \"keywords\", incl. ; t f . [ ] { } defining words\n      {regex: /;|t|f|if|\\.|\\[|\\]|\\{|\\}|MAIN:/, token: \"keyword\"},\n      // any id (?)\n      {regex: /\\S+/, token: \"variable\"},\n\n      {\n        regex: /./,\n        token: null\n      }\n    ],\n    vocabulary: [\n      {regex: /;/, token: \"keyword\", next: \"start\"},\n      {regex: /\\S+/, token: \"variable-2\"},\n      {\n        regex: /./,\n        token: null\n      }\n    ],\n    string: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string3: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    stack: [\n      {regex: /\\)/, token: \"meta\", next: \"start\"},\n      {regex: /--/, token: \"meta\"},\n      {regex: /\\S+/, token: \"variable-3\"},\n      {\n        regex: /./,\n        token: null\n      }\n    ],\n    // The meta property contains global information about the mode. It\n    // can contain properties like lineComment, which are supported by\n    // all modes, and also directives like dontIndentStates, which are\n    // specific to simple modes.\n    meta: {\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      lineComment: [ \"!\", \"#!\" ]\n    }\n  });\n\n  CodeMirror.defineMIME(\"text/x-factor\", \"factor\");\n});\n"]}