{"version":3,"sources":["mode/fcl/fcl.js"],"names":["define","CodeMirror","defineMode","config","tokenBase","stream","state","ch","next","test","match","eat","tokenize","tokenComment","skipToEnd","isOperatorChar","eatWhile","cur","current","toLowerCase","keywords","propertyIsEnumerable","start_blocks","end_blocks","atoms","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","t","indentUnit","term","method","accu","rule","then","is","and","or","if","default","var_input","var_output","fuzzify","defuzzify","function_block","ruleblock","end_ruleblock","end_defuzzify","end_function_block","end_fuzzify","end_var","true","false","nan","real","min","max","cog","cogs","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","closing","electricChars","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GACjC,YAEAA,GAAWC,WAAW,MAAO,SAASC,GAkCpC,QAASC,GAAUC,EAAQC,GACzB,GAAIC,GAAKF,EAAOG,MAEhB,IAAI,SAASC,KAAKF,GAQhB,MAPU,KAANA,EACFF,EAAOK,MAAM,8BACE,KAANH,EACTF,EAAOK,MAAM,sBAAwBL,EAAOK,MAAM,YAElDL,EAAOK,MAAM,uCAER,QAGT,IAAU,KAANH,GAAmB,KAANA,EAAW,CAC1B,GAAIF,EAAOM,IAAI,KAEb,MADAL,GAAMM,SAAWC,EACVA,EAAaR,EAAQC,EAE9B,IAAID,EAAOM,IAAI,KAEb,MADAN,GAAOS,YACA,UAGX,GAAIC,EAAeN,KAAKF,GAEtB,MADAF,GAAOW,SAASD,GACT,UAETV,GAAOW,SAAS,qBAEhB,IAAIC,GAAMZ,EAAOa,UAAUC,aAC3B,OAAIC,GAASC,qBAAqBJ,IAC9BK,EAAaD,qBAAqBJ,IAClCM,EAAWF,qBAAqBJ,GAC3B,UAELO,EAAMH,qBAAqBJ,GAAa,OACrC,WAIT,QAASJ,GAAaR,EAAQC,GAE5B,IADA,GAAsBC,GAAlBkB,GAAW,EACRlB,EAAKF,EAAOG,QAAQ,CACzB,IAAW,KAAND,GAAmB,KAANA,IAAckB,EAAU,CACxCnB,EAAMM,SAAWR,CACjB,OAEFqB,EAAkB,KAANlB,EAEd,MAAO,UAGT,QAASmB,GAAQC,EAAUC,EAAQC,EAAMC,EAAOC,GAC9CC,KAAKL,SAAWA,EAChBK,KAAKJ,OAASA,EACdI,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,EACbE,KAAKD,KAAOA,EAGd,QAASE,GAAY3B,EAAO4B,EAAKL,GAC/B,MAAOvB,GAAM6B,QAAU,GAAIT,GAAQpB,EAAMqB,SAAUO,EAAKL,EAAM,KAAMvB,EAAM6B,SAG5E,QAASC,GAAW9B,GAClB,GAAKA,EAAM6B,QAAQJ,KAAnB,CACA,GAAIM,GAAI/B,EAAM6B,QAAQN,IAGtB,OAFS,aAALQ,IACF/B,EAAMqB,SAAWrB,EAAM6B,QAAQR,UAC1BrB,EAAM6B,QAAU7B,EAAM6B,QAAQJ,MAvGvC,GAAIO,GAAanC,EAAOmC,WAEpBlB,GACAmB,MAAQ,EACRC,QAAU,EAAMC,MAAQ,EACxBC,MAAQ,EAAMC,MAAQ,EAAMC,IAAM,EAAMC,KAAO,EAAMC,IAAM,EAC3DC,MAAM,EAAMC,WAAW,GAGvB1B,GACA2B,WAAa,EACbC,YAAc,EACdC,SAAW,EACXC,WAAa,EACbC,gBAAkB,EAClBC,WAAa,GAGb/B,GACAgC,eAAiB,EACjBC,eAAiB,EACjBC,oBAAsB,EACtBC,aAAe,EACfC,SAAW,GAGXnC,GACAoC,QAAQ,EAAMC,SAAS,EAAMC,KAAO,EACpCC,MAAQ,EAAMC,KAAO,EAAMC,KAAO,EAAMC,KAAO,EAAMC,MAAQ,GAG7DpD,EAAiB,mBA6ErB,QACEqD,WAAY,SAASC,GACnB,OACEzD,SAAU,KACVuB,QAAS,GAAIT,IAAS2C,GAAc,GAAK/B,EAAY,EAAG,QAAO,IAC/DX,SAAU,EACV2C,aAAa,IAIjBC,MAAO,SAASlE,EAAQC,GACpB,GAAIkE,GAAMlE,EAAM6B,OAMhB,IALI9B,EAAOoE,QACU,MAAbD,EAAI1C,QAAe0C,EAAI1C,OAAQ,GACnCxB,EAAMqB,SAAWtB,EAAOqE,cACxBpE,EAAMgE,aAAc,GAEpBjE,EAAOsE,WAAY,MAAO,KAE9B,IAAIC,IAAStE,EAAMM,UAAYR,GAAWC,EAAQC,EAClD,IAAa,WAATsE,EAAoB,MAAOA,EACd,OAAbJ,EAAI1C,QAAe0C,EAAI1C,OAAQ,EAEnC,IAAIb,GAAMZ,EAAOa,UAAUC,aAM3B,OAJIG,GAAaD,qBAAqBJ,GAAMgB,EAAY3B,EAAOD,EAAOuB,SAAU,aACvEL,EAAWF,qBAAqBJ,IAAOmB,EAAW9B,GAE3DA,EAAMgE,aAAc,EACbM,GAGXC,OAAQ,SAASvE,EAAOwE,GACtB,GAAIxE,EAAMM,UAAYR,GAA+B,MAAlBE,EAAMM,SAAkB,MAAO,EAClE,IAAI4D,GAAMlE,EAAM6B,QAEZ4C,EAAUxD,EAAWF,qBAAqByD,EAC9C,OAAIN,GAAI1C,MAAc0C,EAAI5C,QAAUmD,EAAU,EAAI,GACtCP,EAAI7C,UAAYoD,EAAU,EAAIzC,IAG5C0C,cAAe,MACfC,KAAM,QACNC,kBAAmB,KACnBC,gBAAiB,KACjBC,YAAa,QAIjBnF,EAAWoF,WAAW,aAAc","file":"../../../mode/fcl/fcl.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"fcl\", function(config) {\n  var indentUnit = config.indentUnit;\n\n  var keywords = {\n      \"term\": true,\n      \"method\": true, \"accu\": true,\n      \"rule\": true, \"then\": true, \"is\": true, \"and\": true, \"or\": true,\n      \"if\": true, \"default\": true\n  };\n\n  var start_blocks = {\n      \"var_input\": true,\n      \"var_output\": true,\n      \"fuzzify\": true,\n      \"defuzzify\": true,\n      \"function_block\": true,\n      \"ruleblock\": true\n  };\n\n  var end_blocks = {\n      \"end_ruleblock\": true,\n      \"end_defuzzify\": true,\n      \"end_function_block\": true,\n      \"end_fuzzify\": true,\n      \"end_var\": true\n  };\n\n  var atoms = {\n      \"true\": true, \"false\": true, \"nan\": true,\n      \"real\": true, \"min\": true, \"max\": true, \"cog\": true, \"cogs\": true\n  };\n\n  var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (/[\\d\\.]/.test(ch)) {\n      if (ch == \".\") {\n        stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n      } else if (ch == \"0\") {\n        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n      } else {\n        stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n      }\n      return \"number\";\n    }\n\n    if (ch == \"/\" || ch == \"(\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n\n    var cur = stream.current().toLowerCase();\n    if (keywords.propertyIsEnumerable(cur) ||\n        start_blocks.propertyIsEnumerable(cur) ||\n        end_blocks.propertyIsEnumerable(cur)) {\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n\n  function popContext(state) {\n    if (!state.context.prev) return;\n    var t = state.context.type;\n    if (t == \"end_block\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n            if (ctx.align == null) ctx.align = false;\n            state.indented = stream.indentation();\n            state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        var cur = stream.current().toLowerCase();\n\n        if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");\n        else if (end_blocks.propertyIsEnumerable(cur))  popContext(state);\n\n        state.startOfLine = false;\n        return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n      var ctx = state.context;\n\n      var closing = end_blocks.propertyIsEnumerable(textAfter);\n      if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"ryk\",\n    fold: \"brace\",\n    blockCommentStart: \"(*\",\n    blockCommentEnd: \"*)\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-fcl\", \"fcl\");\n});\n"]}