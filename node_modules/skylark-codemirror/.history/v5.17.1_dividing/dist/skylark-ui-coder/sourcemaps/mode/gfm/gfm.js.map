{"version":3,"sources":["mode/gfm/gfm.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","urlRE","defineMode","config","modeConfig","blankLine","state","code","codeDepth","gfmOverlay","startState","codeBlock","ateSpace","copyState","s","token","stream","combineTokens","match","skipToEnd","sol","peek","next","before","pos","eatWhile","difference","eatSpace","gitHubSpice","string","slice","start","test","charAt","markdownConfig","underscoresBreakWords","taskLists","fencedCodeBlocks","strikethrough","attr","name","overlayMode","getMode","defineMIME"],"mappings":";;;;;;;CAGA,SAAUA,GACc,gBAAXC,UAAwC,gBAAVC,QACvCF,EAAIG,QAAQ,eAAgBA,QAAQ,wBAAyBA,QAAQ,6BAC7C,kBAAVC,SAAwBA,OAAOC,IAC7CD,QAAQ,cAAe,uBAAwB,4BAA6BJ,GAE5EA,EAAIM,aACL,SAASA,GACZ,YAEA,IAAIC,GAAQ,+mCAEZD,GAAWE,WAAW,MAAO,SAASC,EAAQC,GAE5C,QAASC,GAAUC,GAEjB,MADAA,GAAMC,MAAO,EACN,KAHT,GAAIC,GAAY,EAKZC,GACFC,WAAY,WACV,OACEH,MAAM,EACNI,WAAW,EACXC,UAAU,IAGdC,UAAW,SAASC,GAClB,OACEP,KAAMO,EAAEP,KACRI,UAAWG,EAAEH,UACbC,SAAUE,EAAEF,WAGhBG,MAAO,SAASC,EAAQV,GAItB,GAHAA,EAAMW,cAAgB,KAGlBX,EAAMK,UACR,MAAIK,GAAOE,MAAM,UACfZ,EAAMK,WAAY,EACX,OAETK,EAAOG,YACA,KAKT,IAHIH,EAAOI,QACTd,EAAMC,MAAO,GAEXS,EAAOI,OAASJ,EAAOE,MAAM,SAG/B,MAFAF,GAAOG,YACPb,EAAMK,WAAY,EACX,IAGT,IAAsB,MAAlBK,EAAOK,OAAgB,CACzBL,EAAOM,MACP,IAAIC,GAASP,EAAOQ,GACpBR,GAAOS,SAAS,IAChB,IAAIC,GAAa,EAAIV,EAAOQ,IAAMD,CASlC,OARKjB,GAAMC,KAILmB,IAAelB,IACjBF,EAAMC,MAAO,IAJfC,EAAYkB,EACZpB,EAAMC,MAAO,GAMR,KACF,GAAID,EAAMC,KAEf,MADAS,GAAOM,OACA,IAGT,IAAIN,EAAOW,WAET,MADArB,GAAMM,UAAW,EACV,IAET,KAAII,EAAOI,OAASd,EAAMM,YACxBN,EAAMM,UAAW,EACbR,EAAWwB,eAAgB,GAAO,CACpC,GAAGZ,EAAOE,MAAM,oEAKd,MADAZ,GAAMW,eAAgB,EACf,MACF,IAAID,EAAOE,MAAM,wDAKtB,MADAZ,GAAMW,eAAgB,EACf,OAIb,MAAID,GAAOE,MAAMjB,IAC0C,MAAvDe,EAAOa,OAAOC,MAAMd,EAAOe,MAAQ,EAAGf,EAAOe,SAC5B,GAAhBf,EAAOe,OAAc,KAAKC,KAAKhB,EAAOa,OAAOI,OAAOjB,EAAOe,MAAQ,MAKtEzB,EAAMW,eAAgB,EACf,SAETD,EAAOM,OACA,OAETjB,UAAWA,GAGT6B,GACFC,uBAAuB,EACvBC,WAAW,EACXC,iBAAkB,MAClBC,eAAe,EAEjB,KAAK,GAAIC,KAAQnC,GACf8B,EAAeK,GAAQnC,EAAWmC,EAGpC,OADAL,GAAeM,KAAO,WACfxC,EAAWyC,YAAYzC,EAAW0C,QAAQvC,EAAQ+B,GAAiBzB,IAEzE,YAEDT,EAAW2C,WAAW,aAAc","file":"../../../mode/gfm/gfm.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../Coder\"), require(\"../markdown/markdown\"), require(\"../../addon/mode/overlay\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../Coder\", \"../markdown/markdown\", \"../../addon/mode/overlay\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar urlRE = /^((?:(?:aaas?|about|acap|adiumxtra|af[ps]|aim|apt|attachment|aw|beshare|bitcoin|bolo|callto|cap|chrome(?:-extension)?|cid|coap|com-eventbrite-attendee|content|crid|cvs|data|dav|dict|dlna-(?:playcontainer|playsingle)|dns|doi|dtn|dvb|ed2k|facetime|feed|file|finger|fish|ftp|geo|gg|git|gizmoproject|go|gopher|gtalk|h323|hcp|https?|iax|icap|icon|im|imap|info|ipn|ipp|irc[6s]?|iris(?:\\.beep|\\.lwz|\\.xpc|\\.xpcs)?|itms|jar|javascript|jms|keyparc|lastfm|ldaps?|magnet|mailto|maps|market|message|mid|mms|ms-help|msnim|msrps?|mtqp|mumble|mupdate|mvn|news|nfs|nih?|nntp|notes|oid|opaquelocktoken|palm|paparazzi|platform|pop|pres|proxy|psyc|query|res(?:ource)?|rmi|rsync|rtmp|rtsp|secondlife|service|session|sftp|sgn|shttp|sieve|sips?|skype|sm[bs]|snmp|soap\\.beeps?|soldat|spotify|ssh|steam|svn|tag|teamspeak|tel(?:net)?|tftp|things|thismessage|tip|tn3270|tv|udp|unreal|urn|ut2004|vemmi|ventrilo|view-source|webcal|wss?|wtai|wyciwyg|xcon(?:-userid)?|xfire|xmlrpc\\.beeps?|xmpp|xri|ymsgr|z39\\.50[rs]?):(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\([^\\s()<>]*\\))+(?:\\([^\\s()<>]*\\)|[^\\s`*!()\\[\\]{};:'\".,<>?«»“”‘’]))/i\n\nCodeMirror.defineMode(\"gfm\", function(config, modeConfig) {\n  var codeDepth = 0;\n  function blankLine(state) {\n    state.code = false;\n    return null;\n  }\n  var gfmOverlay = {\n    startState: function() {\n      return {\n        code: false,\n        codeBlock: false,\n        ateSpace: false\n      };\n    },\n    copyState: function(s) {\n      return {\n        code: s.code,\n        codeBlock: s.codeBlock,\n        ateSpace: s.ateSpace\n      };\n    },\n    token: function(stream, state) {\n      state.combineTokens = null;\n\n      // Hack to prevent formatting override inside code blocks (block and inline)\n      if (state.codeBlock) {\n        if (stream.match(/^```+/)) {\n          state.codeBlock = false;\n          return null;\n        }\n        stream.skipToEnd();\n        return null;\n      }\n      if (stream.sol()) {\n        state.code = false;\n      }\n      if (stream.sol() && stream.match(/^```+/)) {\n        stream.skipToEnd();\n        state.codeBlock = true;\n        return null;\n      }\n      // If this block is changed, it may need to be updated in Markdown mode\n      if (stream.peek() === '`') {\n        stream.next();\n        var before = stream.pos;\n        stream.eatWhile('`');\n        var difference = 1 + stream.pos - before;\n        if (!state.code) {\n          codeDepth = difference;\n          state.code = true;\n        } else {\n          if (difference === codeDepth) { // Must be exact\n            state.code = false;\n          }\n        }\n        return null;\n      } else if (state.code) {\n        stream.next();\n        return null;\n      }\n      // Check if space. If so, links can be formatted later on\n      if (stream.eatSpace()) {\n        state.ateSpace = true;\n        return null;\n      }\n      if (stream.sol() || state.ateSpace) {\n        state.ateSpace = false;\n        if (modeConfig.gitHubSpice !== false) {\n          if(stream.match(/^(?:[a-zA-Z0-9\\-_]+\\/)?(?:[a-zA-Z0-9\\-_]+@)?(?:[a-f0-9]{7,40}\\b)/)) {\n            // User/Project@SHA\n            // User@SHA\n            // SHA\n            state.combineTokens = true;\n            return \"link\";\n          } else if (stream.match(/^(?:[a-zA-Z0-9\\-_]+\\/)?(?:[a-zA-Z0-9\\-_]+)?#[0-9]+\\b/)) {\n            // User/Project#Num\n            // User#Num\n            // #Num\n            state.combineTokens = true;\n            return \"link\";\n          }\n        }\n      }\n      if (stream.match(urlRE) &&\n          stream.string.slice(stream.start - 2, stream.start) != \"](\" &&\n          (stream.start == 0 || /\\W/.test(stream.string.charAt(stream.start - 1)))) {\n        // URLs\n        // Taken from http://daringfireball.net/2010/07/improved_regex_for_matching_urls\n        // And then (issue #1160) simplified to make it not crash the Chrome Regexp engine\n        // And then limited url schemes to the CommonMark list, so foo:bar isn't matched as a URL\n        state.combineTokens = true;\n        return \"link\";\n      }\n      stream.next();\n      return null;\n    },\n    blankLine: blankLine\n  };\n\n  var markdownConfig = {\n    underscoresBreakWords: false,\n    taskLists: true,\n    fencedCodeBlocks: '```',\n    strikethrough: true\n  };\n  for (var attr in modeConfig) {\n    markdownConfig[attr] = modeConfig[attr];\n  }\n  markdownConfig.name = \"markdown\";\n  return CodeMirror.overlayMode(CodeMirror.getMode(config, markdownConfig), gfmOverlay);\n\n}, \"markdown\");\n\n  CodeMirror.defineMIME(\"text/x-gfm\", \"gfm\");\n});\n"]}