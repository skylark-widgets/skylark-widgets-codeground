{"version":3,"sources":["mode/go/go.js"],"names":["define","CodeMirror","defineMode","config","tokenBase","stream","state","ch","next","tokenize","tokenString","test","match","curPunc","eat","tokenComment","skipToEnd","isOperatorChar","eatWhile","cur","current","keywords","propertyIsEnumerable","atoms","quote","escaped","end","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","t","indentUnit","break","case","chan","const","continue","default","defer","else","fallthrough","for","func","go","goto","if","import","interface","map","package","range","return","select","struct","switch","var","bool","byte","complex64","complex128","float32","float64","int8","int16","int32","int64","string","uint8","uint16","uint32","uint64","int","uint","uintptr","error","true","false","iota","nil","append","cap","close","complex","copy","imag","len","make","new","panic","print","println","real","recover","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","firstChar","charAt","closing","electricChars","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GACjC,YAEAA,GAAWC,WAAW,KAAM,SAASC,GA0BnC,QAASC,GAAUC,EAAQC,GACzB,GAAIC,GAAKF,EAAOG,MAChB,IAAU,KAAND,GAAmB,KAANA,GAAmB,KAANA,EAE5B,MADAD,GAAMG,SAAWC,EAAYH,GACtBD,EAAMG,SAASJ,EAAQC,EAEhC,IAAI,SAASK,KAAKJ,GAQhB,MAPU,KAANA,EACFF,EAAOO,MAAM,8BACE,KAANL,EACTF,EAAOO,MAAM,sBAAwBP,EAAOO,MAAM,YAElDP,EAAOO,MAAM,uCAER,QAET,IAAI,qBAAqBD,KAAKJ,GAE5B,MADAM,GAAUN,EACH,IAET,IAAU,KAANA,EAAW,CACb,GAAIF,EAAOS,IAAI,KAEb,MADAR,GAAMG,SAAWM,EACVA,EAAaV,EAAQC,EAE9B,IAAID,EAAOS,IAAI,KAEb,MADAT,GAAOW,YACA,UAGX,GAAIC,EAAeN,KAAKJ,GAEtB,MADAF,GAAOa,SAASD,GACT,UAETZ,GAAOa,SAAS,qBAChB,IAAIC,GAAMd,EAAOe,SACjB,OAAIC,GAASC,qBAAqBH,IACrB,QAAPA,GAAwB,WAAPA,IAAkBN,EAAU,QAC1C,WAELU,EAAMD,qBAAqBH,GAAa,OACrC,WAGT,QAAST,GAAYc,GACnB,MAAO,UAASnB,EAAQC,GAEtB,IADA,GAAqBE,GAAjBiB,GAAU,EAAaC,GAAM,EACA,OAAzBlB,EAAOH,EAAOG,SAAiB,CACrC,GAAIA,GAAQgB,IAAUC,EAAS,CAACC,GAAM,CAAM,OAC5CD,GAAWA,GAAoB,KAATD,GAAwB,MAARhB,EAIxC,OAFIkB,IAASD,GAAoB,KAATD,KACtBlB,EAAMG,SAAWL,GACZ,UAIX,QAASW,GAAaV,EAAQC,GAE5B,IADA,GAAsBC,GAAlBoB,GAAW,EACRpB,EAAKF,EAAOG,QAAQ,CACzB,GAAU,KAAND,GAAaoB,EAAU,CACzBrB,EAAMG,SAAWL,CACjB,OAEFuB,EAAkB,KAANpB,EAEd,MAAO,UAGT,QAASqB,GAAQC,EAAUC,EAAQC,EAAMC,EAAOC,GAC9CC,KAAKL,SAAWA,EAChBK,KAAKJ,OAASA,EACdI,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,EACbE,KAAKD,KAAOA,EAEd,QAASE,GAAY7B,EAAO8B,EAAKL,GAC/B,MAAOzB,GAAM+B,QAAU,GAAIT,GAAQtB,EAAMuB,SAAUO,EAAKL,EAAM,KAAMzB,EAAM+B,SAE5E,QAASC,GAAWhC,GAClB,GAAKA,EAAM+B,QAAQJ,KAAnB,CACA,GAAIM,GAAIjC,EAAM+B,QAAQN,IAGtB,OAFS,KAALQ,GAAiB,KAALA,GAAiB,KAALA,IAC1BjC,EAAMuB,SAAWvB,EAAM+B,QAAQR,UAC1BvB,EAAM+B,QAAU/B,EAAM+B,QAAQJ,MA7GvC,GAuBIpB,GAvBA2B,EAAarC,EAAOqC,WAEpBnB,GACFoB,SAAQ,EAAMC,QAAO,EAAMC,MAAO,EAAMC,SAAQ,EAAMC,YAAW,EACjEC,WAAU,EAAMC,OAAQ,EAAMC,QAAO,EAAMC,aAAc,EAAMC,OAAM,EACrEC,MAAO,EAAMC,IAAK,EAAMC,QAAO,EAAMC,MAAK,EAAMC,UAAS,EACzDC,aAAY,EAAMC,KAAM,EAAMC,WAAU,EAAMC,OAAQ,EAAMC,UAAS,EACrEC,QAAS,EAAMC,QAAS,EAAMC,UAAS,EAAMhC,MAAO,EAAMiC,OAAM,EAChEC,MAAO,EAAMC,QAAO,EAAMC,WAAY,EAAMC,YAAa,EACzDC,SAAU,EAAMC,SAAU,EAAMC,MAAO,EAAMC,OAAQ,EAAMC,OAAQ,EACnEC,OAAQ,EAAMC,QAAS,EAAMC,OAAQ,EAAMC,QAAS,EAAMC,QAAS,EACnEC,QAAS,EAAMC,OAAM,EAAMC,MAAO,EAAMC,SAAU,EAAMC,OAAS,GAG/D5D,GACF6D,QAAO,EAAMC,SAAQ,EAAMC,MAAO,EAAMC,KAAM,EAAMC,QAAS,EAC7DC,KAAM,EAAMC,OAAQ,EAAMC,SAAU,EAAMC,MAAO,EAAMC,MAAO,EAC9DC,KAAM,EAAMC,MAAO,EAAMC,OAAM,EAAMC,OAAQ,EAAMC,OAAQ,EAC3DC,SAAU,EAAMC,MAAO,EAAMC,SAAU,GAGrCpF,EAAiB,mBA6FrB,QACEqF,WAAY,SAASC,GACnB,OACE9F,SAAU,KACV4B,QAAS,GAAIT,IAAS2E,GAAc,GAAK/D,EAAY,EAAG,QAAO,IAC/DX,SAAU,EACV2E,aAAa,IAIjBC,MAAO,SAASpG,EAAQC,GACtB,GAAIoG,GAAMpG,EAAM+B,OAOhB,IANIhC,EAAOsG,QACQ,MAAbD,EAAI1E,QAAe0E,EAAI1E,OAAQ,GACnC1B,EAAMuB,SAAWxB,EAAOuG,cACxBtG,EAAMkG,aAAc,EACJ,QAAZE,EAAI3E,OAAgB2E,EAAI3E,KAAO,MAEjC1B,EAAOwG,WAAY,MAAO,KAC9BhG,GAAU,IACV,IAAIiG,IAASxG,EAAMG,UAAYL,GAAWC,EAAQC,EAClD,OAAa,WAATwG,EAA2BA,GACd,MAAbJ,EAAI1E,QAAe0E,EAAI1E,OAAQ,GAEpB,KAAXnB,EAAgBsB,EAAY7B,EAAOD,EAAOyB,SAAU,KACpC,KAAXjB,EAAgBsB,EAAY7B,EAAOD,EAAOyB,SAAU,KACzC,KAAXjB,EAAgBsB,EAAY7B,EAAOD,EAAOyB,SAAU,KACzC,QAAXjB,EAAmB6F,EAAI3E,KAAO,OACnB,KAAXlB,GAA8B,KAAZ6F,EAAI3E,KAAa2E,EAAMpE,EAAWhC,GACpDO,GAAW6F,EAAI3E,MAAMO,EAAWhC,GACzCA,EAAMkG,aAAc,EACbM,IAGTC,OAAQ,SAASzG,EAAO0G,GACtB,GAAI1G,EAAMG,UAAYL,GAA+B,MAAlBE,EAAMG,SAAkB,MAAO,EAClE,IAAIiG,GAAMpG,EAAM+B,QAAS4E,EAAYD,GAAaA,EAAUE,OAAO,EACnE,IAAgB,QAAZR,EAAI3E,MAAkB,sBAAsBpB,KAAKqG,GAEnD,MADA1G,GAAM+B,QAAQN,KAAO,IACd2E,EAAI7E,QAEb,IAAIsF,GAAUF,GAAaP,EAAI3E,IAC/B,OAAI2E,GAAI1E,MAAc0E,EAAI5E,QAAUqF,EAAU,EAAI,GACtCT,EAAI7E,UAAYsF,EAAU,EAAI3E,IAG5C4E,cAAe,OACfC,KAAM,QACNC,kBAAmB,KACnBC,gBAAiB,KACjBC,YAAa,QAIjBvH,EAAWwH,WAAW,YAAa","file":"../../../mode/go/go.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"go\", function(config) {\n  var indentUnit = config.indentUnit;\n\n  var keywords = {\n    \"break\":true, \"case\":true, \"chan\":true, \"const\":true, \"continue\":true,\n    \"default\":true, \"defer\":true, \"else\":true, \"fallthrough\":true, \"for\":true,\n    \"func\":true, \"go\":true, \"goto\":true, \"if\":true, \"import\":true,\n    \"interface\":true, \"map\":true, \"package\":true, \"range\":true, \"return\":true,\n    \"select\":true, \"struct\":true, \"switch\":true, \"type\":true, \"var\":true,\n    \"bool\":true, \"byte\":true, \"complex64\":true, \"complex128\":true,\n    \"float32\":true, \"float64\":true, \"int8\":true, \"int16\":true, \"int32\":true,\n    \"int64\":true, \"string\":true, \"uint8\":true, \"uint16\":true, \"uint32\":true,\n    \"uint64\":true, \"int\":true, \"uint\":true, \"uintptr\":true, \"error\": true\n  };\n\n  var atoms = {\n    \"true\":true, \"false\":true, \"iota\":true, \"nil\":true, \"append\":true,\n    \"cap\":true, \"close\":true, \"complex\":true, \"copy\":true, \"imag\":true,\n    \"len\":true, \"make\":true, \"new\":true, \"panic\":true, \"print\":true,\n    \"println\":true, \"real\":true, \"recover\":true\n  };\n\n  var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\d\\.]/.test(ch)) {\n      if (ch == \".\") {\n        stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n      } else if (ch == \"0\") {\n        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n      } else {\n        stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n      }\n      return \"number\";\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (cur == \"case\" || cur == \"default\") curPunc = \"case\";\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && quote != \"`\" && next == \"\\\\\";\n      }\n      if (end || !(escaped || quote == \"`\"))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    if (!state.context.prev) return;\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n        if (ctx.type == \"case\") ctx.type = \"}\";\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"case\") ctx.type = \"case\";\n      else if (curPunc == \"}\" && ctx.type == \"}\") ctx = popContext(state);\n      else if (curPunc == ctx.type) popContext(state);\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"case\" && /^(?:case|default)\\b/.test(textAfter)) {\n        state.context.type = \"}\";\n        return ctx.indented;\n      }\n      var closing = firstChar == ctx.type;\n      if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}):\",\n    fold: \"brace\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-go\", \"go\");\n\n});\n"]}