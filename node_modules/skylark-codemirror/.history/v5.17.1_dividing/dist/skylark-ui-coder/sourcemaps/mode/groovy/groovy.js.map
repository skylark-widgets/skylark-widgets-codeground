{"version":3,"sources":["mode/groovy/groovy.js"],"names":["define","CodeMirror","defineMode","config","words","str","obj","split","i","length","tokenBase","stream","state","ch","next","startString","test","curPunc","eatWhile","eat","tokenize","push","tokenComment","skipToEnd","expectExpression","lastToken","cur","current","atoms","propertyIsEnumerable","keywords","blockKeywords","standaloneKeywords","quote","t","escaped","end","tripleQuoted","match","tokenBaseUntilBrace","pop","peek","depth","isBase","maybeEnd","last","newline","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","startState","basecolumn","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","firstChar","charAt","closing","electricChars","closeBrackets","triples","fold","defineMIME"],"mappings":"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","file":"../../../mode/groovy/groovy.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"groovy\", function(config) {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\n    \"abstract as assert boolean break byte case catch char class const continue def default \" +\n    \"do double else enum extends final finally float for goto if implements import in \" +\n    \"instanceof int interface long native new package private protected public return \" +\n    \"short static strictfp super switch synchronized threadsafe throw throws transient \" +\n    \"try void volatile while\");\n  var blockKeywords = words(\"catch class do else finally for if switch try while enum interface def\");\n  var standaloneKeywords = words(\"return break continue\");\n  var atoms = words(\"null true false this\");\n\n  var curPunc;\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      return startString(ch, stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      if (stream.eat(/eE/)) { stream.eat(/\\+\\-/); stream.eatWhile(/\\d/); }\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize.push(tokenComment);\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (expectExpression(state.lastToken, false)) {\n        return startString(ch, stream, state);\n      }\n    }\n    if (ch == \"-\" && stream.eat(\">\")) {\n      curPunc = \"->\";\n      return null;\n    }\n    if (/[+\\-*&%=<>!?|\\/~]/.test(ch)) {\n      stream.eatWhile(/[+\\-*&%=<>|~]/);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    if (ch == \"@\") { stream.eatWhile(/[\\w\\$_\\.]/); return \"meta\"; }\n    if (state.lastToken == \".\") return \"property\";\n    if (stream.eat(\":\")) { curPunc = \"proplabel\"; return \"property\"; }\n    var cur = stream.current();\n    if (atoms.propertyIsEnumerable(cur)) { return \"atom\"; }\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc = \"standalone\";\n      return \"keyword\";\n    }\n    return \"variable\";\n  }\n  tokenBase.isBase = true;\n\n  function startString(quote, stream, state) {\n    var tripleQuoted = false;\n    if (quote != \"/\" && stream.eat(quote)) {\n      if (stream.eat(quote)) tripleQuoted = true;\n      else return \"string\";\n    }\n    function t(stream, state) {\n      var escaped = false, next, end = !tripleQuoted;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          if (!tripleQuoted) { break; }\n          if (stream.match(quote + quote)) { end = true; break; }\n        }\n        if (quote == '\"' && next == \"$\" && !escaped && stream.eat(\"{\")) {\n          state.tokenize.push(tokenBaseUntilBrace());\n          return \"string\";\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end) state.tokenize.pop();\n      return \"string\";\n    }\n    state.tokenize.push(t);\n    return t(stream, state);\n  }\n\n  function tokenBaseUntilBrace() {\n    var depth = 1;\n    function t(stream, state) {\n      if (stream.peek() == \"}\") {\n        depth--;\n        if (depth == 0) {\n          state.tokenize.pop();\n          return state.tokenize[state.tokenize.length-1](stream, state);\n        }\n      } else if (stream.peek() == \"{\") {\n        depth++;\n      }\n      return tokenBase(stream, state);\n    }\n    t.isBase = true;\n    return t;\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize.pop();\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function expectExpression(last, newline) {\n    return !last || last == \"operator\" || last == \"->\" || /[\\.\\[\\{\\(,;:]/.test(last) ||\n      last == \"newstatement\" || last == \"keyword\" || last == \"proplabel\" ||\n      (last == \"standalone\" && !newline);\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: [tokenBase],\n        context: new Context((basecolumn || 0) - config.indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true,\n        lastToken: null\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n        // Automatic semicolon insertion\n        if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) {\n          popContext(state); ctx = state.context;\n        }\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = state.tokenize[state.tokenize.length-1](stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n      // Handle indentation for {x -> \\n ... }\n      else if (curPunc == \"->\" && ctx.type == \"statement\" && ctx.prev.type == \"}\") {\n        popContext(state);\n        state.context.align = false;\n      }\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      state.lastToken = curPunc || style;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (!state.tokenize[state.tokenize.length-1].isBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;\n      if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : config.indentUnit);\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : config.indentUnit);\n    },\n\n    electricChars: \"{}\",\n    closeBrackets: {triples: \"'\\\"\"},\n    fold: \"brace\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-groovy\", \"groovy\");\n\n});\n"]}