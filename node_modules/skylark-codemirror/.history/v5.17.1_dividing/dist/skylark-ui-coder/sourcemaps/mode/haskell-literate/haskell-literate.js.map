{"version":3,"sources":["mode/haskell-literate/haskell-literate.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","baseMode","getMode","base","startState","inCode","baseState","token","stream","state","sol","eat","skipToEnd","innerMode","mode","defineMIME"],"mappings":";;;;;;;CAGA,SAAWA,GACa,gBAAXC,UAAwC,gBAAVC,QACvCF,EAAIG,QAAQ,eAAgBA,QAAQ,uBACZ,kBAAVC,SAAwBA,OAAOC,IAC7CD,QAAQ,cAAe,sBAAuBJ,GAE9CA,EAAIM,aACL,SAAUA,GACX,YAEAA,GAAWC,WAAW,mBAAoB,SAAUC,EAAQC,GAC1D,GAAIC,GAAWJ,EAAWK,QAAQH,EAASC,GAAgBA,EAAaG,MAAS,UAEjF,QACEC,WAAY,WACV,OACEC,QAAQ,EACRC,UAAWT,EAAWO,WAAWH,KAGrCM,MAAO,SAAUC,EAAQC,GACvB,MAAID,GAAOE,QACLD,EAAMJ,OAASG,EAAOG,IAAI,MACrB,OAEPF,EAAMJ,OACDJ,EAASM,MAAMC,EAAQC,EAAMH,YAEpCE,EAAOI,YACA,YAGXC,UAAW,SAAUJ,GACnB,MAAOA,GAAMJ,QAAUI,MAAOA,EAAMH,UAAWQ,KAAMb,GAAY,QAGpE,WAEHJ,EAAWkB,WAAW,0BAA2B","file":"../../../mode/haskell-literate/haskell-literate.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../Coder\"), require(\"../haskell/haskell\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../Coder\", \"../haskell/haskell\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function (CodeMirror) {\n  \"use strict\"\n\n  CodeMirror.defineMode(\"haskell-literate\", function (config, parserConfig) {\n    var baseMode = CodeMirror.getMode(config, (parserConfig && parserConfig.base) || \"haskell\")\n\n    return {\n      startState: function () {\n        return {\n          inCode: false,\n          baseState: CodeMirror.startState(baseMode)\n        }\n      },\n      token: function (stream, state) {\n        if (stream.sol()) {\n          if (state.inCode = stream.eat(\">\"))\n            return \"meta\"\n        }\n        if (state.inCode) {\n          return baseMode.token(stream, state.baseState)\n        } else {\n          stream.skipToEnd()\n          return \"comment\"\n        }\n      },\n      innerMode: function (state) {\n        return state.inCode ? {state: state.baseState, mode: baseMode} : null\n      }\n    }\n  }, \"haskell\")\n\n  CodeMirror.defineMIME(\"text/x-literate-haskell\", \"haskell-literate\")\n});\n"]}