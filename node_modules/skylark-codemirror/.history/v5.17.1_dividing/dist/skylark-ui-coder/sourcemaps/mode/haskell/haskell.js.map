{"version":3,"sources":["mode/haskell/haskell.js"],"names":["define","CodeMirror","defineMode","_config","modeConfig","switchState","source","setState","f","normal","eatWhile","whiteCharRE","ch","next","specialRE","test","eat","t","ncomment","stringLiteral","largeRE","idRE","smallRE","digitRE","hexitRE","octitRE","match","symbolRE","skipToEnd","type","nest","currNest","eol","stringGap","wellKnownWords","setType","i","arguments","length","wkw","override","overrideKeywords","word","hasOwnProperty","startState","copyState","s","token","stream","state","w","current","blockCommentStart","blockCommentEnd","lineComment","defineMIME"],"mappings":"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","file":"../../../mode/haskell/haskell.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"haskell\", function(_config, modeConfig) {\n\n  function switchState(source, setState, f) {\n    setState(f);\n    return f(source, setState);\n  }\n\n  // These should all be Unicode extended, as per the Haskell 2010 report\n  var smallRE = /[a-z_]/;\n  var largeRE = /[A-Z]/;\n  var digitRE = /\\d/;\n  var hexitRE = /[0-9A-Fa-f]/;\n  var octitRE = /[0-7]/;\n  var idRE = /[a-z_A-Z0-9'\\xa1-\\uffff]/;\n  var symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:]/;\n  var specialRE = /[(),;[\\]`{}]/;\n  var whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\n  function normal(source, setState) {\n    if (source.eatWhile(whiteCharRE)) {\n      return null;\n    }\n\n    var ch = source.next();\n    if (specialRE.test(ch)) {\n      if (ch == '{' && source.eat('-')) {\n        var t = \"comment\";\n        if (source.eat('#')) {\n          t = \"meta\";\n        }\n        return switchState(source, setState, ncomment(t, 1));\n      }\n      return null;\n    }\n\n    if (ch == '\\'') {\n      if (source.eat('\\\\')) {\n        source.next();  // should handle other escapes here\n      }\n      else {\n        source.next();\n      }\n      if (source.eat('\\'')) {\n        return \"string\";\n      }\n      return \"error\";\n    }\n\n    if (ch == '\"') {\n      return switchState(source, setState, stringLiteral);\n    }\n\n    if (largeRE.test(ch)) {\n      source.eatWhile(idRE);\n      if (source.eat('.')) {\n        return \"qualifier\";\n      }\n      return \"variable-2\";\n    }\n\n    if (smallRE.test(ch)) {\n      source.eatWhile(idRE);\n      return \"variable\";\n    }\n\n    if (digitRE.test(ch)) {\n      if (ch == '0') {\n        if (source.eat(/[xX]/)) {\n          source.eatWhile(hexitRE); // should require at least 1\n          return \"integer\";\n        }\n        if (source.eat(/[oO]/)) {\n          source.eatWhile(octitRE); // should require at least 1\n          return \"number\";\n        }\n      }\n      source.eatWhile(digitRE);\n      var t = \"number\";\n      if (source.match(/^\\.\\d+/)) {\n        t = \"number\";\n      }\n      if (source.eat(/[eE]/)) {\n        t = \"number\";\n        source.eat(/[-+]/);\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      return t;\n    }\n\n    if (ch == \".\" && source.eat(\".\"))\n      return \"keyword\";\n\n    if (symbolRE.test(ch)) {\n      if (ch == '-' && source.eat(/-/)) {\n        source.eatWhile(/-/);\n        if (!source.eat(symbolRE)) {\n          source.skipToEnd();\n          return \"comment\";\n        }\n      }\n      var t = \"variable\";\n      if (ch == ':') {\n        t = \"variable-2\";\n      }\n      source.eatWhile(symbolRE);\n      return t;\n    }\n\n    return \"error\";\n  }\n\n  function ncomment(type, nest) {\n    if (nest == 0) {\n      return normal;\n    }\n    return function(source, setState) {\n      var currNest = nest;\n      while (!source.eol()) {\n        var ch = source.next();\n        if (ch == '{' && source.eat('-')) {\n          ++currNest;\n        }\n        else if (ch == '-' && source.eat('}')) {\n          --currNest;\n          if (currNest == 0) {\n            setState(normal);\n            return type;\n          }\n        }\n      }\n      setState(ncomment(type, currNest));\n      return type;\n    };\n  }\n\n  function stringLiteral(source, setState) {\n    while (!source.eol()) {\n      var ch = source.next();\n      if (ch == '\"') {\n        setState(normal);\n        return \"string\";\n      }\n      if (ch == '\\\\') {\n        if (source.eol() || source.eat(whiteCharRE)) {\n          setState(stringGap);\n          return \"string\";\n        }\n        if (source.eat('&')) {\n        }\n        else {\n          source.next(); // should handle other escapes here\n        }\n      }\n    }\n    setState(normal);\n    return \"error\";\n  }\n\n  function stringGap(source, setState) {\n    if (source.eat('\\\\')) {\n      return switchState(source, setState, stringLiteral);\n    }\n    source.next();\n    setState(normal);\n    return \"error\";\n  }\n\n\n  var wellKnownWords = (function() {\n    var wkw = {};\n    function setType(t) {\n      return function () {\n        for (var i = 0; i < arguments.length; i++)\n          wkw[arguments[i]] = t;\n      };\n    }\n\n    setType(\"keyword\")(\n      \"case\", \"class\", \"data\", \"default\", \"deriving\", \"do\", \"else\", \"foreign\",\n      \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instance\", \"let\",\n      \"module\", \"newtype\", \"of\", \"then\", \"type\", \"where\", \"_\");\n\n    setType(\"keyword\")(\n      \"\\.\\.\", \":\", \"::\", \"=\", \"\\\\\", \"\\\"\", \"<-\", \"->\", \"@\", \"~\", \"=>\");\n\n    setType(\"builtin\")(\n      \"!!\", \"$!\", \"$\", \"&&\", \"+\", \"++\", \"-\", \".\", \"/\", \"/=\", \"<\", \"<=\", \"=<<\",\n      \"==\", \">\", \">=\", \">>\", \">>=\", \"^\", \"^^\", \"||\", \"*\", \"**\");\n\n    setType(\"builtin\")(\n      \"Bool\", \"Bounded\", \"Char\", \"Double\", \"EQ\", \"Either\", \"Enum\", \"Eq\",\n      \"False\", \"FilePath\", \"Float\", \"Floating\", \"Fractional\", \"Functor\", \"GT\",\n      \"IO\", \"IOError\", \"Int\", \"Integer\", \"Integral\", \"Just\", \"LT\", \"Left\",\n      \"Maybe\", \"Monad\", \"Nothing\", \"Num\", \"Ord\", \"Ordering\", \"Rational\", \"Read\",\n      \"ReadS\", \"Real\", \"RealFloat\", \"RealFrac\", \"Right\", \"Show\", \"ShowS\",\n      \"String\", \"True\");\n\n    setType(\"builtin\")(\n      \"abs\", \"acos\", \"acosh\", \"all\", \"and\", \"any\", \"appendFile\", \"asTypeOf\",\n      \"asin\", \"asinh\", \"atan\", \"atan2\", \"atanh\", \"break\", \"catch\", \"ceiling\",\n      \"compare\", \"concat\", \"concatMap\", \"const\", \"cos\", \"cosh\", \"curry\",\n      \"cycle\", \"decodeFloat\", \"div\", \"divMod\", \"drop\", \"dropWhile\", \"either\",\n      \"elem\", \"encodeFloat\", \"enumFrom\", \"enumFromThen\", \"enumFromThenTo\",\n      \"enumFromTo\", \"error\", \"even\", \"exp\", \"exponent\", \"fail\", \"filter\",\n      \"flip\", \"floatDigits\", \"floatRadix\", \"floatRange\", \"floor\", \"fmap\",\n      \"foldl\", \"foldl1\", \"foldr\", \"foldr1\", \"fromEnum\", \"fromInteger\",\n      \"fromIntegral\", \"fromRational\", \"fst\", \"gcd\", \"getChar\", \"getContents\",\n      \"getLine\", \"head\", \"id\", \"init\", \"interact\", \"ioError\", \"isDenormalized\",\n      \"isIEEE\", \"isInfinite\", \"isNaN\", \"isNegativeZero\", \"iterate\", \"last\",\n      \"lcm\", \"length\", \"lex\", \"lines\", \"log\", \"logBase\", \"lookup\", \"map\",\n      \"mapM\", \"mapM_\", \"max\", \"maxBound\", \"maximum\", \"maybe\", \"min\", \"minBound\",\n      \"minimum\", \"mod\", \"negate\", \"not\", \"notElem\", \"null\", \"odd\", \"or\",\n      \"otherwise\", \"pi\", \"pred\", \"print\", \"product\", \"properFraction\",\n      \"putChar\", \"putStr\", \"putStrLn\", \"quot\", \"quotRem\", \"read\", \"readFile\",\n      \"readIO\", \"readList\", \"readLn\", \"readParen\", \"reads\", \"readsPrec\",\n      \"realToFrac\", \"recip\", \"rem\", \"repeat\", \"replicate\", \"return\", \"reverse\",\n      \"round\", \"scaleFloat\", \"scanl\", \"scanl1\", \"scanr\", \"scanr1\", \"seq\",\n      \"sequence\", \"sequence_\", \"show\", \"showChar\", \"showList\", \"showParen\",\n      \"showString\", \"shows\", \"showsPrec\", \"significand\", \"signum\", \"sin\",\n      \"sinh\", \"snd\", \"span\", \"splitAt\", \"sqrt\", \"subtract\", \"succ\", \"sum\",\n      \"tail\", \"take\", \"takeWhile\", \"tan\", \"tanh\", \"toEnum\", \"toInteger\",\n      \"toRational\", \"truncate\", \"uncurry\", \"undefined\", \"unlines\", \"until\",\n      \"unwords\", \"unzip\", \"unzip3\", \"userError\", \"words\", \"writeFile\", \"zip\",\n      \"zip3\", \"zipWith\", \"zipWith3\");\n\n    var override = modeConfig.overrideKeywords;\n    if (override) for (var word in override) if (override.hasOwnProperty(word))\n      wkw[word] = override[word];\n\n    return wkw;\n  })();\n\n\n\n  return {\n    startState: function ()  { return { f: normal }; },\n    copyState:  function (s) { return { f: s.f }; },\n\n    token: function(stream, state) {\n      var t = state.f(stream, function(s) { state.f = s; });\n      var w = stream.current();\n      return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n    },\n\n    blockCommentStart: \"{-\",\n    blockCommentEnd: \"-}\",\n    lineComment: \"--\"\n  };\n\n});\n\nCodeMirror.defineMIME(\"text/x-haskell\", \"haskell\");\n\n});\n"]}