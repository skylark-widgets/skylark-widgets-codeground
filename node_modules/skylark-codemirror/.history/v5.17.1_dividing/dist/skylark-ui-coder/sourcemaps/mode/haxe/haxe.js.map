{"version":3,"sources":["mode/haxe/haxe.js"],"names":["define","CodeMirror","defineMode","config","parserConfig","kw","type","style","chain","stream","state","f","tokenize","toUnescaped","end","next","escaped","ret","tp","cont","content","haxeTokenBase","ch","haxeTokenString","test","eat","eatWhile","match","reAllowed","haxeTokenComment","skipToEnd","isOperatorChar","current","word","known","keywords","propertyIsEnumerable","kwAllowed","quote","maybeEnd","HaxeLexical","indented","column","align","prev","info","this","inScope","varname","v","localVars","name","parseHaxe","cc","cx","marked","lexical","hasOwnProperty","combinator","length","pop","statement","lex","imported","typename","charAt","len","importedtypes","i","registerimport","importname","t","pass","arguments","push","apply","inList","list","register","context","globalVars","pushcontext","defaultVars","vars","popcontext","pushlex","result","poplex","expect","wanted","metadef","vardef1","expression","block","maybeattribute","functiondef","forspec1","maybelabel","funarg","importdef","typedef","atomicTypes","maybeoperator","maybeexpression","commasep","objprop","value","property","metaargs","what","proceed","typeuse","vardef2","forin","_type","typestring","typeprop","indentUnit","A","B","C","operator","atom","attribute","if","while","else","do","try","return","break","continue","new","throw","var","inline","static","using","public","private","cast","import","macro","function","catch","untyped","callback","for","switch","case","default","in","never","trace","class","abstract","enum","interface","extends","implements","dynamic","true","false","null","number","variable","string","regexp","startState","basecolumn","defaulttypes","token","sol","indentation","eatSpace","indent","textAfter","firstChar","closing","electricChars","blockCommentStart","blockCommentEnd","lineComment","defineMIME","inString","peek","skipTo"],"mappings":"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","file":"../../../mode/haxe/haxe.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"haxe\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n\n  // Tokenizer\n\n  function kw(type) {return {type: type, style: \"keyword\"};}\n  var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\");\n  var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"}, attribute = {type:\"attribute\", style: \"attribute\"};\n  var type = kw(\"typedef\");\n  var keywords = {\n    \"if\": A, \"while\": A, \"else\": B, \"do\": B, \"try\": B,\n    \"return\": C, \"break\": C, \"continue\": C, \"new\": C, \"throw\": C,\n    \"var\": kw(\"var\"), \"inline\":attribute, \"static\": attribute, \"using\":kw(\"import\"),\n    \"public\": attribute, \"private\": attribute, \"cast\": kw(\"cast\"), \"import\": kw(\"import\"), \"macro\": kw(\"macro\"),\n    \"function\": kw(\"function\"), \"catch\": kw(\"catch\"), \"untyped\": kw(\"untyped\"), \"callback\": kw(\"cb\"),\n    \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n    \"in\": operator, \"never\": kw(\"property_access\"), \"trace\":kw(\"trace\"),\n    \"class\": type, \"abstract\":type, \"enum\":type, \"interface\":type, \"typedef\":type, \"extends\":type, \"implements\":type, \"dynamic\":type,\n    \"true\": atom, \"false\": atom, \"null\": atom\n  };\n\n  var isOperatorChar = /[+\\-*&%=<>!?|]/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function toUnescaped(stream, end) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (next == end && !escaped)\n        return true;\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n\n  function haxeTokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      return chain(stream, state, haxeTokenString(ch));\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"0\" && stream.eat(/x/i)) {\n      stream.eatWhile(/[\\da-f]/i);\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch) || ch == \"-\" && stream.eat(/\\d/)) {\n      stream.match(/^\\d*(?:\\.\\d*(?!\\.))?(?:[eE][+\\-]?\\d+)?/);\n      return ret(\"number\", \"number\");\n    } else if (state.reAllowed && (ch == \"~\" && stream.eat(/\\//))) {\n      toUnescaped(stream, \"/\");\n      stream.eatWhile(/[gimsu]/);\n      return ret(\"regexp\", \"string-2\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, haxeTokenComment);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else {\n        stream.eatWhile(isOperatorChar);\n        return ret(\"operator\", null, stream.current());\n      }\n    } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return ret(\"conditional\", \"meta\");\n    } else if (ch == \"@\") {\n      stream.eat(/:/);\n      stream.eatWhile(/[\\w_]/);\n      return ret (\"metadata\", \"meta\");\n    } else if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return ret(\"operator\", null, stream.current());\n    } else {\n      var word;\n      if(/[A-Z]/.test(ch)) {\n        stream.eatWhile(/[\\w_<>]/);\n        word = stream.current();\n        return ret(\"type\", \"variable-3\", word);\n      } else {\n        stream.eatWhile(/[\\w_]/);\n        var word = stream.current(), known = keywords.propertyIsEnumerable(word) && keywords[word];\n        return (known && state.kwAllowed) ? ret(known.type, known.style, word) :\n                       ret(\"variable\", \"variable\", word);\n      }\n    }\n  }\n\n  function haxeTokenString(quote) {\n    return function(stream, state) {\n      if (toUnescaped(stream, quote))\n        state.tokenize = haxeTokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function haxeTokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = haxeTokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true};\n\n  function HaxeLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n  }\n\n  function parseHaxe(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        if (type == \"variable\" && imported(state, content)) return \"variable-3\";\n        return style;\n      }\n    }\n  }\n\n  function imported(state, typename) {\n    if (/[a-z]/.test(typename.charAt(0)))\n      return false;\n    var len = state.importedtypes.length;\n    for (var i = 0; i<len; i++)\n      if(state.importedtypes[i]==typename) return true;\n  }\n\n  function registerimport(importname) {\n    var state = cx.state;\n    for (var t = state.importedtypes; t; t = t.next)\n      if(t.name == importname) return;\n    state.importedtypes = { name: importname, next: state.importedtypes };\n  }\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next)\n      if (v.name == name) return true;\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    if (state.context) {\n      cx.marked = \"def\";\n      if (inList(varname, state.localVars)) return;\n      state.localVars = {name: varname, next: state.localVars};\n    } else if (state.globalVars) {\n      if (inList(varname, state.globalVars)) return;\n      state.globalVars = {name: varname, next: state.globalVars};\n    }\n  }\n\n  // Combinators\n\n  var defaultVars = {name: \"this\", next: null};\n  function pushcontext() {\n    if (!cx.state.context) cx.state.localVars = defaultVars;\n    cx.state.context = {prev: cx.state.context, vars: cx.state.localVars};\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars;\n    cx.state.context = cx.state.context.prev;\n  }\n  popcontext.lex = true;\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state;\n      state.lexical = new HaxeLexical(state.indented, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function f(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\") return pass();\n      else return cont(f);\n    }\n    return f;\n  }\n\n  function statement(type) {\n    if (type == \"@\") return cont(metadef);\n    if (type == \"var\") return cont(pushlex(\"vardef\"), vardef1, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), expression, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"{\") return cont(pushlex(\"}\"), pushcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"attribute\") return cont(maybeattribute);\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), expect(\"(\"), pushlex(\")\"), forspec1, expect(\")\"),\n                                   poplex, statement, poplex);\n    if (type == \"variable\") return cont(pushlex(\"stat\"), maybelabel);\n    if (type == \"switch\") return cont(pushlex(\"form\"), expression, pushlex(\"}\", \"switch\"), expect(\"{\"),\n                                      block, poplex, poplex);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, expect(\"(\"), funarg, expect(\")\"),\n                                     statement, poplex, popcontext);\n    if (type == \"import\") return cont(importdef, expect(\";\"));\n    if (type == \"typedef\") return cont(typedef);\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function expression(type) {\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeoperator);\n    if (type == \"type\" ) return cont(maybeoperator);\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"keyword c\") return cont(maybeexpression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeoperator);\n    if (type == \"operator\") return cont(expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(maybeexpression, \"]\"), poplex, maybeoperator);\n    if (type == \"{\") return cont(pushlex(\"}\"), commasep(objprop, \"}\"), poplex, maybeoperator);\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperator(type, value) {\n    if (type == \"operator\" && /\\+\\+|--/.test(value)) return cont(maybeoperator);\n    if (type == \"operator\" || type == \":\") return cont(expression);\n    if (type == \";\") return;\n    if (type == \"(\") return cont(pushlex(\")\"), commasep(expression, \")\"), poplex, maybeoperator);\n    if (type == \".\") return cont(property, maybeoperator);\n    if (type == \"[\") return cont(pushlex(\"]\"), expression, expect(\"]\"), poplex, maybeoperator);\n  }\n\n  function maybeattribute(type) {\n    if (type == \"attribute\") return cont(maybeattribute);\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"var\") return cont(vardef1);\n  }\n\n  function metadef(type) {\n    if(type == \":\") return cont(metadef);\n    if(type == \"variable\") return cont(metadef);\n    if(type == \"(\") return cont(pushlex(\")\"), commasep(metaargs, \")\"), poplex, statement);\n  }\n  function metaargs(type) {\n    if(type == \"variable\") return cont();\n  }\n\n  function importdef (type, value) {\n    if(type == \"variable\" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont(); }\n    else if(type == \"variable\" || type == \"property\" || type == \".\" || value == \"*\") return cont(importdef);\n  }\n\n  function typedef (type, value)\n  {\n    if(type == \"variable\" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont(); }\n    else if (type == \"type\" && /[A-Z]/.test(value.charAt(0))) { return cont(); }\n  }\n\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperator, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type) {\n    if (type == \"variable\") cx.marked = \"property\";\n    if (atomicTypes.hasOwnProperty(type)) return cont(expect(\":\"), expression);\n  }\n  function commasep(what, end) {\n    function proceed(type) {\n      if (type == \",\") return cont(what, proceed);\n      if (type == end) return cont();\n      return cont(expect(end));\n    }\n    return function(type) {\n      if (type == end) return cont();\n      else return pass(what, proceed);\n    };\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function vardef1(type, value) {\n    if (type == \"variable\"){register(value); return cont(typeuse, vardef2);}\n    return cont();\n  }\n  function vardef2(type, value) {\n    if (value == \"=\") return cont(expression, vardef2);\n    if (type == \",\") return cont(vardef1);\n  }\n  function forspec1(type, value) {\n    if (type == \"variable\") {\n      register(value);\n      return cont(forin, expression)\n    } else {\n      return pass()\n    }\n  }\n  function forin(_type, value) {\n    if (value == \"in\") return cont();\n  }\n  function functiondef(type, value) {\n    //function names starting with upper-case letters are recognised as types, so cludging them together here.\n    if (type == \"variable\" || type == \"type\") {register(value); return cont(functiondef);}\n    if (value == \"new\") return cont(functiondef);\n    if (type == \"(\") return cont(pushlex(\")\"), pushcontext, commasep(funarg, \")\"), poplex, typeuse, statement, popcontext);\n  }\n  function typeuse(type) {\n    if(type == \":\") return cont(typestring);\n  }\n  function typestring(type) {\n    if(type == \"type\") return cont();\n    if(type == \"variable\") return cont();\n    if(type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\"), poplex);\n  }\n  function typeprop(type) {\n    if(type == \"variable\") return cont(typeuse);\n  }\n  function funarg(type, value) {\n    if (type == \"variable\") {register(value); return cont(typeuse);}\n  }\n\n  // Interface\n  return {\n    startState: function(basecolumn) {\n      var defaulttypes = [\"Int\", \"Float\", \"String\", \"Void\", \"Std\", \"Bool\", \"Dynamic\", \"Array\"];\n      var state = {\n        tokenize: haxeTokenBase,\n        reAllowed: true,\n        kwAllowed: true,\n        cc: [],\n        lexical: new HaxeLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        importedtypes: defaulttypes,\n        context: parserConfig.localVars && {vars: parserConfig.localVars},\n        indented: 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.reAllowed = !!(type == \"operator\" || type == \"keyword c\" || type.match(/^[\\[{}\\(,;:]$/));\n      state.kwAllowed = type != '.';\n      return parseHaxe(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != haxeTokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical;\n      if (lexical.type == \"stat\" && firstChar == \"}\") lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n      if (type == \"vardef\") return lexical.indented + 4;\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"stat\" || type == \"form\") return lexical.indented + indentUnit;\n      else if (lexical.info == \"switch\" && !closing)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-haxe\", \"haxe\");\n\nCodeMirror.defineMode(\"hxml\", function () {\n\n  return {\n    startState: function () {\n      return {\n        define: false,\n        inString: false\n      };\n    },\n    token: function (stream, state) {\n      var ch = stream.peek();\n      var sol = stream.sol();\n\n      ///* comments */\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (sol && ch == \"-\") {\n        var style = \"variable-2\";\n\n        stream.eat(/-/);\n\n        if (stream.peek() == \"-\") {\n          stream.eat(/-/);\n          style = \"keyword a\";\n        }\n\n        if (stream.peek() == \"D\") {\n          stream.eat(/[D]/);\n          style = \"keyword c\";\n          state.define = true;\n        }\n\n        stream.eatWhile(/[A-Z]/i);\n        return style;\n      }\n\n      var ch = stream.peek();\n\n      if (state.inString == false && ch == \"'\") {\n        state.inString = true;\n        ch = stream.next();\n      }\n\n      if (state.inString == true) {\n        if (stream.skipTo(\"'\")) {\n\n        } else {\n          stream.skipToEnd();\n        }\n\n        if (stream.peek() == \"'\") {\n          stream.next();\n          state.inString = false;\n        }\n\n        return \"string\";\n      }\n\n      stream.next();\n      return null;\n    },\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-hxml\", \"hxml\");\n\n});\n"]}