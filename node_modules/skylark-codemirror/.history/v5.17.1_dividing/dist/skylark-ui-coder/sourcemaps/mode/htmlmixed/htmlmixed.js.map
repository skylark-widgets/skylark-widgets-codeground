{"version":3,"sources":["mode/htmlmixed/htmlmixed.js"],"names":["define","CodeMirror","maybeBackup","stream","pat","style","cur","current","close","search","backUp","length","match","getAttrRegexp","attr","regexp","attrRegexpCache","RegExp","getAttrValue","text","getTagRegexp","tagName","anchored","addTags","from","to","tag","dest","source","i","unshift","findMatchingMode","tagInfo","tagText","spec","test","defaultTags","script","defineMode","config","parserConfig","html","state","htmlMode","token","htmlState","toLowerCase","tags","hasOwnProperty","inTag","exec","modeSpec","mode","getMode","endTagA","endTag","localState","localMode","startState","indent","eol","name","multilineTagIndentFactor","multilineTagIndentPastTag","configTags","configScript","scriptTypes","matches","copyState","local","textAfter","Pass","innerMode","defineMIME"],"mappings":"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","file":"../../../mode/htmlmixed/htmlmixed.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\", \"../xml/xml\", \"../javascript/javascript\", \"../css/css\"], function(CodeMirror) {\n  \"use strict\";\n\n  var defaultTags = {\n    script: [\n      [\"lang\", /(javascript|babel)/i, \"javascript\"],\n      [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^$/i, \"javascript\"],\n      [\"type\", /./, \"text/plain\"],\n      [null, null, \"javascript\"]\n    ],\n    style:  [\n      [\"lang\", /^css$/i, \"css\"],\n      [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"],\n      [\"type\", /./, \"text/plain\"],\n      [null, null, \"css\"]\n    ]\n  };\n\n  function maybeBackup(stream, pat, style) {\n    var cur = stream.current(), close = cur.search(pat);\n    if (close > -1) {\n      stream.backUp(cur.length - close);\n    } else if (cur.match(/<\\/?$/)) {\n      stream.backUp(cur.length);\n      if (!stream.match(pat, false)) stream.match(cur);\n    }\n    return style;\n  }\n\n  var attrRegexpCache = {};\n  function getAttrRegexp(attr) {\n    var regexp = attrRegexpCache[attr];\n    if (regexp) return regexp;\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\n  }\n\n  function getAttrValue(text, attr) {\n    var match = text.match(getAttrRegexp(attr))\n    return match ? match[2] : \"\"\n  }\n\n  function getTagRegexp(tagName, anchored) {\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\s*\" + tagName + \"\\s*>\", \"i\");\n  }\n\n  function addTags(from, to) {\n    for (var tag in from) {\n      var dest = to[tag] || (to[tag] = []);\n      var source = from[tag];\n      for (var i = source.length - 1; i >= 0; i--)\n        dest.unshift(source[i])\n    }\n  }\n\n  function findMatchingMode(tagInfo, tagText) {\n    for (var i = 0; i < tagInfo.length; i++) {\n      var spec = tagInfo[i];\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\n    }\n  }\n\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      htmlMode: true,\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag\n    });\n\n    var tags = {};\n    var configTags = parserConfig && parserConfig.tags, configScript = parserConfig && parserConfig.scriptTypes;\n    addTags(defaultTags, tags);\n    if (configTags) addTags(configTags, tags);\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--)\n      tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode])\n\n    function html(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState), tag = /\\btag\\b/.test(style), tagName\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) &&\n          (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) &&\n          tags.hasOwnProperty(tagName)) {\n        state.inTag = tagName + \" \"\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag)\n        state.inTag = null\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2])\n        var mode = CodeMirror.getMode(config, modeSpec)\n        var endTagA = getTagRegexp(inTag[1], true), endTag = getTagRegexp(inTag[1], false);\n        state.token = function (stream, state) {\n          if (stream.match(endTagA, false)) {\n            state.token = html;\n            state.localState = state.localMode = null;\n            return null;\n          }\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\n        };\n        state.localMode = mode;\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\"));\n      } else if (state.inTag) {\n        state.inTag += stream.current()\n        if (stream.eol()) state.inTag += \" \"\n      }\n      return style;\n    };\n\n    return {\n      startState: function () {\n        var state = CodeMirror.startState(htmlMode);\n        return {token: html, inTag: null, localMode: null, localState: null, htmlState: state};\n      },\n\n      copyState: function (state) {\n        var local;\n        if (state.localState) {\n          local = CodeMirror.copyState(state.localMode, state.localState);\n        }\n        return {token: state.token, inTag: state.inTag,\n                localMode: state.localMode, localState: local,\n                htmlState: CodeMirror.copyState(htmlMode, state.htmlState)};\n      },\n\n      token: function (stream, state) {\n        return state.token(stream, state);\n      },\n\n      indent: function (state, textAfter) {\n        if (!state.localMode || /^\\s*<\\//.test(textAfter))\n          return htmlMode.indent(state.htmlState, textAfter);\n        else if (state.localMode.indent)\n          return state.localMode.indent(state.localState, textAfter);\n        else\n          return CodeMirror.Pass;\n      },\n\n      innerMode: function (state) {\n        return {state: state.localState || state.htmlState, mode: state.localMode || htmlMode};\n      }\n    };\n  }, \"xml\", \"javascript\", \"css\");\n\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\n});\n"]}