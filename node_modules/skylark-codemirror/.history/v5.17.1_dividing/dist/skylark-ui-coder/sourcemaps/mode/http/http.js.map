{"version":3,"sources":["mode/http/http.js"],"names":["define","CodeMirror","defineMode","failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","token","eatSpace","blankLine","startState","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GACjC,YAEAA,GAAWC,WAAW,OAAQ,WAC5B,QAASC,GAAcC,EAAQC,GAG7B,MAFAD,GAAOE,YACPD,EAAME,IAAMC,EACL,QAGT,QAASC,GAAML,EAAQC,GACrB,MAAID,GAAOM,MAAM,kBACfL,EAAME,IAAMI,EACL,WACEP,EAAOM,MAAM,YAAc,QAAQE,KAAKR,EAAOS,SACxDR,EAAME,IAAMO,EACL,WAEAX,EAAcC,EAAQC,GAIjC,QAASM,GAAmBP,EAAQC,GAClC,GAAIU,GAAOX,EAAOM,MAAM,OACxB,KAAKK,EAAM,MAAOZ,GAAcC,EAAQC,EAExCA,GAAME,IAAMS,CACZ,IAAIC,GAASC,OAAOH,EAAK,GACzB,OAAIE,IAAU,KAAOA,EAAS,IACrB,yBACEA,GAAU,KAAOA,EAAS,IAC5B,mBACEA,GAAU,KAAOA,EAAS,IAC5B,oBACEA,GAAU,KAAOA,EAAS,IAC5B,wBACEA,GAAU,KAAOA,EAAS,IAC5B,wBAEA,QAIX,QAASD,GAAmBZ,EAAQC,GAGlC,MAFAD,GAAOE,YACPD,EAAME,IAAMC,EACL,KAGT,QAASM,GAAYV,EAAQC,GAG3B,MAFAD,GAAOe,SAAS,MAChBd,EAAME,IAAMa,EACL,WAGT,QAASA,GAAgBhB,EAAQC,GAC/B,MAAID,GAAOM,MAAM,mBACfL,EAAME,IAAMC,EACL,WAEAL,EAAcC,EAAQC,GAIjC,QAASG,GAAOJ,GACd,MAAIA,GAAOiB,QAAUjB,EAAOkB,IAAI,SAC1BlB,EAAOM,MAAM,SACR,QAEPN,EAAOE,YACA,UAGTF,EAAOE,YACA,UAIX,QAASiB,GAAKnB,GAEZ,MADAA,GAAOE,YACA,KAGT,OACEkB,MAAO,SAASpB,EAAQC,GACtB,GAAIE,GAAMF,EAAME,GAChB,OAAIA,IAAOC,GAAUD,GAAOgB,GAAQnB,EAAOqB,WAAmB,KACvDlB,EAAIH,EAAQC,IAGrBqB,UAAW,SAASrB,GAClBA,EAAME,IAAMgB,GAGdI,WAAY,WACV,OAAQpB,IAAKE,OAKnBR,EAAW2B,WAAW,eAAgB","file":"../../../mode/http/http.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"http\", function() {\n  function failFirstLine(stream, state) {\n    stream.skipToEnd();\n    state.cur = header;\n    return \"error\";\n  }\n\n  function start(stream, state) {\n    if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n      state.cur = responseStatusCode;\n      return \"keyword\";\n    } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n      state.cur = requestPath;\n      return \"keyword\";\n    } else {\n      return failFirstLine(stream, state);\n    }\n  }\n\n  function responseStatusCode(stream, state) {\n    var code = stream.match(/^\\d+/);\n    if (!code) return failFirstLine(stream, state);\n\n    state.cur = responseStatusText;\n    var status = Number(code[0]);\n    if (status >= 100 && status < 200) {\n      return \"positive informational\";\n    } else if (status >= 200 && status < 300) {\n      return \"positive success\";\n    } else if (status >= 300 && status < 400) {\n      return \"positive redirect\";\n    } else if (status >= 400 && status < 500) {\n      return \"negative client-error\";\n    } else if (status >= 500 && status < 600) {\n      return \"negative server-error\";\n    } else {\n      return \"error\";\n    }\n  }\n\n  function responseStatusText(stream, state) {\n    stream.skipToEnd();\n    state.cur = header;\n    return null;\n  }\n\n  function requestPath(stream, state) {\n    stream.eatWhile(/\\S/);\n    state.cur = requestProtocol;\n    return \"string-2\";\n  }\n\n  function requestProtocol(stream, state) {\n    if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n      state.cur = header;\n      return \"keyword\";\n    } else {\n      return failFirstLine(stream, state);\n    }\n  }\n\n  function header(stream) {\n    if (stream.sol() && !stream.eat(/[ \\t]/)) {\n      if (stream.match(/^.*?:/)) {\n        return \"atom\";\n      } else {\n        stream.skipToEnd();\n        return \"error\";\n      }\n    } else {\n      stream.skipToEnd();\n      return \"string\";\n    }\n  }\n\n  function body(stream) {\n    stream.skipToEnd();\n    return null;\n  }\n\n  return {\n    token: function(stream, state) {\n      var cur = state.cur;\n      if (cur != header && cur != body && stream.eatSpace()) return null;\n      return cur(stream, state);\n    },\n\n    blankLine: function(state) {\n      state.cur = body;\n    },\n\n    startState: function() {\n      return {cur: start};\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"message/http\", \"http\");\n\n});\n"]}