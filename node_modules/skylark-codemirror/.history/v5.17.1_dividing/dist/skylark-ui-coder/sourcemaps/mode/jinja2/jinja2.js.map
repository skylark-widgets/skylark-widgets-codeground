{"version":3,"sources":["mode/jinja2/jinja2.js"],"names":["define","CodeMirror","defineMode","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","operator","match","atom","number","sign","instring","next","eat","sol","keywords","RegExp","join","startState","tokenize","token"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GAC/B,YAEAA,GAAWC,WAAW,SAAU,WAsB9B,QAASC,GAAWC,EAAQC,GAC1B,GAAIC,GAAKF,EAAOG,MAGhB,IAAIF,EAAMG,UAOR,MANIJ,GAAOK,OAAO,OAGhBL,EAAOM,SAAS,QAChBL,EAAMG,WAAY,GAHlBJ,EAAOO,YAKF,SAEF,IAAIN,EAAMO,MAAO,CAEtB,GAAGP,EAAMQ,SAAU,CAEjB,GADAR,EAAMQ,UAAW,EACdT,EAAOU,MAAMC,GACd,MAAO,MAET,IAAGX,EAAOU,MAAME,GACd,MAAO,SAIX,GAAGX,EAAMY,KAAM,CAEb,GADAZ,EAAMY,MAAO,EACVb,EAAOU,MAAMC,GACd,MAAO,MAET,IAAGX,EAAOU,MAAME,GACd,MAAO,SAIX,GAAGX,EAAMa,SAKP,MAJGZ,IAAMD,EAAMa,WACbb,EAAMa,UAAW,GAEnBd,EAAOe,OACA,QACF,IAAS,KAANb,GAAmB,KAANA,EAGrB,MAFAD,GAAMa,SAAWZ,EACjBF,EAAOe,OACA,QACF,IAAGf,EAAOU,MAAMT,EAAMO,MAAQ,MAAQR,EAAOgB,IAAI,MAAQhB,EAAOU,MAAMT,EAAMO,MAAQ,KAEzF,MADAP,GAAMO,OAAQ,EACP,KACF,IAAGR,EAAOU,MAAMD,GAErB,MADAR,GAAMQ,UAAW,EACV,UACF,IAAGT,EAAOU,MAAMG,GACrBZ,EAAMY,MAAO,MAEb,IAAGb,EAAOgB,IAAI,MAAQhB,EAAOiB,MAAO,CAClC,GAAGjB,EAAOU,MAAMQ,GACd,MAAO,SAET,IAAGlB,EAAOU,MAAMC,GACd,MAAO,MAET,IAAGX,EAAOU,MAAME,GACd,MAAO,QAENZ,GAAOiB,OACRjB,EAAOe,WAGTf,GAAOe,MAIX,OAAO,WACF,GAAIf,EAAOgB,IAAI,KAAM,CAC1B,GAAId,EAAKF,EAAOgB,IAAI,KAQlB,MAPAf,GAAMG,WAAY,EACdJ,EAAOK,OAAO,OAGhBL,EAAOM,SAAS,QAChBL,EAAMG,WAAY,GAHlBJ,EAAOO,YAKF,SAEF,IAAIL,EAAKF,EAAOgB,IAAI,QAOzB,MALAf,GAAMO,MAAQN,EACL,KAANA,IACDD,EAAMO,MAAQ,KAEhBR,EAAOgB,IAAI,KACJ,MAGXhB,EAAOe,OAnHT,GAAIG,IAAY,MAAO,KAAM,QAAS,WAAY,KAAM,QAAS,QAAS,OAAQ,OAChF,UAAW,SAAU,YAAa,UAAW,MAC7C,SAAU,KAAM,QAAS,YAAa,eACtC,UAAW,aAAc,aACzB,gBAAiB,KAAM,UAAW,OAAQ,MAAO,MAAO,KACxD,SAAU,UAAW,WAAY,YACjC,eAAgB,MAAO,cAAe,YACtC,aAAc,eAAgB,gBAC9B,YAAa,aAAc,cAC3B,eAAgB,aAAc,MAAO,OAAQ,UAC7C,uBAAwB,QAAS,WAAY,OAAQ,aACrD,gBAAiB,0BACjB,4BAA6B,UAC/BT,EAAW,oBACXI,EAAO,aACPF,GAAQ,OAAQ,SAChBC,EAAS,4BAsGT,OApGAM,GAAW,GAAIC,QAAO,KAAOD,EAASE,KAAK,OAAS,SACpDT,EAAO,GAAIQ,QAAO,KAAOR,EAAKS,KAAK,OAAS,UAoG1CC,WAAY,WACV,OAAQC,SAAUvB,IAEpBwB,MAAO,SAAUvB,EAAQC,GACvB,MAAOA,GAAMqB,SAAStB,EAAQC","file":"../../../mode/jinja2/jinja2.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"jinja2\", function() {\n    var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n      \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\",\n      \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n      \"ifequal\", \"endifequal\", \"ifnotequal\",\n      \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n      \"parsed\", \"regroup\", \"reversed\", \"spaceless\",\n      \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n      \"closeblock\", \"openvariable\", \"closevariable\",\n      \"openbrace\", \"closebrace\", \"opencomment\",\n      \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n      \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n      \"endblocktrans\", \"get_available_languages\",\n      \"get_current_language_bidi\", \"plural\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if(!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if(state.operator) {\n          state.operator = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if(state.sign) {\n          state.sign = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if(state.instring) {\n          if(ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if(ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if(stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if(stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if(stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if(stream.eat(\" \") || stream.sol()) {\n            if(stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if(stream.match(atom)) {\n              return \"atom\";\n            }\n            if(stream.match(number)) {\n              return \"number\";\n            }\n            if(stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (ch = stream.eat(\"#\")) {\n          state.incomment = true;\n          if(!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if(ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n});\n"]}