{"version":3,"sources":["mode/jsx/jsx.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","Context","state","mode","depth","prev","this","copyContext","context","copyState","defineMode","config","modeConfig","flatXMLIndent","tagName","result","xmlMode","indent","token","stream","xmlToken","jsToken","cx","match","skipToEnd","peek","skipAttribute","xmlContext","startOfLine","indentUnit","lexical","indented","startState","jsMode","stop","style","cur","current","test","indexOf","backUp","length","expressionAllowed","skipExpression","getMode","name","allowMissing","multilineTagIndentPastTag","base","textAfter","fullLine","innerMode","defineMIME"],"mappings":"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","file":"../../../mode/jsx/jsx.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../Coder\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../Coder\", \"../xml/xml\", \"../javascript/javascript\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n\n  // Depth means the amount of open braces in JS context, in XML\n  // context 0 means not in tag, 1 means in tag, and 2 means in tag\n  // and js block comment.\n  function Context(state, mode, depth, prev) {\n    this.state = state; this.mode = mode; this.depth = depth; this.prev = prev\n  }\n\n  function copyContext(context) {\n    return new Context(CodeMirror.copyState(context.mode, context.state),\n                       context.mode,\n                       context.depth,\n                       context.prev && copyContext(context.prev))\n  }\n\n  CodeMirror.defineMode(\"jsx\", function(config, modeConfig) {\n    var xmlMode = CodeMirror.getMode(config, {name: \"xml\", allowMissing: true, multilineTagIndentPastTag: false})\n    var jsMode = CodeMirror.getMode(config, modeConfig && modeConfig.base || \"javascript\")\n\n    function flatXMLIndent(state) {\n      var tagName = state.tagName\n      state.tagName = null\n      var result = xmlMode.indent(state, \"\")\n      state.tagName = tagName\n      return result\n    }\n\n    function token(stream, state) {\n      if (state.context.mode == xmlMode)\n        return xmlToken(stream, state, state.context)\n      else\n        return jsToken(stream, state, state.context)\n    }\n\n    function xmlToken(stream, state, cx) {\n      if (cx.depth == 2) { // Inside a JS /* */ comment\n        if (stream.match(/^.*?\\*\\//)) cx.depth = 1\n        else stream.skipToEnd()\n        return \"comment\"\n      }\n\n      if (stream.peek() == \"{\") {\n        xmlMode.skipAttribute(cx.state)\n\n        var indent = flatXMLIndent(cx.state), xmlContext = cx.state.context\n        // If JS starts on same line as tag\n        if (xmlContext && stream.match(/^[^>]*>\\s*$/, false)) {\n          while (xmlContext.prev && !xmlContext.startOfLine)\n            xmlContext = xmlContext.prev\n          // If tag starts the line, use XML indentation level\n          if (xmlContext.startOfLine) indent -= config.indentUnit\n          // Else use JS indentation level\n          else if (cx.prev.state.lexical) indent = cx.prev.state.lexical.indented\n        // Else if inside of tag\n        } else if (cx.depth == 1) {\n          indent += config.indentUnit\n        }\n\n        state.context = new Context(CodeMirror.startState(jsMode, indent),\n                                    jsMode, 0, state.context)\n        return null\n      }\n\n      if (cx.depth == 1) { // Inside of tag\n        if (stream.peek() == \"<\") { // Tag inside of tag\n          xmlMode.skipAttribute(cx.state)\n          state.context = new Context(CodeMirror.startState(xmlMode, flatXMLIndent(cx.state)),\n                                      xmlMode, 0, state.context)\n          return null\n        } else if (stream.match(\"//\")) {\n          stream.skipToEnd()\n          return \"comment\"\n        } else if (stream.match(\"/*\")) {\n          cx.depth = 2\n          return token(stream, state)\n        }\n      }\n\n      var style = xmlMode.token(stream, cx.state), cur = stream.current(), stop\n      if (/\\btag\\b/.test(style)) {\n        if (/>$/.test(cur)) {\n          if (cx.state.context) cx.depth = 0\n          else state.context = state.context.prev\n        } else if (/^</.test(cur)) {\n          cx.depth = 1\n        }\n      } else if (!style && (stop = cur.indexOf(\"{\")) > -1) {\n        stream.backUp(cur.length - stop)\n      }\n      return style\n    }\n\n    function jsToken(stream, state, cx) {\n      if (stream.peek() == \"<\" && jsMode.expressionAllowed(stream, cx.state)) {\n        jsMode.skipExpression(cx.state)\n        state.context = new Context(CodeMirror.startState(xmlMode, jsMode.indent(cx.state, \"\")),\n                                    xmlMode, 0, state.context)\n        return null\n      }\n\n      var style = jsMode.token(stream, cx.state)\n      if (!style && cx.depth != null) {\n        var cur = stream.current()\n        if (cur == \"{\") {\n          cx.depth++\n        } else if (cur == \"}\") {\n          if (--cx.depth == 0) state.context = state.context.prev\n        }\n      }\n      return style\n    }\n\n    return {\n      startState: function() {\n        return {context: new Context(CodeMirror.startState(jsMode), jsMode)}\n      },\n\n      copyState: function(state) {\n        return {context: copyContext(state.context)}\n      },\n\n      token: token,\n\n      indent: function(state, textAfter, fullLine) {\n        return state.context.mode.indent(state.context.state, textAfter, fullLine)\n      },\n\n      innerMode: function(state) {\n        return state.context\n      }\n    }\n  }, \"xml\", \"javascript\")\n\n  CodeMirror.defineMIME(\"text/jsx\", \"jsx\")\n});\n"]}