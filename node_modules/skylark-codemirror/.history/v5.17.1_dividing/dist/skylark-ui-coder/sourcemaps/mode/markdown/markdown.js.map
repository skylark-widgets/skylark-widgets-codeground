{"version":3,"sources":["mode/markdown/markdown.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","cmCfg","modeCfg","getMode","name","findModeByName","found","mime","mimes","mode","switchInline","stream","state","f","inline","switchBlock","block","lineIsEmpty","line","test","string","blankLine","linkTitle","em","strong","strikethrough","quote","indentedCode","htmlModeMissing","htmlBlock","inlineNormal","blockNormal","trailingSpace","trailingSpaceNewLine","prevLine","thisLine","sol","prevLineIsList","list","prevLineIsIndentedCode","indentationDiff","indentation","match","skipToEnd","tokenTypes","code","eatSpace","atxHeaderRE","length","header","highlightFormatting","formatting","getType","setextHeaderRE","charAt","eat","peek","footnoteLink","hrRE","hr","ulRE","olRE","listType","column","current","listStack","pop","push","taskLists","taskListRE","taskList","fencedCodeBlocks","fencedCodeRE","fencedChars","localMode","localState","startState","local","style","htmlMode","token","htmlState","inner","innerMode","tagStart","context","tokenize","isInText","md_inside","indexOf","leavingLocal","returnType","styles","i","maxBlockquoteDepth","taskOpen","join","taskClosed","linkHref","linkText","image","imageAltText","imageMarker","listMod","list2","list3","list1","handleText","textRE","text","ch","next","matchCh","replace","regex","RegExp","previousFormatting","eatWhile","count","t","type","formattingEscape","linkInline","linkEmail","end","pos","atts","substring","start","backUp","ignoreUnderscore","underscoresBreakWords","prevPos","prevCh","getLinkHrefInside","endChar","returnState","linkRE","footnoteLinkInside","footnoteUrl","undefined","tokenTypeOverrides","tokenType","hasOwnProperty","allowAtxHeaderWithoutSpace",")","]","copyState","s","slice","forceBlankLine","Math","min","fold","defineMIME"],"mappings":"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","file":"../../../mode/markdown/markdown.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../Coder\"), require(\"../xml/xml\"), require(\"../meta\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../Coder\", \"../xml/xml\", \"../meta\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"markdown\", function(cmCfg, modeCfg) {\n\n  var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n  var htmlModeMissing = htmlMode.name == \"null\"\n\n  function getMode(name) {\n    if (CodeMirror.findModeByName) {\n      var found = CodeMirror.findModeByName(name);\n      if (found) name = found.mime || found.mimes[0];\n    }\n    var mode = CodeMirror.getMode(cmCfg, name);\n    return mode.name == \"null\" ? null : mode;\n  }\n\n  // Should characters that affect highlighting be highlighted separate?\n  // Does not include characters that will be output (such as `1.` and `-` for lists)\n  if (modeCfg.highlightFormatting === undefined)\n    modeCfg.highlightFormatting = false;\n\n  // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n  // Excess `>` will emit `error` token.\n  if (modeCfg.maxBlockquoteDepth === undefined)\n    modeCfg.maxBlockquoteDepth = 0;\n\n  // Should underscores in words open/close em/strong?\n  if (modeCfg.underscoresBreakWords === undefined)\n    modeCfg.underscoresBreakWords = true;\n\n  // Use `fencedCodeBlocks` to configure fenced code blocks. false to\n  // disable, string to specify a precise regexp that the fence should\n  // match, and true to allow three or more backticks or tildes (as\n  // per CommonMark).\n\n  // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n  if (modeCfg.taskLists === undefined) modeCfg.taskLists = false;\n\n  // Turn on strikethrough syntax\n  if (modeCfg.strikethrough === undefined)\n    modeCfg.strikethrough = false;\n\n  // Allow token types to be overridden by user-provided token types.\n  if (modeCfg.tokenTypeOverrides === undefined)\n    modeCfg.tokenTypeOverrides = {};\n\n  var tokenTypes = {\n    header: \"header\",\n    code: \"comment\",\n    quote: \"quote\",\n    list1: \"variable-2\",\n    list2: \"variable-3\",\n    list3: \"keyword\",\n    hr: \"hr\",\n    image: \"image\",\n    imageAltText: \"image-alt-text\",\n    imageMarker: \"image-marker\",\n    formatting: \"formatting\",\n    linkInline: \"link\",\n    linkEmail: \"link\",\n    linkText: \"link\",\n    linkHref: \"string\",\n    em: \"em\",\n    strong: \"strong\",\n    strikethrough: \"strikethrough\"\n  };\n\n  for (var tokenType in tokenTypes) {\n    if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n      tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n    }\n  }\n\n  var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/\n  ,   ulRE = /^[*\\-+]\\s+/\n  ,   olRE = /^[0-9]+([.)])\\s+/\n  ,   taskListRE = /^\\[(x| )\\](?=\\s)/ // Must follow ulRE or olRE\n  ,   atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/\n  ,   setextHeaderRE = /^ *(?:\\={1,}|-{1,})\\s*$/\n  ,   textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~]+/\n  ,   fencedCodeRE = new RegExp(\"^(\" + (modeCfg.fencedCodeBlocks === true ? \"~~~+|```+\" : modeCfg.fencedCodeBlocks) +\n                                \")[ \\\\t]*([\\\\w+#\\-]*)\");\n\n  function switchInline(stream, state, f) {\n    state.f = state.inline = f;\n    return f(stream, state);\n  }\n\n  function switchBlock(stream, state, f) {\n    state.f = state.block = f;\n    return f(stream, state);\n  }\n\n  function lineIsEmpty(line) {\n    return !line || !/\\S/.test(line.string)\n  }\n\n  // Blocks\n\n  function blankLine(state) {\n    // Reset linkTitle state\n    state.linkTitle = false;\n    // Reset EM state\n    state.em = false;\n    // Reset STRONG state\n    state.strong = false;\n    // Reset strikethrough state\n    state.strikethrough = false;\n    // Reset state.quote\n    state.quote = 0;\n    // Reset state.indentedCode\n    state.indentedCode = false;\n    if (htmlModeMissing && state.f == htmlBlock) {\n      state.f = inlineNormal;\n      state.block = blockNormal;\n    }\n    // Reset state.trailingSpace\n    state.trailingSpace = 0;\n    state.trailingSpaceNewLine = false;\n    // Mark this line as blank\n    state.prevLine = state.thisLine\n    state.thisLine = null\n    return null;\n  }\n\n  function blockNormal(stream, state) {\n\n    var sol = stream.sol();\n\n    var prevLineIsList = state.list !== false,\n        prevLineIsIndentedCode = state.indentedCode;\n\n    state.indentedCode = false;\n\n    if (prevLineIsList) {\n      if (state.indentationDiff >= 0) { // Continued list\n        if (state.indentationDiff < 4) { // Only adjust indentation if *not* a code block\n          state.indentation -= state.indentationDiff;\n        }\n        state.list = null;\n      } else if (state.indentation > 0) {\n        state.list = null;\n      } else { // No longer a list\n        state.list = false;\n      }\n    }\n\n    var match = null;\n    if (state.indentationDiff >= 4) {\n      stream.skipToEnd();\n      if (prevLineIsIndentedCode || lineIsEmpty(state.prevLine)) {\n        state.indentation -= 4;\n        state.indentedCode = true;\n        return tokenTypes.code;\n      } else {\n        return null;\n      }\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if ((match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n      state.header = match[1].length;\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      state.f = state.inline;\n      return getType(state);\n    } else if (!lineIsEmpty(state.prevLine) && !state.quote && !prevLineIsList &&\n               !prevLineIsIndentedCode && (match = stream.match(setextHeaderRE))) {\n      state.header = match[0].charAt(0) == '=' ? 1 : 2;\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      state.f = state.inline;\n      return getType(state);\n    } else if (stream.eat('>')) {\n      state.quote = sol ? 1 : state.quote + 1;\n      if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n      stream.eatSpace();\n      return getType(state);\n    } else if (stream.peek() === '[') {\n      return switchInline(stream, state, footnoteLink);\n    } else if (stream.match(hrRE, true)) {\n      state.hr = true;\n      return tokenTypes.hr;\n    } else if ((lineIsEmpty(state.prevLine) || prevLineIsList) && (stream.match(ulRE, false) || stream.match(olRE, false))) {\n      var listType = null;\n      if (stream.match(ulRE, true)) {\n        listType = 'ul';\n      } else {\n        stream.match(olRE, true);\n        listType = 'ol';\n      }\n      state.indentation = stream.column() + stream.current().length;\n      state.list = true;\n\n      // While this list item's marker's indentation\n      // is less than the deepest list item's content's indentation,\n      // pop the deepest list item indentation off the stack.\n      while (state.listStack && stream.column() < state.listStack[state.listStack.length - 1]) {\n        state.listStack.pop();\n      }\n\n      // Add this list item's content's indentation to the stack\n      state.listStack.push(state.indentation);\n\n      if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n        state.taskList = true;\n      }\n      state.f = state.inline;\n      if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n      return getType(state);\n    } else if (modeCfg.fencedCodeBlocks && (match = stream.match(fencedCodeRE, true))) {\n      state.fencedChars = match[1]\n      // try switching mode\n      state.localMode = getMode(match[2]);\n      if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n      state.f = state.block = local;\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      state.code = -1\n      return getType(state);\n    }\n\n    return switchInline(stream, state, state.inline);\n  }\n\n  function htmlBlock(stream, state) {\n    var style = htmlMode.token(stream, state.htmlState);\n    if (!htmlModeMissing) {\n      var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n      if ((inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n           (!inner.state.context && inner.state.tokenize.isInText)) ||\n          (state.md_inside && stream.current().indexOf(\">\") > -1)) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    return style;\n  }\n\n  function local(stream, state) {\n    if (state.fencedChars && stream.match(state.fencedChars, false)) {\n      state.localMode = state.localState = null;\n      state.f = state.block = leavingLocal;\n      return null;\n    } else if (state.localMode) {\n      return state.localMode.token(stream, state.localState);\n    } else {\n      stream.skipToEnd();\n      return tokenTypes.code;\n    }\n  }\n\n  function leavingLocal(stream, state) {\n    stream.match(state.fencedChars);\n    state.block = blockNormal;\n    state.f = inlineNormal;\n    state.fencedChars = null;\n    if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n    state.code = 1\n    var returnType = getType(state);\n    state.code = 0\n    return returnType;\n  }\n\n  // Inline\n  function getType(state) {\n    var styles = [];\n\n    if (state.formatting) {\n      styles.push(tokenTypes.formatting);\n\n      if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n      for (var i = 0; i < state.formatting.length; i++) {\n        styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n        if (state.formatting[i] === \"header\") {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n        }\n\n        // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n        // Add `error` instead if the maximum blockquote nesting depth is passed\n        if (state.formatting[i] === \"quote\") {\n          if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n          } else {\n            styles.push(\"error\");\n          }\n        }\n      }\n    }\n\n    if (state.taskOpen) {\n      styles.push(\"meta\");\n      return styles.length ? styles.join(' ') : null;\n    }\n    if (state.taskClosed) {\n      styles.push(\"property\");\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    if (state.linkHref) {\n      styles.push(tokenTypes.linkHref, \"url\");\n    } else { // Only apply inline styles to non-url text\n      if (state.strong) { styles.push(tokenTypes.strong); }\n      if (state.em) { styles.push(tokenTypes.em); }\n      if (state.strikethrough) { styles.push(tokenTypes.strikethrough); }\n      if (state.linkText) { styles.push(tokenTypes.linkText); }\n      if (state.code) { styles.push(tokenTypes.code); }\n      if (state.image) { styles.push(tokenTypes.image); }\n      if (state.imageAltText) { styles.push(tokenTypes.imageAltText, \"link\"); }\n      if (state.imageMarker) { styles.push(tokenTypes.imageMarker); }\n    }\n\n    if (state.header) { styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header); }\n\n    if (state.quote) {\n      styles.push(tokenTypes.quote);\n\n      // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n      if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n        styles.push(tokenTypes.quote + \"-\" + state.quote);\n      } else {\n        styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n      }\n    }\n\n    if (state.list !== false) {\n      var listMod = (state.listStack.length - 1) % 3;\n      if (!listMod) {\n        styles.push(tokenTypes.list1);\n      } else if (listMod === 1) {\n        styles.push(tokenTypes.list2);\n      } else {\n        styles.push(tokenTypes.list3);\n      }\n    }\n\n    if (state.trailingSpaceNewLine) {\n      styles.push(\"trailing-space-new-line\");\n    } else if (state.trailingSpace) {\n      styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n    }\n\n    return styles.length ? styles.join(' ') : null;\n  }\n\n  function handleText(stream, state) {\n    if (stream.match(textRE, true)) {\n      return getType(state);\n    }\n    return undefined;\n  }\n\n  function inlineNormal(stream, state) {\n    var style = state.text(stream, state);\n    if (typeof style !== 'undefined')\n      return style;\n\n    if (state.list) { // List marker (*, +, -, 1., etc)\n      state.list = null;\n      return getType(state);\n    }\n\n    if (state.taskList) {\n      var taskOpen = stream.match(taskListRE, true)[1] !== \"x\";\n      if (taskOpen) state.taskOpen = true;\n      else state.taskClosed = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"task\";\n      state.taskList = false;\n      return getType(state);\n    }\n\n    state.taskOpen = false;\n    state.taskClosed = false;\n\n    if (state.header && stream.match(/^#+$/, true)) {\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      return getType(state);\n    }\n\n    // Get sol() value now, before character is consumed\n    var sol = stream.sol();\n\n    var ch = stream.next();\n\n    // Matches link titles present on next line\n    if (state.linkTitle) {\n      state.linkTitle = false;\n      var matchCh = ch;\n      if (ch === '(') {\n        matchCh = ')';\n      }\n      matchCh = (matchCh+'').replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\");\n      var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n      if (stream.match(new RegExp(regex), true)) {\n        return tokenTypes.linkHref;\n      }\n    }\n\n    // If this block is changed, it may need to be updated in GFM mode\n    if (ch === '`') {\n      var previousFormatting = state.formatting;\n      if (modeCfg.highlightFormatting) state.formatting = \"code\";\n      stream.eatWhile('`');\n      var count = stream.current().length\n      if (state.code == 0) {\n        state.code = count\n        return getType(state)\n      } else if (count == state.code) { // Must be exact\n        var t = getType(state)\n        state.code = 0\n        return t\n      } else {\n        state.formatting = previousFormatting\n        return getType(state)\n      }\n    } else if (state.code) {\n      return getType(state);\n    }\n\n    if (ch === '\\\\') {\n      stream.next();\n      if (modeCfg.highlightFormatting) {\n        var type = getType(state);\n        var formattingEscape = tokenTypes.formatting + \"-escape\";\n        return type ? type + \" \" + formattingEscape : formattingEscape;\n      }\n    }\n\n    if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n      state.imageMarker = true;\n      state.image = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === '[' && state.imageMarker) {\n      state.imageMarker = false;\n      state.imageAltText = true\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.imageAltText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      var type = getType(state);\n      state.imageAltText = false;\n      state.image = false;\n      state.inline = state.f = linkHref;\n      return type;\n    }\n\n    if (ch === '[' && stream.match(/[^\\]]*\\](\\(.*\\)| ?\\[.*?\\])/, false) && !state.image) {\n      state.linkText = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.linkText && stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false)) {\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      state.linkText = false;\n      state.inline = state.f = linkHref;\n      return type;\n    }\n\n    if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkEmail;\n    }\n\n    if (ch === '<' && stream.match(/^(!--|\\w)/, false)) {\n      var end = stream.string.indexOf(\">\", stream.pos);\n      if (end != -1) {\n        var atts = stream.string.substring(stream.start, end);\n        if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n      }\n      stream.backUp(1);\n      state.htmlState = CodeMirror.startState(htmlMode);\n      return switchBlock(stream, state, htmlBlock);\n    }\n\n    if (ch === '<' && stream.match(/^\\/\\w*?>/)) {\n      state.md_inside = false;\n      return \"tag\";\n    }\n\n    var ignoreUnderscore = false;\n    if (!modeCfg.underscoresBreakWords) {\n      if (ch === '_' && stream.peek() !== '_' && stream.match(/(\\w)/, false)) {\n        var prevPos = stream.pos - 2;\n        if (prevPos >= 0) {\n          var prevCh = stream.string.charAt(prevPos);\n          if (prevCh !== '_' && prevCh.match(/(\\w)/, false)) {\n            ignoreUnderscore = true;\n          }\n        }\n      }\n    }\n    if (ch === '*' || (ch === '_' && !ignoreUnderscore)) {\n      if (sol && stream.peek() === ' ') {\n        // Do nothing, surrounded by newline and space\n      } else if (state.strong === ch && stream.eat(ch)) { // Remove STRONG\n        if (modeCfg.highlightFormatting) state.formatting = \"strong\";\n        var t = getType(state);\n        state.strong = false;\n        return t;\n      } else if (!state.strong && stream.eat(ch)) { // Add STRONG\n        state.strong = ch;\n        if (modeCfg.highlightFormatting) state.formatting = \"strong\";\n        return getType(state);\n      } else if (state.em === ch) { // Remove EM\n        if (modeCfg.highlightFormatting) state.formatting = \"em\";\n        var t = getType(state);\n        state.em = false;\n        return t;\n      } else if (!state.em) { // Add EM\n        state.em = ch;\n        if (modeCfg.highlightFormatting) state.formatting = \"em\";\n        return getType(state);\n      }\n    } else if (ch === ' ') {\n      if (stream.eat('*') || stream.eat('_')) { // Probably surrounded by spaces\n        if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n          return getType(state);\n        } else { // Not surrounded by spaces, back up pointer\n          stream.backUp(1);\n        }\n      }\n    }\n\n    if (modeCfg.strikethrough) {\n      if (ch === '~' && stream.eatWhile(ch)) {\n        if (state.strikethrough) {// Remove strikethrough\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          var t = getType(state);\n          state.strikethrough = false;\n          return t;\n        } else if (stream.match(/^[^\\s]/, false)) {// Add strikethrough\n          state.strikethrough = true;\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          return getType(state);\n        }\n      } else if (ch === ' ') {\n        if (stream.match(/^~~/, true)) { // Probably surrounded by space\n          if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n            return getType(state);\n          } else { // Not surrounded by spaces, back up pointer\n            stream.backUp(2);\n          }\n        }\n      }\n    }\n\n    if (ch === ' ') {\n      if (stream.match(/ +$/, false)) {\n        state.trailingSpace++;\n      } else if (state.trailingSpace) {\n        state.trailingSpaceNewLine = true;\n      }\n    }\n\n    return getType(state);\n  }\n\n  function linkInline(stream, state) {\n    var ch = stream.next();\n\n    if (ch === \">\") {\n      state.f = state.inline = inlineNormal;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    stream.match(/^[^>]+/, true);\n\n    return tokenTypes.linkInline;\n  }\n\n  function linkHref(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    var ch = stream.next();\n    if (ch === '(' || ch === '[') {\n      state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\", 0);\n      if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n      state.linkHref = true;\n      return getType(state);\n    }\n    return 'error';\n  }\n\n  var linkRE = {\n    \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n    \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\\\]]|\\\\.)*\\])*?(?=\\])/\n  }\n\n  function getLinkHrefInside(endChar) {\n    return function(stream, state) {\n      var ch = stream.next();\n\n      if (ch === endChar) {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        var returnState = getType(state);\n        state.linkHref = false;\n        return returnState;\n      }\n\n      stream.match(linkRE[endChar])\n      state.linkHref = true;\n      return getType(state);\n    };\n  }\n\n  function footnoteLink(stream, state) {\n    if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n      state.f = footnoteLinkInside;\n      stream.next(); // Consume [\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      state.linkText = true;\n      return getType(state);\n    }\n    return switchInline(stream, state, inlineNormal);\n  }\n\n  function footnoteLinkInside(stream, state) {\n    if (stream.match(/^\\]:/, true)) {\n      state.f = state.inline = footnoteUrl;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var returnType = getType(state);\n      state.linkText = false;\n      return returnType;\n    }\n\n    stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n\n    return tokenTypes.linkText;\n  }\n\n  function footnoteUrl(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    // Match URL\n    stream.match(/^[^\\s]+/, true);\n    // Check for link title\n    if (stream.peek() === undefined) { // End of line, set flag to check next line\n      state.linkTitle = true;\n    } else { // More content on line, check if link title\n      stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\\\\\|\\\\.)+\"|'(?:[^'\\\\]|\\\\\\\\|\\\\.)+'|\\((?:[^)\\\\]|\\\\\\\\|\\\\.)+\\)))?/, true);\n    }\n    state.f = state.inline = inlineNormal;\n    return tokenTypes.linkHref + \" url\";\n  }\n\n  var mode = {\n    startState: function() {\n      return {\n        f: blockNormal,\n\n        prevLine: null,\n        thisLine: null,\n\n        block: blockNormal,\n        htmlState: null,\n        indentation: 0,\n\n        inline: inlineNormal,\n        text: handleText,\n\n        formatting: false,\n        linkText: false,\n        linkHref: false,\n        linkTitle: false,\n        code: 0,\n        em: false,\n        strong: false,\n        header: 0,\n        hr: false,\n        taskList: false,\n        list: false,\n        listStack: [],\n        quote: 0,\n        trailingSpace: 0,\n        trailingSpaceNewLine: false,\n        strikethrough: false,\n        fencedChars: null\n      };\n    },\n\n    copyState: function(s) {\n      return {\n        f: s.f,\n\n        prevLine: s.prevLine,\n        thisLine: s.thisLine,\n\n        block: s.block,\n        htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n        indentation: s.indentation,\n\n        localMode: s.localMode,\n        localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n\n        inline: s.inline,\n        text: s.text,\n        formatting: false,\n        linkTitle: s.linkTitle,\n        code: s.code,\n        em: s.em,\n        strong: s.strong,\n        strikethrough: s.strikethrough,\n        header: s.header,\n        hr: s.hr,\n        taskList: s.taskList,\n        list: s.list,\n        listStack: s.listStack.slice(0),\n        quote: s.quote,\n        indentedCode: s.indentedCode,\n        trailingSpace: s.trailingSpace,\n        trailingSpaceNewLine: s.trailingSpaceNewLine,\n        md_inside: s.md_inside,\n        fencedChars: s.fencedChars\n      };\n    },\n\n    token: function(stream, state) {\n\n      // Reset state.formatting\n      state.formatting = false;\n\n      if (stream != state.thisLine) {\n        var forceBlankLine = state.header || state.hr;\n\n        // Reset state.header and state.hr\n        state.header = 0;\n        state.hr = false;\n\n        if (stream.match(/^\\s*$/, true) || forceBlankLine) {\n          blankLine(state);\n          if (!forceBlankLine) return null\n          state.prevLine = null\n        }\n\n        state.prevLine = state.thisLine\n        state.thisLine = stream\n\n        // Reset state.taskList\n        state.taskList = false;\n\n        // Reset state.trailingSpace\n        state.trailingSpace = 0;\n        state.trailingSpaceNewLine = false;\n\n        state.f = state.block;\n        var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, '    ').length;\n        state.indentationDiff = Math.min(indentation - state.indentation, 4);\n        state.indentation = state.indentation + state.indentationDiff;\n        if (indentation > 0) return null;\n      }\n      return state.f(stream, state);\n    },\n\n    innerMode: function(state) {\n      if (state.block == htmlBlock) return {state: state.htmlState, mode: htmlMode};\n      if (state.localState) return {state: state.localState, mode: state.localMode};\n      return {state: state, mode: mode};\n    },\n\n    blankLine: blankLine,\n\n    getType: getType,\n\n    fold: \"markdown\"\n  };\n  return mode;\n}, \"xml\");\n\nCodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n\n});\n"]}