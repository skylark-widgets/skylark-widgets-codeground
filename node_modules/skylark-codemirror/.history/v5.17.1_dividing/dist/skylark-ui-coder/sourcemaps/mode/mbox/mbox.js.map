{"version":3,"sources":["mode/mbox/mbox.js"],"names":["define","CodeMirror","styleForHeader","header","readToken","stream","state","sol","inSeparator","inHeader","match","whitespace","separator","inHeaders","emailPermitted","rfc2822HeaderNoEmail","rfc2822Header","skipToEnd","email","untilEmail","style","bracketedEmail","untilBracketedEmail","rfc2822","rfc2822NoEmail","registerHelper","concat","RegExp","join","defineMode","startState","token","blankLine","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GACjC,YAuBA,SAASC,GAAeC,GACtB,MAAe,YAAXA,EAA6B,SAC1B,SAGT,QAASC,GAAUC,EAAQC,GACzB,GAAID,EAAOE,MAAO,CAGhB,GADAD,EAAME,aAAc,EAChBF,EAAMG,UAAYJ,EAAOK,MAAMC,GAEjC,MAAO,KAMT,IAJEL,EAAMG,UAAW,EACjBH,EAAMH,OAAS,KAGbE,EAAOK,MAAME,GAGf,MAFAN,GAAMO,WAAY,EAClBP,EAAME,aAAc,EACb,MAGT,IAAIE,GACAI,GAAiB,CACrB,QAAKJ,EAAQL,EAAOK,MAAMK,MACrBD,GAAiB,KAAUJ,EAAQL,EAAOK,MAAMM,KACnDV,EAAMO,WAAY,EAClBP,EAAMG,UAAW,EACjBH,EAAMQ,eAAiBA,EACvBR,EAAMH,OAASO,EAAM,GACd,QAKLJ,EAAMO,YAAcH,EAAQL,EAAOK,MAAMP,KAC3CG,EAAMG,UAAW,EACjBH,EAAMQ,gBAAiB,EACvBR,EAAMH,OAASO,EAAM,GACd,SAGTJ,EAAMO,WAAY,EAClBR,EAAOY,YACA,MAGT,GAAIX,EAAME,YACR,MAAIH,GAAOK,MAAMQ,GAAe,OAC5Bb,EAAOK,MAAMS,GAAoB,QACrCd,EAAOY,YACA,OAGT,IAAIX,EAAMG,SAAU,CAClB,GAAIW,GAAQlB,EAAeI,EAAMH,OAEjC,IAAIG,EAAMQ,eAAgB,CACxB,GAAIT,EAAOK,MAAMW,GAAiB,MAAOD,GAAQ,OACjD,IAAIf,EAAOK,MAAMY,GAAsB,MAAOF,GAGhD,MADAf,GAAOY,YACAG,EAIT,MADAf,GAAOY,YACA,KAxFT,GAAIM,IACF,OAAQ,SAAU,WAAY,KAAM,KAAM,MAAO,aACjD,cAAe,aAAc,cAAe,gBAAiB,YAC7D,YAAa,aAAc,oBAAqB,cAAe,YAE7DC,GACF,OAAQ,UAAW,WAAY,WAAY,cAG7CvB,GAAWwB,eAAe,YAAa,OAAQF,EAAQG,OAAOF,GAE9D,IAAIb,GAAa,SACbC,EAAY,SACZI,EAAgB,GAAIW,QAAO,KAAOJ,EAAQK,KAAK,KAAO,OACtDb,EAAuB,GAAIY,QAAO,KAAOH,EAAeI,KAAK,KAAO,OACpEzB,EAAS,UACTe,EAAQ,eACRC,EAAa,uBACbE,EAAiB,SACjBC,EAAsB,cAwE1BrB,GAAW4B,WAAW,OAAQ,WAC5B,OACEC,WAAY,WACV,OAEEtB,aAAa,EAEbC,UAAU,EAEVK,gBAAgB,EAEhBX,OAAQ,KAERU,WAAW,IAGfkB,MAAO3B,EACP4B,UAAW,SAAS1B,GAClBA,EAAMO,UAAYP,EAAME,YAAcF,EAAMG,UAAW,MAK7DR,EAAWgC,WAAW,mBAAoB","file":"../../../mode/mbox/mbox.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nvar rfc2822 = [\n  \"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\",\n  \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\",\n  \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"\n];\nvar rfc2822NoEmail = [\n  \"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"\n];\n\nCodeMirror.registerHelper(\"hintWords\", \"mbox\", rfc2822.concat(rfc2822NoEmail));\n\nvar whitespace = /^[ \\t]/;\nvar separator = /^From /; // See RFC 4155\nvar rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\nvar rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\nvar header = /^[^:]+:/; // Optional fields defined in RFC 2822\nvar email = /^[^ ]+@[^ ]+/;\nvar untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar bracketedEmail = /^<.*?>/;\nvar untilBracketedEmail = /^.*?(?=<.*>)/;\n\nfunction styleForHeader(header) {\n  if (header === \"Subject\") return \"header\";\n  return \"string\";\n}\n\nfunction readToken(stream, state) {\n  if (stream.sol()) {\n    // From last line\n    state.inSeparator = false;\n    if (state.inHeader && stream.match(whitespace)) {\n      // Header folding\n      return null;\n    } else {\n      state.inHeader = false;\n      state.header = null;\n    }\n\n    if (stream.match(separator)) {\n      state.inHeaders = true;\n      state.inSeparator = true;\n      return \"atom\";\n    }\n\n    var match;\n    var emailPermitted = false;\n    if ((match = stream.match(rfc2822HeaderNoEmail)) ||\n        (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n      state.inHeaders = true;\n      state.inHeader = true;\n      state.emailPermitted = emailPermitted;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    // Use vim's heuristics: recognize custom headers only if the line is in a\n    // block of legitimate headers.\n    if (state.inHeaders && (match = stream.match(header))) {\n      state.inHeader = true;\n      state.emailPermitted = true;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    state.inHeaders = false;\n    stream.skipToEnd();\n    return null;\n  }\n\n  if (state.inSeparator) {\n    if (stream.match(email)) return \"link\";\n    if (stream.match(untilEmail)) return \"atom\";\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (state.inHeader) {\n    var style = styleForHeader(state.header);\n\n    if (state.emailPermitted) {\n      if (stream.match(bracketedEmail)) return style + \" link\";\n      if (stream.match(untilBracketedEmail)) return style;\n    }\n    stream.skipToEnd();\n    return style;\n  }\n\n  stream.skipToEnd();\n  return null;\n};\n\nCodeMirror.defineMode(\"mbox\", function() {\n  return {\n    startState: function() {\n      return {\n        // Is in a mbox separator\n        inSeparator: false,\n        // Is in a mail header\n        inHeader: false,\n        // If bracketed email is permitted. Only applicable when inHeader\n        emailPermitted: false,\n        // Name of current header\n        header: null,\n        // Is in a region of mail headers\n        inHeaders: false\n      };\n    },\n    token: readToken,\n    blankLine: function(state) {\n      state.inHeaders = state.inSeparator = state.inHeader = false;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"application/mbox\", \"mbox\");\n});\n"]}