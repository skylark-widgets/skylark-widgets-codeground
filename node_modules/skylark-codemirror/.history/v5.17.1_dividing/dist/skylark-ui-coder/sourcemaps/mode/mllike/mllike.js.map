{"version":3,"sources":["mode/mllike/mllike.js"],"names":["define","CodeMirror","defineMode","_config","parserConfig","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","commentLevel","tokenComment","eatWhile","slashComments","skipToEnd","test","cur","current","words","hasOwnProperty","end","escaped","prev","let","rec","in","of","and","if","then","else","for","to","while","do","done","fun","function","val","type","mutable","match","with","try","open","ignore","begin","extraWords","prop","startState","token","eatSpace","blockCommentStart","blockCommentEnd","lineComment","defineMIME","name","succ","trace","exit","print_string","print_endline","true","false","raise","abstract","as","assert","base","class","default","delegate","downcast","downto","elif","exception","extern","finally","global","inherit","inline","interface","internal","lazy","let!","member","module","namespace","new","null","override","private","public","return","return!","select","static","struct","upcast","use","use!","when","yield","yield!","List","Seq","Map","Set","int","string","failwith","not"],"mappings":"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","file":"../../../mode/mllike/mllike.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('mllike', function(_config, parserConfig) {\n  var words = {\n    'let': 'keyword',\n    'rec': 'keyword',\n    'in': 'keyword',\n    'of': 'keyword',\n    'and': 'keyword',\n    'if': 'keyword',\n    'then': 'keyword',\n    'else': 'keyword',\n    'for': 'keyword',\n    'to': 'keyword',\n    'while': 'keyword',\n    'do': 'keyword',\n    'done': 'keyword',\n    'fun': 'keyword',\n    'function': 'keyword',\n    'val': 'keyword',\n    'type': 'keyword',\n    'mutable': 'keyword',\n    'match': 'keyword',\n    'with': 'keyword',\n    'try': 'keyword',\n    'open': 'builtin',\n    'ignore': 'builtin',\n    'begin': 'keyword',\n    'end': 'keyword'\n  };\n\n  var extraWords = parserConfig.extraWords || {};\n  for (var prop in extraWords) {\n    if (extraWords.hasOwnProperty(prop)) {\n      words[prop] = parserConfig.extraWords[prop];\n    }\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n    if (ch === '(') {\n      if (stream.eat('*')) {\n        state.commentLevel++;\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n    }\n    if (ch === '~') {\n      stream.eatWhile(/\\w/);\n      return 'variable-2';\n    }\n    if (ch === '`') {\n      stream.eatWhile(/\\w/);\n      return 'quote';\n    }\n    if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {\n      stream.skipToEnd();\n      return 'comment';\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\d]/);\n      if (stream.eat('.')) {\n        stream.eatWhile(/[\\d]/);\n      }\n      return 'number';\n    }\n    if ( /[+\\-*&%=<>!?|]/.test(ch)) {\n      return 'operator';\n    }\n    stream.eatWhile(/\\w/);\n    var cur = stream.current();\n    return words.hasOwnProperty(cur) ? words[cur] : 'variable';\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while(state.commentLevel > 0 && (next = stream.next()) != null) {\n      if (prev === '(' && next === '*') state.commentLevel++;\n      if (prev === '*' && next === ')') state.commentLevel--;\n      prev = next;\n    }\n    if (state.commentLevel <= 0) {\n      state.tokenize = tokenBase;\n    }\n    return 'comment';\n  }\n\n  return {\n    startState: function() {return {tokenize: tokenBase, commentLevel: 0};},\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n\n    blockCommentStart: \"(*\",\n    blockCommentEnd: \"*)\",\n    lineComment: parserConfig.slashComments ? \"//\" : null\n  };\n});\n\nCodeMirror.defineMIME('text/x-ocaml', {\n  name: 'mllike',\n  extraWords: {\n    'succ': 'keyword',\n    'trace': 'builtin',\n    'exit': 'builtin',\n    'print_string': 'builtin',\n    'print_endline': 'builtin',\n    'true': 'atom',\n    'false': 'atom',\n    'raise': 'keyword'\n  }\n});\n\nCodeMirror.defineMIME('text/x-fsharp', {\n  name: 'mllike',\n  extraWords: {\n    'abstract': 'keyword',\n    'as': 'keyword',\n    'assert': 'keyword',\n    'base': 'keyword',\n    'class': 'keyword',\n    'default': 'keyword',\n    'delegate': 'keyword',\n    'downcast': 'keyword',\n    'downto': 'keyword',\n    'elif': 'keyword',\n    'exception': 'keyword',\n    'extern': 'keyword',\n    'finally': 'keyword',\n    'global': 'keyword',\n    'inherit': 'keyword',\n    'inline': 'keyword',\n    'interface': 'keyword',\n    'internal': 'keyword',\n    'lazy': 'keyword',\n    'let!': 'keyword',\n    'member' : 'keyword',\n    'module': 'keyword',\n    'namespace': 'keyword',\n    'new': 'keyword',\n    'null': 'keyword',\n    'override': 'keyword',\n    'private': 'keyword',\n    'public': 'keyword',\n    'return': 'keyword',\n    'return!': 'keyword',\n    'select': 'keyword',\n    'static': 'keyword',\n    'struct': 'keyword',\n    'upcast': 'keyword',\n    'use': 'keyword',\n    'use!': 'keyword',\n    'val': 'keyword',\n    'when': 'keyword',\n    'yield': 'keyword',\n    'yield!': 'keyword',\n\n    'List': 'builtin',\n    'Seq': 'builtin',\n    'Map': 'builtin',\n    'Set': 'builtin',\n    'int': 'builtin',\n    'string': 'builtin',\n    'raise': 'builtin',\n    'failwith': 'builtin',\n    'not': 'builtin',\n    'true': 'builtin',\n    'false': 'builtin'\n  },\n  slashComments: true\n});\n\n});\n"]}