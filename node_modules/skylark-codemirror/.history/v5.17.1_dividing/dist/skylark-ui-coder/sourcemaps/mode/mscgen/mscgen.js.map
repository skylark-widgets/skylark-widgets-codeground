{"version":3,"sources":["mode/mscgen/mscgen.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","wordRegexpBoundary","pWords","RegExp","join","wordRegexp","startStateFn","inComment","inString","inAttributeList","inScript","copyStateFn","pState","produceTokenFunction","pConfig","pStream","match","brackets","singlecomment","skipToEnd","keywords","options","arcsWords","arcsOthers","operators","attributes","next","languages","mscgen","xu","msgenny","defineMode","_","modeConfig","language","startState","copyState","token","lineComment","blockCommentStart","blockCommentEnd","defineMIME","name"],"mappings":"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","file":"../../../mode/mscgen/mscgen.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// mode(s) for the sequence chart dsl's mscgen, x√π and msgenny\n// For more information on mscgen, see the site of the original author:\n// http://www.mcternan.me.uk/mscgen\n//\n// This mode for mscgen and the two derivative languages were\n// originally made for use in the mscgen_js interpreter\n// (https://sverweij.github.io/mscgen_js)\n\n(function(mod) {\n  if ( typeof exports == \"object\" && typeof module == \"object\")// CommonJS\n    mod(require(\"../../Coder\"));\n  else if ( typeof define == \"function\" && define.amd)// AMD\n    define([\"../../Coder\"], mod);\n  else// Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var languages = {\n    mscgen: {\n      \"keywords\" : [\"msc\"],\n      \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\"],\n      \"attributes\" : [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\"],\n      \"brackets\" : [\"\\\\{\", \"\\\\}\"], // [ and  ] are brackets too, but these get handled in with lists\n      \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\"],\n      \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n      \"singlecomment\" : [\"//\", \"#\"],\n      \"operators\" : [\"=\"]\n    },\n    xu: {\n      \"keywords\" : [\"msc\"],\n      \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"watermark\"],\n      \"attributes\" : [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\"],\n      \"brackets\" : [\"\\\\{\", \"\\\\}\"],  // [ and  ] are brackets too, but these get handled in with lists\n      \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n      \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n      \"singlecomment\" : [\"//\", \"#\"],\n      \"operators\" : [\"=\"]\n    },\n    msgenny: {\n      \"keywords\" : null,\n      \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"watermark\"],\n      \"attributes\" : null,\n      \"brackets\" : [\"\\\\{\", \"\\\\}\"],\n      \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n      \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n      \"singlecomment\" : [\"//\", \"#\"],\n      \"operators\" : [\"=\"]\n    }\n  }\n\n  CodeMirror.defineMode(\"mscgen\", function(_, modeConfig) {\n    var language = languages[modeConfig && modeConfig.language || \"mscgen\"]\n    return {\n      startState: startStateFn,\n      copyState: copyStateFn,\n      token: produceTokenFunction(language),\n      lineComment : \"#\",\n      blockCommentStart : \"/*\",\n      blockCommentEnd : \"*/\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-mscgen\", \"mscgen\");\n  CodeMirror.defineMIME(\"text/x-xu\", {name: \"mscgen\", language: \"xu\"});\n  CodeMirror.defineMIME(\"text/x-msgenny\", {name: \"mscgen\", language: \"msgenny\"});\n\n  function wordRegexpBoundary(pWords) {\n    return new RegExp(\"\\\\b(\" + pWords.join(\"|\") + \")\\\\b\", \"i\");\n  }\n\n  function wordRegexp(pWords) {\n    return new RegExp(\"(\" + pWords.join(\"|\") + \")\", \"i\");\n  }\n\n  function startStateFn() {\n    return {\n      inComment : false,\n      inString : false,\n      inAttributeList : false,\n      inScript : false\n    };\n  }\n\n  function copyStateFn(pState) {\n    return {\n      inComment : pState.inComment,\n      inString : pState.inString,\n      inAttributeList : pState.inAttributeList,\n      inScript : pState.inScript\n    };\n  }\n\n  function produceTokenFunction(pConfig) {\n\n    return function(pStream, pState) {\n      if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {\n        return \"bracket\";\n      }\n      /* comments */\n      if (!pState.inComment) {\n        if (pStream.match(/\\/\\*[^\\*\\/]*/, true, true)) {\n          pState.inComment = true;\n          return \"comment\";\n        }\n        if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {\n          pStream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (pState.inComment) {\n        if (pStream.match(/[^\\*\\/]*\\*\\//, true, true))\n          pState.inComment = false;\n        else\n          pStream.skipToEnd();\n        return \"comment\";\n      }\n      /* strings */\n      if (!pState.inString && pStream.match(/\\\"(\\\\\\\"|[^\\\"])*/, true, true)) {\n        pState.inString = true;\n        return \"string\";\n      }\n      if (pState.inString) {\n        if (pStream.match(/[^\\\"]*\\\"/, true, true))\n          pState.inString = false;\n        else\n          pStream.skipToEnd();\n        return \"string\";\n      }\n      /* keywords & operators */\n      if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true))\n        return \"keyword\";\n\n      if (pStream.match(wordRegexpBoundary(pConfig.options), true, true))\n        return \"keyword\";\n\n      if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true))\n        return \"keyword\";\n\n      if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true))\n        return \"keyword\";\n\n      if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true))\n        return \"operator\";\n\n      /* attribute lists */\n      if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match(/\\[/, true, true)) {\n        pConfig.inAttributeList = true;\n        return \"bracket\";\n      }\n      if (pConfig.inAttributeList) {\n        if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {\n          return \"attribute\";\n        }\n        if (pStream.match(/]/, true, true)) {\n          pConfig.inAttributeList = false;\n          return \"bracket\";\n        }\n      }\n\n      pStream.next();\n      return \"base\";\n    };\n  }\n\n});\n"]}