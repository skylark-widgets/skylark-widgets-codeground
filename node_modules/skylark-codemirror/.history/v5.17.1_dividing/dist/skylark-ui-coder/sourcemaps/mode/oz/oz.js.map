{"version":3,"sources":["mode/oz/oz.js"],"names":["define","CodeMirror","defineMode","conf","wordRegexp","words","RegExp","join","tokenBase","stream","state","eatSpace","match","tripleOperators","doubleOperators","atoms","matched","openingKeywords","doInCurrentLine","currentIndent","tokenize","tokenFunProc","tokenClass","tokenMeth","middleKeywords","commonKeywords","endKeywords","ch","next","tokenString","test","peek","skipToEnd","eat","tokenComment","singleOperators","eatWhile","hasPassedFirstStage","maybeEnd","quote","escaped","end","buildElectricInputRegEx","allClosings","middle","concat","startState","token","sol","indent","textAfter","trueText","replace","indentUnit","fold","electricInput","lineComment","blockCommentStart","blockCommentEnd","defineMIME"],"mappings":"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","file":"../../../mode/oz/oz.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"oz\", function (conf) {\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var singleOperators = /[\\^@!\\|<>#~\\.\\*\\-\\+\\\\/,=]/;\n  var doubleOperators = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\\\=)|(\\\\=:)|(!!)|(==)|(::)/;\n  var tripleOperators = /(:::)|(\\.\\.\\.)|(=<:)|(>=:)/;\n\n  var middle = [\"in\", \"then\", \"else\", \"of\", \"elseof\", \"elsecase\", \"elseif\", \"catch\",\n    \"finally\", \"with\", \"require\", \"prepare\", \"import\", \"export\", \"define\", \"do\"];\n  var end = [\"end\"];\n\n  var atoms = wordRegexp([\"true\", \"false\", \"nil\", \"unit\"]);\n  var commonKeywords = wordRegexp([\"andthen\", \"at\", \"attr\", \"declare\", \"feat\", \"from\", \"lex\",\n    \"mod\", \"mode\", \"orelse\", \"parser\", \"prod\", \"prop\", \"scanner\", \"self\", \"syn\", \"token\"]);\n  var openingKeywords = wordRegexp([\"local\", \"proc\", \"fun\", \"case\", \"class\", \"if\", \"cond\", \"or\", \"dis\",\n    \"choice\", \"not\", \"thread\", \"try\", \"raise\", \"lock\", \"for\", \"suchthat\", \"meth\", \"functor\"]);\n  var middleKeywords = wordRegexp(middle);\n  var endKeywords = wordRegexp(end);\n\n  // Tokenizers\n  function tokenBase(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    // Brackets\n    if(stream.match(/[{}]/)) {\n      return \"bracket\";\n    }\n\n    // Special [] keyword\n    if (stream.match(/(\\[])/)) {\n        return \"keyword\"\n    }\n\n    // Operators\n    if (stream.match(tripleOperators) || stream.match(doubleOperators)) {\n      return \"operator\";\n    }\n\n    // Atoms\n    if(stream.match(atoms)) {\n      return 'atom';\n    }\n\n    // Opening keywords\n    var matched = stream.match(openingKeywords);\n    if (matched) {\n      if (!state.doInCurrentLine)\n        state.currentIndent++;\n      else\n        state.doInCurrentLine = false;\n\n      // Special matching for signatures\n      if(matched[0] == \"proc\" || matched[0] == \"fun\")\n        state.tokenize = tokenFunProc;\n      else if(matched[0] == \"class\")\n        state.tokenize = tokenClass;\n      else if(matched[0] == \"meth\")\n        state.tokenize = tokenMeth;\n\n      return 'keyword';\n    }\n\n    // Middle and other keywords\n    if (stream.match(middleKeywords) || stream.match(commonKeywords)) {\n      return \"keyword\"\n    }\n\n    // End keywords\n    if (stream.match(endKeywords)) {\n      state.currentIndent--;\n      return 'keyword';\n    }\n\n    // Eat the next char for next comparisons\n    var ch = stream.next();\n\n    // Strings\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n\n    // Numbers\n    if (/[~\\d]/.test(ch)) {\n      if (ch == \"~\") {\n        if(! /^[0-9]/.test(stream.peek()))\n          return null;\n        else if (( stream.next() == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n          return \"number\";\n      }\n\n      if ((ch == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n        return \"number\";\n\n      return null;\n    }\n\n    // Comments\n    if (ch == \"%\") {\n      stream.skipToEnd();\n      return 'comment';\n    }\n    else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n    }\n\n    // Single operators\n    if(singleOperators.test(ch)) {\n      return \"operator\";\n    }\n\n    // If nothing match, we skip the entire alphanumerical block\n    stream.eatWhile(/\\w/);\n\n    return \"variable\";\n  }\n\n  function tokenClass(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n    stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);\n    state.tokenize = tokenBase;\n    return \"variable-3\"\n  }\n\n  function tokenMeth(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n    stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);\n    state.tokenize = tokenBase;\n    return \"def\"\n  }\n\n  function tokenFunProc(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    if(!state.hasPassedFirstStage && stream.eat(\"{\")) {\n      state.hasPassedFirstStage = true;\n      return \"bracket\";\n    }\n    else if(state.hasPassedFirstStage) {\n      stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\\$/);\n      state.hasPassedFirstStage = false;\n      state.tokenize = tokenBase;\n      return \"def\"\n    }\n    else {\n      state.tokenize = tokenBase;\n      return null;\n    }\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function (stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped)\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function buildElectricInputRegEx() {\n    // Reindentation should occur on [] or on a match of any of\n    // the block closing keywords, at the end of a line.\n    var allClosings = middle.concat(end);\n    return new RegExp(\"[\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n  }\n\n  return {\n\n    startState: function () {\n      return {\n        tokenize: tokenBase,\n        currentIndent: 0,\n        doInCurrentLine: false,\n        hasPassedFirstStage: false\n      };\n    },\n\n    token: function (stream, state) {\n      if (stream.sol())\n        state.doInCurrentLine = 0;\n\n      return state.tokenize(stream, state);\n    },\n\n    indent: function (state, textAfter) {\n      var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n\n      if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\\[])/))\n        return conf.indentUnit * (state.currentIndent - 1);\n\n      if (state.currentIndent < 0)\n        return 0;\n\n      return state.currentIndent * conf.indentUnit;\n    },\n    fold: \"indent\",\n    electricInput: buildElectricInputRegEx(),\n    lineComment: \"%\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-oz\", \"oz\");\n\n});\n"]}