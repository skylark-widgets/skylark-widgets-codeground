{"version":3,"sources":["mode/pascal/pascal.js"],"names":["define","CodeMirror","defineMode","words","str","obj","split","i","length","tokenBase","stream","state","ch","next","startOfLine","skipToEnd","tokenize","tokenString","eat","tokenComment","test","eatWhile","isOperatorChar","cur","current","keywords","propertyIsEnumerable","atoms","quote","escaped","end","maybeEnd","null","startState","token","eatSpace","style","electricChars","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GACjC,YAEAA,GAAWC,WAAW,SAAU,WAC9B,QAASC,GAAMC,GAEb,IAAK,GADDC,MAAUF,EAAQC,EAAIE,MAAM,KACvBC,EAAI,EAAGA,EAAIJ,EAAMK,SAAUD,EAAGF,EAAIF,EAAMI,KAAM,CACvD,OAAOF,GAST,QAASI,GAAUC,EAAQC,GACzB,GAAIC,GAAKF,EAAOG,MAChB,IAAU,KAAND,GAAaD,EAAMG,YAErB,MADAJ,GAAOK,YACA,MAET,IAAU,KAANH,GAAmB,KAANA,EAEf,MADAD,GAAMK,SAAWC,EAAYL,GACtBD,EAAMK,SAASN,EAAQC,EAEhC,IAAU,KAANC,GAAaF,EAAOQ,IAAI,KAE1B,MADAP,GAAMK,SAAWG,EACVA,EAAaT,EAAQC,EAE9B,IAAI,qBAAqBS,KAAKR,GAC5B,MAAO,KAET,IAAI,KAAKQ,KAAKR,GAEZ,MADAF,GAAOW,SAAS,UACT,QAET,IAAU,KAANT,GACEF,EAAOQ,IAAI,KAEb,MADAR,GAAOK,YACA,SAGX,IAAIO,EAAeF,KAAKR,GAEtB,MADAF,GAAOW,SAASC,GACT,UAETZ,GAAOW,SAAS,UAChB,IAAIE,GAAMb,EAAOc,SACjB,OAAIC,GAASC,qBAAqBH,GAAa,UAC3CI,EAAMD,qBAAqBH,GAAa,OACrC,WAGT,QAASN,GAAYW,GACnB,MAAO,UAASlB,EAAQC,GAEtB,IADA,GAAqBE,GAAjBgB,GAAU,EAAaC,GAAM,EACA,OAAzBjB,EAAOH,EAAOG,SAAiB,CACrC,GAAIA,GAAQe,IAAUC,EAAS,CAACC,GAAM,CAAM,OAC5CD,GAAWA,GAAmB,MAARhB,EAGxB,OADIiB,GAAQD,IAASlB,EAAMK,SAAW,MAC/B,UAIX,QAASG,GAAaT,EAAQC,GAE5B,IADA,GAAsBC,GAAlBmB,GAAW,EACRnB,EAAKF,EAAOG,QAAQ,CACzB,GAAU,KAAND,GAAamB,EAAU,CACzBpB,EAAMK,SAAW,IACjB,OAEFe,EAAkB,KAANnB,EAEd,MAAO,UAlET,GAAIa,GAAWtB,EAAM,2NAGjBwB,GAASK,QAAQ,GAEjBV,EAAiB,kBAkErB,QACEW,WAAY,WACV,OAAQjB,SAAU,OAGpBkB,MAAO,SAASxB,EAAQC,GACtB,GAAID,EAAOyB,WAAY,MAAO,KAC9B,IAAIC,IAASzB,EAAMK,UAAYP,GAAWC,EAAQC,EAClD,OAAa,WAATyB,GAA+B,QAATA,EAAwBA,EAC3CA,GAGTC,cAAe,QAInBpC,EAAWqC,WAAW,gBAAiB","file":"../../../mode/pascal/pascal.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pascal\", function() {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\"and array begin case const div do downto else end file for forward integer \" +\n                       \"boolean char function goto if in label mod nil not of or packed procedure \" +\n                       \"program record repeat set string then to type until var while with\");\n  var atoms = {\"null\": true};\n\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == \"#\" && state.startOfLine) {\n      stream.skipToEnd();\n      return \"meta\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"(\" && stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \")\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  // Interface\n\n  return {\n    startState: function() {\n      return {tokenize: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      return style;\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n\n});\n"]}