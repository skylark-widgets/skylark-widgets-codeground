{"version":3,"sources":["mode/pegjs/pegjs.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","identifier","stream","match","jsMode","getMode","startState","inString","stringType","inComment","inCharacterClass","braced","lhs","localState","token","state","peek","next","eol","skipToEnd","text","current","i","length","indexOf","eatSpace"],"mappings":";;;;;;;CAGA,SAAUA,GACc,gBAAXC,UAAwC,gBAAVC,QACvCF,EAAIG,QAAQ,eAAgBA,QAAQ,6BACZ,kBAAVC,SAAwBA,OAAOC,IAC7CD,QAAQ,cAAe,4BAA6BJ,GAEpDA,EAAIM,aACL,SAASA,GACZ,YAEAA,GAAWC,WAAW,QAAS,SAAUC,GAGvC,QAASC,GAAWC,GAClB,MAAOA,GAAOC,MAAM,2BAHtB,GAAIC,GAASN,EAAWO,QAAQL,EAAQ,aAMxC,QACEM,WAAY,WACV,OACEC,UAAU,EACVC,WAAY,KACZC,WAAW,EACXC,kBAAkB,EAClBC,OAAQ,EACRC,KAAK,EACLC,WAAY,OAGhBC,MAAO,SAAUZ,EAAQa,GAcvB,GAbIb,IAGCa,EAAMR,UAAaQ,EAAMN,WAAgC,KAAjBP,EAAOc,QAAoC,KAAjBd,EAAOc,SAC5ED,EAAMP,WAAaN,EAAOc,OAC1Bd,EAAOe,OACPF,EAAMR,UAAW,IAEdQ,EAAMR,UAAaQ,EAAMN,YAAaP,EAAOC,MAAM,WACtDY,EAAMN,WAAY,GAIhBM,EAAMR,SAAU,CAClB,KAAOQ,EAAMR,WAAaL,EAAOgB,OAC3BhB,EAAOc,SAAWD,EAAMP,YAC1BN,EAAOe,OACPF,EAAMR,UAAW,GACU,OAAlBL,EAAOc,QAChBd,EAAOe,OACPf,EAAOe,QAEPf,EAAOC,MAAM,eAGjB,OAAOY,GAAMH,IAAM,kBAAoB,SAClC,GAAIG,EAAMN,UAAW,CAC1B,KAAOM,EAAMN,YAAcP,EAAOgB,OAC5BhB,EAAOC,MAAM,QACfY,EAAMN,WAAY,EAElBP,EAAOC,MAAM,WAGjB,OAAO,UACF,GAAIY,EAAML,iBACb,KAAOK,EAAML,mBAAqBR,EAAOgB,OACjChB,EAAOC,MAAM,cAAgBD,EAAOC,MAAM,UAC9CY,EAAML,kBAAmB,OAG1B,CAAA,GAAsB,MAAlBR,EAAOc,OAGhB,MAFAd,GAAOe,OACPF,EAAML,kBAAmB,EAClB,SACF,IAAIR,EAAOC,MAAM,SAEtB,MADAD,GAAOiB,YACA,SACF,IAAIJ,EAAMJ,QAA4B,MAAlBT,EAAOc,OAAgB,CACvB,OAArBD,EAAMF,aACRE,EAAMF,WAAaf,EAAWQ,WAAWF,GAE3C,IAAIU,GAAQV,EAAOU,MAAMZ,EAAQa,EAAMF,YACnCO,EAAOlB,EAAOmB,SAClB,KAAKP,EACH,IAAK,GAAIQ,GAAI,EAAGA,EAAIF,EAAKG,OAAQD,IACf,MAAZF,EAAKE,GACPP,EAAMJ,SACe,MAAZS,EAAKE,IACdP,EAAMJ,QAIZ,OAAOG,GACF,GAAIb,EAAWC,GACpB,MAAsB,MAAlBA,EAAOc,OACF,WAEF,YACF,KAAK,IAAK,IAAK,IAAK,KAAKQ,QAAQtB,EAAOc,YAE7C,MADAd,GAAOe,OACA,SACGf,GAAOuB,YACjBvB,EAAOe,OAET,MAAO,SAGV","file":"../../../mode/pegjs/pegjs.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../Coder\"), require(\"../javascript/javascript\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../Coder\", \"../javascript/javascript\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pegjs\", function (config) {\n  var jsMode = CodeMirror.getMode(config, \"javascript\");\n\n  function identifier(stream) {\n    return stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/);\n  }\n\n  return {\n    startState: function () {\n      return {\n        inString: false,\n        stringType: null,\n        inComment: false,\n        inCharacterClass: false,\n        braced: 0,\n        lhs: true,\n        localState: null\n      };\n    },\n    token: function (stream, state) {\n      if (stream)\n\n      //check for state changes\n      if (!state.inString && !state.inComment && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n        state.inString = true; // Update state\n      }\n      if (!state.inString && !state.inComment && stream.match(/^\\/\\*/)) {\n        state.inComment = true;\n      }\n\n      //return state\n      if (state.inString) {\n        while (state.inString && !stream.eol()) {\n          if (stream.peek() === state.stringType) {\n            stream.next(); // Skip quote\n            state.inString = false; // Clear flag\n          } else if (stream.peek() === '\\\\') {\n            stream.next();\n            stream.next();\n          } else {\n            stream.match(/^.[^\\\\\\\"\\']*/);\n          }\n        }\n        return state.lhs ? \"property string\" : \"string\"; // Token style\n      } else if (state.inComment) {\n        while (state.inComment && !stream.eol()) {\n          if (stream.match(/\\*\\//)) {\n            state.inComment = false; // Clear flag\n          } else {\n            stream.match(/^.[^\\*]*/);\n          }\n        }\n        return \"comment\";\n      } else if (state.inCharacterClass) {\n          while (state.inCharacterClass && !stream.eol()) {\n            if (!(stream.match(/^[^\\]\\\\]+/) || stream.match(/^\\\\./))) {\n              state.inCharacterClass = false;\n            }\n          }\n      } else if (stream.peek() === '[') {\n        stream.next();\n        state.inCharacterClass = true;\n        return 'bracket';\n      } else if (stream.match(/^\\/\\//)) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (state.braced || stream.peek() === '{') {\n        if (state.localState === null) {\n          state.localState = CodeMirror.startState(jsMode);\n        }\n        var token = jsMode.token(stream, state.localState);\n        var text = stream.current();\n        if (!token) {\n          for (var i = 0; i < text.length; i++) {\n            if (text[i] === '{') {\n              state.braced++;\n            } else if (text[i] === '}') {\n              state.braced--;\n            }\n          };\n        }\n        return token;\n      } else if (identifier(stream)) {\n        if (stream.peek() === ':') {\n          return 'variable';\n        }\n        return 'variable-2';\n      } else if (['[', ']', '(', ')'].indexOf(stream.peek()) != -1) {\n        stream.next();\n        return 'bracket';\n      } else if (!stream.eatSpace()) {\n        stream.next();\n      }\n      return null;\n    }\n  };\n}, \"javascript\");\n\n});\n"]}