{"version":3,"sources":["mode/pig/pig.js"],"names":["define","CodeMirror","defineMode","_config","parserConfig","chain","stream","state","f","tokenize","tokenComment","ch","isEnd","next","tokenBase","tokenString","quote","escaped","end","multiLineStrings","test","eatWhile","eat","isOperatorChar","skipToEnd","keywords","propertyIsEnumerable","current","toUpperCase","builtins","types","startState","startOfLine","token","eatSpace","style","str","obj","words","split","i","length","pBuiltins","pKeywords","pTypes","defineMIME","name","registerHelper"],"mappings":";;;;;;;AASAA,QAAQ,eAAgB,SAASC,GACjC,YAEAA,GAAWC,WAAW,MAAO,SAASC,EAASC,GAQ7C,QAASC,GAAMC,EAAQC,EAAOC,GAE5B,MADAD,GAAME,SAAWD,EACVA,EAAEF,EAAQC,GAGnB,QAASG,GAAaJ,EAAQC,GAG5B,IAFA,GACII,GADAC,GAAQ,EAEND,EAAKL,EAAOO,QAAQ,CACxB,GAAS,KAANF,GAAaC,EAAO,CACrBL,EAAME,SAAWK,CACjB,OAEFF,EAAe,KAAND,EAEX,MAAO,UAGT,QAASI,GAAYC,GACnB,MAAO,UAASV,EAAQC,GAEtB,IADA,GAAqBM,GAAjBI,GAAU,EAAaC,GAAM,EACD,OAAzBL,EAAOP,EAAOO,SAAiB,CACpC,GAAIA,GAAQG,IAAUC,EAAS,CAC7BC,GAAM,CAAM,OAEdD,GAAWA,GAAmB,MAARJ,EAIxB,OAFIK,IAASD,IAAWE,KACtBZ,EAAME,SAAWK,GACZ,SAKX,QAASA,GAAUR,EAAQC,GACzB,GAAII,GAAKL,EAAOO,MAGhB,OAAU,KAANF,GAAmB,KAANA,EACRN,EAAMC,EAAQC,EAAOQ,EAAYJ,IAElC,mBAAmBS,KAAKT,GACvB,KAED,KAAKS,KAAKT,IAChBL,EAAOe,SAAS,UACT,UAGM,KAANV,EACHL,EAAOgB,IAAI,KACNjB,EAAMC,EAAQC,EAAOG,IAG5BJ,EAAOe,SAASE,GACT,YAIE,KAAJZ,EACJL,EAAOgB,IAAI,MACZhB,EAAOkB,YACA,YAGPlB,EAAOe,SAASE,GACT,YAIFA,EAAeH,KAAKT,IAC3BL,EAAOe,SAASE,GACT,aAIPjB,EAAOe,SAAS,WAEZI,GAAYA,EAASC,qBAAqBpB,EAAOqB,UAAUC,iBAExDtB,EAAOgB,IAAI,OAAShB,EAAOgB,IAAI,KAC3B,UAGPO,GAAYA,EAASH,qBAAqBpB,EAAOqB,UAAUC,eACtD,aAELE,GAASA,EAAMJ,qBAAqBpB,EAAOqB,UAAUC,eAChD,aAEF,YAjGX,GAAIH,GAAWrB,EAAaqB,SAC5BI,EAAWzB,EAAayB,SACxBC,EAAQ1B,EAAa0B,MACrBX,EAAmBf,EAAae,iBAE5BI,EAAiB,mBAiGrB,QACEQ,WAAY,WACV,OACEtB,SAAUK,EACVkB,aAAa,IAIjBC,MAAO,SAAS3B,EAAQC,GACtB,GAAGD,EAAO4B,WAAY,MAAO,KAC7B,IAAIC,GAAQ5B,EAAME,SAASH,EAAQC,EACnC,OAAO4B,OAKZ,WACC,QAASV,GAASW,GAEhB,IAAK,GADDC,MAAUC,EAAQF,EAAIG,MAAM,KACvBC,EAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAAGH,EAAIC,EAAME,KAAM,CACvD,OAAOH,GAIT,GAAIK,GAAY,w3BAYZC,EAAY,mXAOZC,EAAS,kEAEb3C,GAAW4C,WAAW,cACpBC,KAAM,MACNjB,SAAUJ,EAASiB,GACnBjB,SAAUA,EAASkB,GACnBb,MAAOL,EAASmB,KAGlB3C,EAAW8C,eAAe,YAAa,OAAQL,EAAYE,EAASD,GAAWJ,MAAM","file":"../../../mode/pig/pig.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/*\n *      Pig Latin Mode for CodeMirror 2\n *      @author Prasanth Jayachandran\n *      @link   https://github.com/prasanthj/pig-codemirror-2\n *  This implementation is adapted from PL/SQL mode in CodeMirror 2.\n */\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pig\", function(_config, parserConfig) {\n  var keywords = parserConfig.keywords,\n  builtins = parserConfig.builtins,\n  types = parserConfig.types,\n  multiLineStrings = parserConfig.multiLineStrings;\n\n  var isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenComment(stream, state) {\n    var isEnd = false;\n    var ch;\n    while(ch = stream.next()) {\n      if(ch == \"/\" && isEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      isEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true; break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"error\";\n    };\n  }\n\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    // is a start of string?\n    if (ch == '\"' || ch == \"'\")\n      return chain(stream, state, tokenString(ch));\n    // is it one of the special chars\n    else if(/[\\[\\]{}\\(\\),;\\.]/.test(ch))\n      return null;\n    // is it a number?\n    else if(/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    // multi line comment or operator\n    else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n    }\n    // single line comment or operator\n    else if (ch==\"-\") {\n      if(stream.eat(\"-\")){\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n    }\n    // is it an operator\n    else if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    else {\n      // get the while word\n      stream.eatWhile(/[\\w\\$_]/);\n      // is it one of the listed keywords?\n      if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n        //keywords can be used as variables like flatten(group), group.$0 etc..\n        if (!stream.eat(\")\") && !stream.eat(\".\"))\n          return \"keyword\";\n      }\n      // is it one of the builtin functions?\n      if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))\n        return \"variable-2\";\n      // is it one of the listed types?\n      if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))\n        return \"variable-3\";\n      // default is a 'variable'\n      return \"variable\";\n    }\n  }\n\n  // Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      if(stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    }\n  };\n});\n\n(function() {\n  function keywords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  // builtin funcs taken from trunk revision 1303237\n  var pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \"\n    + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \"\n    + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \"\n    + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \"\n    + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \"\n    + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \"\n    + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \"\n    + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \"\n    + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \"\n    + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\n\n  // taken from QueryLexer.g\n  var pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \"\n    + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \"\n    + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \"\n    + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \"\n    + \"NEQ MATCHES TRUE FALSE DUMP\";\n\n  // data types\n  var pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n\n  CodeMirror.defineMIME(\"text/x-pig\", {\n    name: \"pig\",\n    builtins: keywords(pBuiltins),\n    keywords: keywords(pKeywords),\n    types: keywords(pTypes)\n  });\n\n  CodeMirror.registerHelper(\"hintWords\", \"pig\", (pBuiltins + pTypes + pKeywords).split(\" \"));\n}());\n\n});\n"]}