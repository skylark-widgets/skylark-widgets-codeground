{"version":3,"sources":["mode/protobuf/protobuf.js"],"names":["define","CodeMirror","wordRegexp","words","RegExp","join","tokenBase","stream","eatSpace","match","skipToEnd","keywords","identifiers","next","keywordArray","registerHelper","defineMode","token","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GAC/B,YAEA,SAASC,GAAWC,GAClB,MAAO,IAAIC,QAAO,MAAQD,EAAME,KAAK,OAAS,QAAS,KAezD,QAASC,GAAUC,GAEjB,GAAIA,EAAOC,WAAY,MAAO,KAG9B,IAAID,EAAOE,MAAM,MAEf,MADAF,GAAOG,YACA,SAIT,IAAIH,EAAOE,MAAM,cAAc,GAAQ,CACrC,GAAIF,EAAOE,MAAM,wBACf,MAAO,QACT,IAAIF,EAAOE,MAAM,mCACf,MAAO,QACT,IAAIF,EAAOE,MAAM,8BACf,MAAO,SAIX,MAAIF,GAAOE,MAAM,mBAA6B,SAC1CF,EAAOE,MAAM,mBAA6B,SAG1CF,EAAOE,MAAME,GAAoB,UACjCJ,EAAOE,MAAMG,GAAuB,YAGxCL,EAAOM,OACA,MA1CT,GAAIC,IACF,UAAW,UAAW,SAAU,SAChC,WAAY,WAAY,WAAY,WAAY,UAAW,aAAc,SACzE,OAAQ,QAAS,SAAU,OAAQ,QAAS,SAC5C,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,UAAW,UAAW,WAAY,YAE1FH,EAAWT,EAAWY,EAE1Bb,GAAWc,eAAe,YAAa,WAAYD,EAEnD,IAAIF,GAAc,GAAIR,QAAO,gCAmC7BH,GAAWe,WAAW,WAAY,WAChC,OAAQC,MAAOX,KAGjBL,EAAWiB,WAAW,kBAAmB","file":"../../../mode/protobuf/protobuf.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n  };\n\n  var keywordArray = [\n    \"package\", \"message\", \"import\", \"syntax\",\n    \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\",\n    \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\",\n    \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\"\n  ];\n  var keywords = wordRegexp(keywordArray);\n\n  CodeMirror.registerHelper(\"hintWords\", \"protobuf\", keywordArray);\n\n  var identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\n  function tokenBase(stream) {\n    // whitespaces\n    if (stream.eatSpace()) return null;\n\n    // Handle one line Comments\n    if (stream.match(\"//\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n      if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))\n        return \"number\";\n      if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/))\n        return \"number\";\n      if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/))\n        return \"number\";\n    }\n\n    // Handle Strings\n    if (stream.match(/^\"([^\"]|(\"\"))*\"/)) { return \"string\"; }\n    if (stream.match(/^'([^']|(''))*'/)) { return \"string\"; }\n\n    // Handle words\n    if (stream.match(keywords)) { return \"keyword\"; }\n    if (stream.match(identifiers)) { return \"variable\"; } ;\n\n    // Handle non-detected items\n    stream.next();\n    return null;\n  };\n\n  CodeMirror.defineMode(\"protobuf\", function() {\n    return {token: tokenBase};\n  });\n\n  CodeMirror.defineMIME(\"text/x-protobuf\", \"protobuf\");\n});\n"]}