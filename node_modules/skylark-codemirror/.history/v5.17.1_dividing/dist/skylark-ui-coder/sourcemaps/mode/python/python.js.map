{"version":3,"sources":["mode/python/python.js"],"names":["define","CodeMirror","wordRegexp","words","RegExp","join","top","state","scopes","length","wordOperators","commonKeywords","commonBuiltins","registerHelper","concat","defineMode","conf","parserConf","tokenBase","stream","sol","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","errorToken","style","tokenBaseInner","ERRORCLASS","ch","peek","skipToEnd","match","floatLiteral","eat","intLiteral","stringPrefixes","tokenize","tokenStringFactory","current","tripleDelimiters","doubleDelimiters","doubleOperators","singleOperators","singleDelimiters","lastToken","identifiers","keywords","builtins","next","delimiter","tokenString","eol","eatWhile","singleline","OUTCLASS","singleLineStringErrors","indexOf","charAt","toLowerCase","substr","isString","pop","push","indentUnit","align","pushBracketScope","column","hangingIndent","indented","tokenLexer","beginningOfLine","py3","test","lambda","delimiter_index","slice","myKeywords","myBuiltins","undefined","extra_keywords","extra_builtins","version","parseInt","external","startState","basecolumn","token","addErr","textAfter","Pass","scope","closing","electricInput","closeBrackets","triples","lineComment","fold","defineMIME","str","split","name"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GAC/B,YAEA,SAASC,GAAWC,GAClB,MAAO,IAAIC,QAAO,MAAQD,EAAME,KAAK,OAAS,SAsBhD,QAASC,GAAIC,GACX,MAAOA,GAAMC,OAAOD,EAAMC,OAAOC,OAAS,GApB5C,GAAIC,GAAgBR,GAAY,MAAO,KAAM,MAAO,OAChDS,GAAkB,KAAM,SAAU,QAAS,QAAS,WAClC,MAAO,MAAO,OAAQ,OAAQ,SAAU,UACxC,MAAO,OAAQ,SAAU,KAAM,SAC/B,SAAU,OAAQ,QAAS,SAC3B,MAAO,QAAS,OAAQ,QAAS,MACnDC,GAAkB,MAAO,MAAO,MAAO,MAAO,OAAQ,YAAa,WAAY,MAC7D,cAAe,UAAW,UAAW,UAAW,OAAQ,MAAO,SAC/D,YAAa,OAAQ,SAAU,QAAS,SAAU,YAClD,UAAW,UAAW,UAAW,OAAQ,OAAQ,MAAO,KACxD,QAAS,MAAO,aAAc,aAAc,OAAQ,MACpD,OAAQ,SAAU,MAAO,MAAO,aAAc,MAAO,OACrD,SAAU,MAAO,OAAQ,MAAO,MAAO,WAAY,QACnD,OAAQ,WAAY,QAAS,MAAO,UAAW,QAC/C,SAAU,eAAgB,MAAO,MAAO,QAAS,QACjD,OAAQ,OAAQ,MAAO,aAAc,iBACrC,WAAY,YAClCX,GAAWY,eAAe,YAAa,SAAUF,EAAeG,OAAOF,IAMvEX,EAAWc,WAAW,SAAU,SAASC,EAAMC,GAsC7C,QAASC,GAAUC,EAAQZ,GAGzB,GAFIY,EAAOC,QAAOb,EAAMc,OAASF,EAAOG,eAEpCH,EAAOC,OAA4B,MAAnBd,EAAIC,GAAOgB,KAAc,CAC3C,GAAIC,GAAclB,EAAIC,GAAOkB,MAC7B,IAAIN,EAAOO,WAAY,CACrB,GAAIC,GAAaR,EAAOG,aAKxB,OAJIK,GAAaH,EACfI,EAAYrB,GACLoB,EAAaH,GAAeK,EAAOV,EAAQZ,KAClDA,EAAMuB,YAAa,GACd,KAEP,GAAIC,GAAQC,EAAeb,EAAQZ,EAGnC,OAFIiB,GAAc,GAAKK,EAAOV,EAAQZ,KACpCwB,GAAS,IAAME,GACVF,EAGX,MAAOC,GAAeb,EAAQZ,GAGhC,QAASyB,GAAeb,EAAQZ,GAC9B,GAAIY,EAAOO,WAAY,MAAO,KAE9B,IAAIQ,GAAKf,EAAOgB,MAGhB,IAAU,KAAND,EAEF,MADAf,GAAOiB,YACA,SAIT,IAAIjB,EAAOkB,MAAM,YAAY,GAAQ,CACnC,GAAIC,IAAe,CAKnB,IAHInB,EAAOkB,MAAM,8BAA+BC,GAAe,GAC3DnB,EAAOkB,MAAM,eAAgBC,GAAe,GAC5CnB,EAAOkB,MAAM,YAAaC,GAAe,GACzCA,EAGF,MADAnB,GAAOoB,IAAI,MACJ,QAGT,IAAIC,IAAa,CAgBjB,IAdIrB,EAAOkB,MAAM,mBAAkBG,GAAa,GAE5CrB,EAAOkB,MAAM,eAAcG,GAAa,GAExCrB,EAAOkB,MAAM,gBAAeG,GAAa,GAEzCrB,EAAOkB,MAAM,6BAEflB,EAAOoB,IAAI,MAEXC,GAAa,GAGXrB,EAAOkB,MAAM,kBAAiBG,GAAa,GAC3CA,EAGF,MADArB,GAAOoB,IAAI,MACJ,SAKX,MAAIpB,GAAOkB,MAAMI,IACflC,EAAMmC,SAAWC,EAAmBxB,EAAOyB,WACpCrC,EAAMmC,SAASvB,EAAQZ,IAI5BY,EAAOkB,MAAMQ,IAAqB1B,EAAOkB,MAAMS,GAC1C,cAEL3B,EAAOkB,MAAMU,IAAoB5B,EAAOkB,MAAMW,GACzC,WAEL7B,EAAOkB,MAAMY,GACR,cAEc,KAAnB1C,EAAM2C,WAAoB/B,EAAOkB,MAAMc,GAClC,WAELhC,EAAOkB,MAAMe,IAAajC,EAAOkB,MAAM3B,GAClC,UAELS,EAAOkB,MAAMgB,GACR,UAELlC,EAAOkB,MAAM,iBACR,aAELlB,EAAOkB,MAAMc,GACQ,OAAnB5C,EAAM2C,WAAyC,SAAnB3C,EAAM2C,UAC7B,MACF,YAIT/B,EAAOmC,OACArB,GAGT,QAASU,GAAmBY,GAO1B,QAASC,GAAYrC,EAAQZ,GAC3B,MAAQY,EAAOsC,OAEb,GADAtC,EAAOuC,SAAS,WACZvC,EAAOoB,IAAI,OAEb,GADApB,EAAOmC,OACHK,GAAcxC,EAAOsC,MACvB,MAAOG,OACJ,CAAA,GAAIzC,EAAOkB,MAAMkB,GAEtB,MADAhD,GAAMmC,SAAWxB,EACV0C,CAEPzC,GAAOoB,IAAI,QAGf,GAAIoB,EAAY,CACd,GAAI1C,EAAW4C,uBACb,MAAO5B,EAEP1B,GAAMmC,SAAWxB,EAErB,MAAO0C,GA1BT,KAAO,MAAME,QAAQP,EAAUQ,OAAO,GAAGC,gBAAkB,GACzDT,EAAYA,EAAUU,OAAO,EAE/B,IAAIN,GAAiC,GAApBJ,EAAU9C,OACvBmD,EAAW,QAyBf,OADAJ,GAAYU,UAAW,EAChBV,EAGT,QAAS5B,GAAYrB,GACnB,KAA0B,MAAnBD,EAAIC,GAAOgB,MAAchB,EAAMC,OAAO2D,KAC7C5D,GAAMC,OAAO4D,MAAM3C,OAAQnB,EAAIC,GAAOkB,OAAST,EAAKqD,WACjC9C,KAAM,KACN+C,MAAO,OAG5B,QAASC,GAAiBpD,EAAQZ,EAAOgB,GACvC,GAAI+C,GAAQnD,EAAOkB,MAAM,uBAAuB,GAAS,KAAOlB,EAAOqD,SAAW,CAClFjE,GAAMC,OAAO4D,MAAM3C,OAAQlB,EAAMc,OAASoD,EACvBlD,KAAMA,EACN+C,MAAOA,IAG5B,QAASzC,GAAOV,EAAQZ,GAEtB,IADA,GAAImE,GAAWvD,EAAOG,cACff,EAAMC,OAAOC,OAAS,GAAKH,EAAIC,GAAOkB,OAASiD,GAAU,CAC9D,GAAuB,MAAnBpE,EAAIC,GAAOgB,KAAc,OAAO,CACpChB,GAAMC,OAAO2D,MAEf,MAAO7D,GAAIC,GAAOkB,QAAUiD,EAG9B,QAASC,GAAWxD,EAAQZ,GACtBY,EAAOC,QAAOb,EAAMqE,iBAAkB,EAE1C,IAAI7C,GAAQxB,EAAMmC,SAASvB,EAAQZ,GAC/BqC,EAAUzB,EAAOyB,SAGrB,IAAIrC,EAAMqE,iBAA8B,KAAXhC,EAC3B,MAAOzB,GAAOkB,MAAMc,GAAa,GAAS,OAAS0B,EAAM,WAAa5C,CAEpE,MAAK6C,KAAKlC,KAAUrC,EAAMqE,iBAAkB,GAElC,YAAT7C,GAAgC,WAATA,GACF,QAAnBxB,EAAM2C,YACXnB,EAAQ,QAGK,QAAXa,GAAgC,UAAXA,IACvBrC,EAAMsB,QAAU,GAEH,UAAXe,IAAqBrC,EAAMwE,QAAS,GACzB,KAAXnC,GAAmBrC,EAAMwE,QAA6B,MAAnBzE,EAAIC,GAAOgB,MAChDK,EAAYrB,EAEd,IAAIyE,GAAoC,GAAlBpC,EAAQnC,OAAc,MAAMqD,QAAQlB,KAK1D,IAJIoC,OACFT,EAAiBpD,EAAQZ,EAAO,MAAM0E,MAAMD,EAAiBA,EAAgB,IAE/EA,EAAkB,MAAMlB,QAAQlB,GAC5BoC,MAAuB,CACzB,GAAI1E,EAAIC,GAAOgB,MAAQqB,EAClB,MAAOX,EADoB1B,GAAMc,OAASd,EAAMC,OAAO2D,MAAM1C,OAASgD,EAQ7E,MALIlE,GAAMsB,OAAS,GAAKV,EAAOsC,OAA4B,MAAnBnD,EAAIC,GAAOgB,OAC7ChB,EAAMC,OAAOC,OAAS,GAAGF,EAAMC,OAAO2D,MAC1C5D,EAAMsB,QAAU,GAGXE,EA/OT,GAAIE,GAAa,QAEbgB,EAAmBhC,EAAWgC,kBAAoB,0BAClDF,EAAkB9B,EAAW8B,iBAAmB,gCAChDD,EAAmB7B,EAAW6B,kBAAoB,mCAClDD,EAAmB5B,EAAW4B,kBAAoB,yBAElD4B,EAAgBxD,EAAWwD,eAAiBzD,EAAKqD,WAEjDa,EAAavE,EAAgBwE,EAAavE,CACbwE,SAA7BnE,EAAWoE,iBACbH,EAAaA,EAAWpE,OAAOG,EAAWoE,iBAEXD,QAA7BnE,EAAWqE,iBACbH,EAAaA,EAAWrE,OAAOG,EAAWqE,gBAE5C,IAAIT,GAAM5D,EAAWsE,SAA+C,GAApCC,SAASvE,EAAWsE,QAAS,GAC7D,IAAIV,EAAK,CAEP,GAAI7B,GAAkB/B,EAAW+B,iBAAmB,wBAChDG,EAAclC,EAAWkC,aAAc,mDAC3C+B,GAAaA,EAAWpE,QAAQ,WAAY,QAAS,OAAQ,OAAQ,QAAS,UAC9EqE,EAAaA,EAAWrE,QAAQ,QAAS,QAAS,OAAQ,SAC1D,IAAI2B,GAAiB,GAAIrC,QAAO,sCAAuC,SAClE,CACL,GAAI4C,GAAkB/B,EAAW+B,iBAAmB,uBAChDG,EAAclC,EAAWkC,aAAc,yBAC3C+B,GAAaA,EAAWpE,QAAQ,OAAQ,UACxCqE,EAAaA,EAAWrE,QAAQ,QAAS,aAAc,SAAU,MAAO,SAAU,WAClD,OAAQ,SAAU,OAAQ,YAAa,SAAU,SACjD,SAAU,UAAW,SAAU,QAAS,OAAQ,QAChF,IAAI2B,GAAiB,GAAIrC,QAAO,0CAA2C,KAE7E,GAAIgD,GAAWlD,EAAWgF,GACtB7B,EAAWnD,EAAWiF,GAgNtBM,GACFC,WAAY,SAASC,GACnB,OACEjD,SAAUxB,EACVV,SAAUiB,OAAQkE,GAAc,EAAGpE,KAAM,KAAM+C,MAAO,OACtDjD,OAAQsE,GAAc,EACtBzC,UAAW,KACX6B,QAAQ,EACRlD,OAAQ,IAIZ+D,MAAO,SAASzE,EAAQZ,GACtB,GAAIsF,GAAStF,EAAMuB,UACf+D,KAAQtF,EAAMuB,YAAa,EAC/B,IAAIC,GAAQ4C,EAAWxD,EAAQZ,EAQ/B,OANIwB,IAAkB,WAATA,IACXxB,EAAM2C,UAAsB,WAATnB,GAA+B,eAATA,EAA0BZ,EAAOyB,UAAYb,GAC3E,eAATA,IAAwBA,EAAQ,MAEhCZ,EAAOsC,OAASlD,EAAMwE,SACxBxE,EAAMwE,QAAS,GACVc,EAAS9D,EAAQ,IAAME,EAAaF,GAG7CV,OAAQ,SAASd,EAAOuF,GACtB,GAAIvF,EAAMmC,UAAYxB,EACpB,MAAOX,GAAMmC,SAASwB,SAAWjE,EAAW8F,KAAO,CAErD,IAAIC,GAAQ1F,EAAIC,GAAQ0F,EAAUD,EAAMzE,MAAQuE,EAAU/B,OAAO,EACjE,OAAmB,OAAfiC,EAAM1B,MACD0B,EAAM1B,OAAS2B,EAAU,EAAI,GAE7BD,EAAMvE,QAAUwE,EAAUxB,EAAgB,IAGrDyB,cAAe,gBACfC,eAAgBC,QAAS,OACzBC,YAAa,IACbC,KAAM,SAER,OAAOb,KAGTxF,EAAWsG,WAAW,gBAAiB,SAEvC,IAAIpG,GAAQ,SAASqG,GAAO,MAAOA,GAAIC,MAAM,KAE7CxG,GAAWsG,WAAW,iBACpBG,KAAM,SACNrB,eAAgBlF,EAAM","file":"../../../mode/python/python.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                        \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                        \"for\", \"from\", \"global\", \"if\", \"import\",\n                        \"lambda\", \"pass\", \"raise\", \"return\",\n                        \"try\", \"while\", \"with\", \"yield\", \"in\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                        \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                        \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                        \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                        \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                        \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                        \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                        \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                        \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                        \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                        \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function(conf, parserConf) {\n    var ERRORCLASS = \"error\";\n\n    var singleDelimiters = parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]/;\n    var doubleOperators = parserConf.doubleOperators || /^([!<>]==|<>|<<|>>|\\/\\/|\\*\\*)/;\n    var doubleDelimiters = parserConf.doubleDelimiters || /^(\\+=|\\-=|\\*=|%=|\\/=|&=|\\|=|\\^=)/;\n    var tripleDelimiters = parserConf.tripleDelimiters || /^(\\/\\/=|>>=|<<=|\\*\\*=)/;\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n\n    var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined)\n      myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n    if (parserConf.extra_builtins != undefined)\n      myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n    var py3 = parserConf.version && parseInt(parserConf.version, 10) == 3\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var singleOperators = parserConf.singleOperators || /^[\\+\\-\\*\\/%&|\\^~<>!@]/;\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var singleOperators = parserConf.singleOperators || /^[\\+\\-\\*\\/%&|\\^~<>!]/;\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                      \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                      \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rub]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins);\n\n    // tokenizers\n    function tokenBase(stream, state) {\n      if (stream.sol()) state.indent = stream.indentation()\n      // Handle scope changes\n      if (stream.sol() && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset)\n            pushPyScope(state);\n          else if (lineOffset < scopeOffset && dedent(stream, state))\n            state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state))\n            style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state) {\n      if (stream.eatSpace()) return null;\n\n      var ch = stream.peek();\n\n      // Handle Comments\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      // Handle Number Literals\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false;\n        // Floats\n        if (stream.match(/^\\d*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n        if (stream.match(/^\\d+\\.\\d*/)) { floatLiteral = true; }\n        if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        }\n        // Integers\n        var intLiteral = false;\n        // Hex\n        if (stream.match(/^0x[0-9a-f]+/i)) intLiteral = true;\n        // Binary\n        if (stream.match(/^0b[01]+/i)) intLiteral = true;\n        // Octal\n        if (stream.match(/^0o[0-7]+/i)) intLiteral = true;\n        // Decimal\n        if (stream.match(/^[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i);\n          // TODO - Can you have imaginary longs?\n          intLiteral = true;\n        }\n        // Zero by itself with no other piece of number.\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      }\n\n      // Handle Strings\n      if (stream.match(stringPrefixes)) {\n        state.tokenize = tokenStringFactory(stream.current());\n        return state.tokenize(stream, state);\n      }\n\n      // Handle operators and Delimiters\n      if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters))\n        return \"punctuation\";\n\n      if (stream.match(doubleOperators) || stream.match(singleOperators))\n        return \"operator\";\n\n      if (stream.match(singleDelimiters))\n        return \"punctuation\";\n\n      if (state.lastToken == \".\" && stream.match(identifiers))\n        return \"property\";\n\n      if (stream.match(keywords) || stream.match(wordOperators))\n        return \"keyword\";\n\n      if (stream.match(builtins))\n        return \"builtin\";\n\n      if (stream.match(/^(self|cls)\\b/))\n        return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\")\n          return \"def\";\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return ERRORCLASS;\n    }\n\n    function tokenStringFactory(delimiter) {\n      while (\"rub\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenBase;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenBase;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") state.scopes.pop()\n      state.scopes.push({offset: top(state).offset + conf.indentUnit,\n                         type: \"py\",\n                         align: null})\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^([\\s\\[\\{\\(]|#.*)*$/, false) ? null : stream.column() + 1\n      state.scopes.push({offset: state.indent + hangingIndent,\n                         type: type,\n                         align: align})\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) state.beginningOfLine = true;\n\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      // Handle decorators\n      if (state.beginningOfLine && current == \"@\")\n        return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n\n      if ((style == \"variable\" || style == \"builtin\")\n          && state.lastToken == \"meta\")\n        style = \"meta\";\n\n      // Handle scope changes.\n      if (current == \"pass\" || current == \"return\")\n        state.dedent += 1;\n\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\")\n        pushPyScope(state);\n\n      var delimiter_index = current.length == 1 ? \"[({\".indexOf(current) : -1;\n      if (delimiter_index != -1)\n        pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n      delimiter_index = \"])}\".indexOf(current);\n      if (delimiter_index != -1) {\n        if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent\n        else return ERRORCLASS;\n      }\n      if (state.dedent > 0 && stream.eol() && top(state).type == \"py\") {\n        if (state.scopes.length > 1) state.scopes.pop();\n        state.dedent -= 1;\n      }\n\n      return style;\n    }\n\n    var external = {\n      startState: function(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{offset: basecolumn || 0, type: \"py\", align: null}],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n\n        if (style && style != \"comment\")\n          state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n\n        if (stream.eol() && state.lambda)\n          state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n\n      indent: function(state, textAfter) {\n        if (state.tokenize != tokenBase)\n          return state.tokenize.isString ? CodeMirror.Pass : 0;\n\n        var scope = top(state), closing = scope.type == textAfter.charAt(0)\n        if (scope.align != null)\n          return scope.align - (closing ? 1 : 0)\n        else\n          return scope.offset - (closing ? hangingIndent : 0)\n      },\n\n      electricInput: /^\\s*[\\}\\]\\)]$/,\n      closeBrackets: {triples: \"'\\\"\"},\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function(str) { return str.split(\" \"); };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except\"+\n                          \"extern gil include nogil property public\"+\n                          \"readonly struct union DEF IF ELIF ELSE\")\n  });\n\n});\n"]}