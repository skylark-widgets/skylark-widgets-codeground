{"version":3,"sources":["mode/ruby/ruby.js"],"names":["define","CodeMirror","defineMode","config","wordObj","words","o","i","e","length","chain","newtok","stream","state","tokenize","push","tokenBase","sol","match","eol","readBlockComment","eatSpace","m","ch","next","readQuoted","currentIndex","current","skipTo","search_till","backUp","balance","chchr","style","embed","eat","delim","matching","propertyIsEnumerable","skipToEnd","readHereDoc","eatWhile","test","varList","lastTok","curPunc","more","tokenBaseUntilBrace","depth","peek","pop","tokenBaseOnce","alreadyCalled","quote","unescaped","escaped","context","type","prev","phrase","keywords","indentWords","dedentWords","[","{","(","startState","indented","indentUnit","continuedLine","token","indentation","kwtype","thisTok","word","column","indent","textAfter","firstChar","charAt","ct","closing","electricInput","lineComment","defineMIME"],"mappings":"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","file":"../../../mode/ruby/ruby.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"ruby\", function(config) {\n  function wordObj(words) {\n    var o = {};\n    for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n    return o;\n  }\n  var keywords = wordObj([\n    \"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\",\n    \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\",\n    \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\",\n    \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\",\n    \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\",\n    \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"\n  ]);\n  var indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\", \"then\",\n                             \"catch\", \"loop\", \"proc\", \"begin\"]);\n  var dedentWords = wordObj([\"end\", \"until\"]);\n  var matching = {\"[\": \"]\", \"{\": \"}\", \"(\": \")\"};\n  var curPunc;\n\n  function chain(newtok, stream, state) {\n    state.tokenize.push(newtok);\n    return newtok(stream, state);\n  }\n\n  function tokenBase(stream, state) {\n    if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n      state.tokenize.push(readBlockComment);\n      return \"comment\";\n    }\n    if (stream.eatSpace()) return null;\n    var ch = stream.next(), m;\n    if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n      return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n    } else if (ch == \"/\") {\n      var currentIndex = stream.current().length;\n      if (stream.skipTo(\"/\")) {\n        var search_till = stream.current().length;\n        stream.backUp(stream.current().length - currentIndex);\n        var balance = 0;  // balance brackets\n        while (stream.current().length < search_till) {\n          var chchr = stream.next();\n          if (chchr == \"(\") balance += 1;\n          else if (chchr == \")\") balance -= 1;\n          if (balance < 0) break;\n        }\n        stream.backUp(stream.current().length - currentIndex);\n        if (balance == 0)\n          return chain(readQuoted(ch, \"string-2\", true), stream, state);\n      }\n      return \"operator\";\n    } else if (ch == \"%\") {\n      var style = \"string\", embed = true;\n      if (stream.eat(\"s\")) style = \"atom\";\n      else if (stream.eat(/[WQ]/)) style = \"string\";\n      else if (stream.eat(/[r]/)) style = \"string-2\";\n      else if (stream.eat(/[wxq]/)) { style = \"string\"; embed = false; }\n      var delim = stream.eat(/[^\\w\\s=]/);\n      if (!delim) return \"operator\";\n      if (matching.propertyIsEnumerable(delim)) delim = matching[delim];\n      return chain(readQuoted(delim, style, embed, true), stream, state);\n    } else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (ch == \"<\" && (m = stream.match(/^<-?[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n      return chain(readHereDoc(m[1]), stream, state);\n    } else if (ch == \"0\") {\n      if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);\n      else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);\n      else stream.eatWhile(/[0-7]/);\n      return \"number\";\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n      return \"number\";\n    } else if (ch == \"?\") {\n      while (stream.match(/^\\\\[CM]-/)) {}\n      if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);\n      else stream.next();\n      return \"string\";\n    } else if (ch == \":\") {\n      if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n      if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state);\n\n      // :> :>> :< :<< are valid symbols\n      if (stream.eat(/[\\<\\>]/)) {\n        stream.eat(/[\\<\\>]/);\n        return \"atom\";\n      }\n\n      // :+ :- :/ :* :| :& :! are valid symbols\n      if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n        return \"atom\";\n      }\n\n      // Symbols can't start by a digit\n      if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n        stream.eatWhile(/[\\w$\\xa1-\\uffff]/);\n        // Only one ? ! = is allowed and only as the last character\n        stream.eat(/[\\?\\!\\=]/);\n        return \"atom\";\n      }\n      return \"operator\";\n    } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n      stream.eat(\"@\");\n      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n      return \"variable-2\";\n    } else if (ch == \"$\") {\n      if (stream.eat(/[a-zA-Z_]/)) {\n        stream.eatWhile(/[\\w]/);\n      } else if (stream.eat(/\\d/)) {\n        stream.eat(/\\d/);\n      } else {\n        stream.next(); // Must be a special global like $: or $!\n      }\n      return \"variable-3\";\n    } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n      stream.eat(/[\\?\\!]/);\n      if (stream.eat(\":\")) return \"atom\";\n      return \"ident\";\n    } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n      curPunc = \"|\";\n      return null;\n    } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    } else if (ch == \"-\" && stream.eat(\">\")) {\n      return \"arrow\";\n    } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n      var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n      if (ch == \".\" && !more) curPunc = \".\";\n      return \"operator\";\n    } else {\n      return null;\n    }\n  }\n\n  function tokenBaseUntilBrace(depth) {\n    if (!depth) depth = 1;\n    return function(stream, state) {\n      if (stream.peek() == \"}\") {\n        if (depth == 1) {\n          state.tokenize.pop();\n          return state.tokenize[state.tokenize.length-1](stream, state);\n        } else {\n          state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n        }\n      } else if (stream.peek() == \"{\") {\n        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n      }\n      return tokenBase(stream, state);\n    };\n  }\n  function tokenBaseOnce() {\n    var alreadyCalled = false;\n    return function(stream, state) {\n      if (alreadyCalled) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length-1](stream, state);\n      }\n      alreadyCalled = true;\n      return tokenBase(stream, state);\n    };\n  }\n  function readQuoted(quote, style, embed, unescaped) {\n    return function(stream, state) {\n      var escaped = false, ch;\n\n      if (state.context.type === 'read-quoted-paused') {\n        state.context = state.context.prev;\n        stream.eat(\"}\");\n      }\n\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && (unescaped || !escaped)) {\n          state.tokenize.pop();\n          break;\n        }\n        if (embed && ch == \"#\" && !escaped) {\n          if (stream.eat(\"{\")) {\n            if (quote == \"}\") {\n              state.context = {prev: state.context, type: 'read-quoted-paused'};\n            }\n            state.tokenize.push(tokenBaseUntilBrace());\n            break;\n          } else if (/[@\\$]/.test(stream.peek())) {\n            state.tokenize.push(tokenBaseOnce());\n            break;\n          }\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return style;\n    };\n  }\n  function readHereDoc(phrase) {\n    return function(stream, state) {\n      if (stream.match(phrase)) state.tokenize.pop();\n      else stream.skipToEnd();\n      return \"string\";\n    };\n  }\n  function readBlockComment(stream, state) {\n    if (stream.sol() && stream.match(\"=end\") && stream.eol())\n      state.tokenize.pop();\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: [tokenBase],\n              indented: 0,\n              context: {type: \"top\", indented: -config.indentUnit},\n              continuedLine: false,\n              lastTok: null,\n              varList: false};\n    },\n\n    token: function(stream, state) {\n      curPunc = null;\n      if (stream.sol()) state.indented = stream.indentation();\n      var style = state.tokenize[state.tokenize.length-1](stream, state), kwtype;\n      var thisTok = curPunc;\n      if (style == \"ident\") {\n        var word = stream.current();\n        style = state.lastTok == \".\" ? \"property\"\n          : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\"\n          : /^[A-Z]/.test(word) ? \"tag\"\n          : (state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList) ? \"def\"\n          : \"variable\";\n        if (style == \"keyword\") {\n          thisTok = word;\n          if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";\n          else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";\n          else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation())\n            kwtype = \"indent\";\n          else if (word == \"do\" && state.context.indented < state.indented)\n            kwtype = \"indent\";\n        }\n      }\n      if (curPunc || (style && style != \"comment\")) state.lastTok = thisTok;\n      if (curPunc == \"|\") state.varList = !state.varList;\n\n      if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc))\n        state.context = {prev: state.context, type: curPunc || style, indented: state.indented};\n      else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev)\n        state.context = state.context.prev;\n\n      if (stream.eol())\n        state.continuedLine = (curPunc == \"\\\\\" || style == \"operator\");\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize[state.tokenize.length-1] != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0);\n      var ct = state.context;\n      var closing = ct.type == matching[firstChar] ||\n        ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n      return ct.indented + (closing ? 0 : config.indentUnit) +\n        (state.continuedLine ? config.indentUnit : 0);\n    },\n\n    electricInput: /^\\s*(?:end|rescue|\\})$/,\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-ruby\", \"ruby\");\n\n});\n"]}