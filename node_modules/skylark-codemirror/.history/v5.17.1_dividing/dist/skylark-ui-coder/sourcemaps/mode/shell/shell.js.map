{"version":3,"sources":["mode/shell/shell.js"],"names":["define","CodeMirror","defineMode","style","string","split","i","length","words","tokenBase","stream","state","eatSpace","sol","ch","next","tokens","unshift","tokenString","tokenize","eat","skipToEnd","tokenDollar","eatWhile","test","eol","peek","cur","current","hasOwnProperty","quote","end","escaped","backUp","shift","hungry","startState","token","lineComment","fold","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GACjC,YAEAA,GAAWC,WAAW,QAAS,WAG7B,QAASF,GAAOG,EAAOC,GAErB,IAAI,GADAC,GAAQD,EAAOC,MAAM,KACjBC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAC/BE,EAAMH,EAAMC,IAAMH,EAkBtB,QAASM,GAAUC,EAAQC,GACzB,GAAID,EAAOE,WAAY,MAAO,KAE9B,IAAIC,GAAMH,EAAOG,MACbC,EAAKJ,EAAOK,MAEhB,IAAW,OAAPD,EAEF,MADAJ,GAAOK,OACA,IAET,IAAW,MAAPD,GAAsB,MAAPA,GAAqB,MAAPA,EAE/B,MADAH,GAAMK,OAAOC,QAAQC,EAAYJ,IAC1BK,EAAST,EAAQC,EAE1B,IAAW,MAAPG,EACF,MAAID,IAAOH,EAAOU,IAAI,MACpBV,EAAOW,YACA,SAETX,EAAOW,YACA,UAET,IAAW,MAAPP,EAEF,MADAH,GAAMK,OAAOC,QAAQK,GACdH,EAAST,EAAQC,EAE1B,IAAW,MAAPG,GAAqB,MAAPA,EAChB,MAAO,UAET,IAAW,MAAPA,EAGF,MAFAJ,GAAOU,IAAI,KACXV,EAAOa,SAAS,MACT,WAET,IAAI,KAAKC,KAAKV,KACZJ,EAAOa,SAAS,MACbb,EAAOe,QAAU,KAAKD,KAAKd,EAAOgB,SACnC,MAAO,QAGXhB,GAAOa,SAAS,QAChB,IAAII,GAAMjB,EAAOkB,SACjB,OAAsB,MAAlBlB,EAAOgB,QAAkB,MAAMF,KAAKG,GAAa,MAC9CnB,EAAMqB,eAAeF,GAAOnB,EAAMmB,GAAO,KAGlD,QAAST,GAAYY,GACnB,MAAO,UAASpB,EAAQC,GAEtB,IADA,GAAII,GAAMgB,GAAM,EAAOC,GAAU,EACA,OAAzBjB,EAAOL,EAAOK,SAAiB,CACrC,GAAIA,IAASe,IAAUE,EAAS,CAC9BD,GAAM,CACN,OAEF,GAAa,MAAThB,IAAiBiB,GAAqB,MAAVF,EAAgB,CAC9CE,GAAU,EACVtB,EAAOuB,OAAO,GACdtB,EAAMK,OAAOC,QAAQK,EACrB,OAEFU,GAAWA,GAAoB,OAATjB,EAKxB,OAHIgB,GAAQC,GACVrB,EAAMK,OAAOkB,QAEG,MAAVJ,GAA2B,MAAVA,EAAgB,QAAU,UAoBvD,QAASX,GAAST,EAAQC,GACxB,OAAQA,EAAMK,OAAO,IAAMP,GAAYC,EAAQC,GA5GjD,GAAIH,KASJR,GAAO,OAAQ,cAGfA,EAAO,UAAW,+FAIlBA,EAAO,UAAW,oTA2ElB,IAAIsB,GAAc,SAASZ,EAAQC,GAC7BA,EAAMK,OAAOT,OAAS,GAAGG,EAAOU,IAAI,IACxC,IAAIN,GAAKJ,EAAOK,OAAQoB,EAAS,IAEjC,OADW,MAAPrB,IAAYqB,EAAS,QACd,MAAPrB,GACFH,EAAMK,OAAO,GAAKE,EAAY,KACvBC,EAAST,EAAQC,KAErB,KAAKa,KAAKV,KACbJ,EAAOa,SAASY,GAChBzB,EAAOU,IAAI,MAEbT,EAAMK,OAAOkB,QACN,OAOT,QACEE,WAAY,WAAY,OAAQpB,YAChCqB,MAAO,SAAS3B,EAAQC,GACtB,MAAOQ,GAAST,EAAQC,IAE1B2B,YAAa,IACbC,KAAM,WAIVtC,EAAWuC,WAAW,YAAa","file":"../../../mode/shell/shell.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('shell', function() {\n\n  var words = {};\n  function define(style, string) {\n    var split = string.split(' ');\n    for(var i = 0; i < split.length; i++) {\n      words[split[i]] = style;\n    }\n  };\n\n  // Atoms\n  define('atom', 'true false');\n\n  // Keywords\n  define('keyword', 'if then do else elif while until for in esac fi fin ' +\n    'fil done exit set unset export function');\n\n  // Commands\n  define('builtin', 'ab awk bash beep cat cc cd chown chmod chroot clear cp ' +\n    'curl cut diff echo find gawk gcc get git grep kill killall ln ls make ' +\n    'mkdir openssl mv nc node npm ping ps restart rm rmdir sed service sh ' +\n    'shopt shred source sort sleep ssh start stop su sudo tee telnet top ' +\n    'touch vi vim wall wc wget who write yes zsh');\n\n  function tokenBase(stream, state) {\n    if (stream.eatSpace()) return null;\n\n    var sol = stream.sol();\n    var ch = stream.next();\n\n    if (ch === '\\\\') {\n      stream.next();\n      return null;\n    }\n    if (ch === '\\'' || ch === '\"' || ch === '`') {\n      state.tokens.unshift(tokenString(ch));\n      return tokenize(stream, state);\n    }\n    if (ch === '#') {\n      if (sol && stream.eat('!')) {\n        stream.skipToEnd();\n        return 'meta'; // 'comment'?\n      }\n      stream.skipToEnd();\n      return 'comment';\n    }\n    if (ch === '$') {\n      state.tokens.unshift(tokenDollar);\n      return tokenize(stream, state);\n    }\n    if (ch === '+' || ch === '=') {\n      return 'operator';\n    }\n    if (ch === '-') {\n      stream.eat('-');\n      stream.eatWhile(/\\w/);\n      return 'attribute';\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/\\d/);\n      if(stream.eol() || !/\\w/.test(stream.peek())) {\n        return 'number';\n      }\n    }\n    stream.eatWhile(/[\\w-]/);\n    var cur = stream.current();\n    if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n    return words.hasOwnProperty(cur) ? words[cur] : null;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var next, end = false, escaped = false;\n      while ((next = stream.next()) != null) {\n        if (next === quote && !escaped) {\n          end = true;\n          break;\n        }\n        if (next === '$' && !escaped && quote !== '\\'') {\n          escaped = true;\n          stream.backUp(1);\n          state.tokens.unshift(tokenDollar);\n          break;\n        }\n        escaped = !escaped && next === '\\\\';\n      }\n      if (end || !escaped) {\n        state.tokens.shift();\n      }\n      return (quote === '`' || quote === ')' ? 'quote' : 'string');\n    };\n  };\n\n  var tokenDollar = function(stream, state) {\n    if (state.tokens.length > 1) stream.eat('$');\n    var ch = stream.next(), hungry = /\\w/;\n    if (ch === '{') hungry = /[^}]/;\n    if (ch === '(') {\n      state.tokens[0] = tokenString(')');\n      return tokenize(stream, state);\n    }\n    if (!/\\d/.test(ch)) {\n      stream.eatWhile(hungry);\n      stream.eat('}');\n    }\n    state.tokens.shift();\n    return 'def';\n  };\n\n  function tokenize(stream, state) {\n    return (state.tokens[0] || tokenBase) (stream, state);\n  };\n\n  return {\n    startState: function() {return {tokens:[]};},\n    token: function(stream, state) {\n      return tokenize(stream, state);\n    },\n    lineComment: '#',\n    fold: \"brace\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-sh', 'shell');\n\n});\n"]}