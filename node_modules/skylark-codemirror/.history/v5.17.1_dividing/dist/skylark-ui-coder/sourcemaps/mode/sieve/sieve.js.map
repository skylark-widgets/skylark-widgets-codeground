{"version":3,"sources":["mode/sieve/sieve.js"],"names":["define","CodeMirror","defineMode","config","words","str","obj","split","i","length","tokenBase","stream","state","ch","next","eat","tokenize","tokenCComment","skipToEnd","tokenString","_indent","push","pop","test","eatWhile","cur","current","tokenMultiLineString","keywords","propertyIsEnumerable","atoms","_multiLineString","sol","eol","eatSpace","peek","maybeEnd","quote","escaped","indentUnit","startState","base","baseIndent","token","indent","_textAfter","electricChars","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GACjC,YAEAA,GAAWC,WAAW,QAAS,SAASC,GACtC,QAASC,GAAMC,GAEb,IAAK,GADDC,MAAUF,EAAQC,EAAIE,MAAM,KACvBC,EAAI,EAAGA,EAAIJ,EAAMK,SAAUD,EAAGF,EAAIF,EAAMI,KAAM,CACvD,OAAOF,GAOT,QAASI,GAAUC,EAAQC,GAEzB,GAAIC,GAAKF,EAAOG,MAChB,IAAU,KAAND,GAAaF,EAAOI,IAAI,KAE1B,MADAH,GAAMI,SAAWC,EACVA,EAAcN,EAAQC,EAG/B,IAAW,MAAPC,EAEF,MADAF,GAAOO,YACA,SAGT,IAAU,KAANL,EAEF,MADAD,GAAMI,SAAWG,EAAYN,GACtBD,EAAMI,SAASL,EAAQC,EAGhC,IAAU,KAANC,EAKF,MAJAD,GAAMQ,QAAQC,KAAK,KAGnBT,EAAMQ,QAAQC,KAAK,KACZ,IAGT,IAAW,MAAPR,EAEF,MADAD,GAAMQ,QAAQC,KAAK,KACZ,IAQT,IALU,KAANR,IACFD,EAAMQ,QAAQE,MACdV,EAAMQ,QAAQE,OAGL,MAAPT,EAEF,MADAD,GAAMQ,QAAQE,MACP,IAGT,IAAU,KAANT,EACF,MAAO,KAET,IAAU,KAANA,EACF,MAAO,KAGT,IAAI,aAAaU,KAAKV,GACpB,MAAO,KAGT,IAAI,KAAKU,KAAKV,GAGZ,MAFAF,GAAOa,SAAS,QAChBb,EAAOI,IAAI,YACJ,QAIT,IAAU,KAANF,EAIF,MAHAF,GAAOa,SAAS,aAChBb,EAAOa,SAAS,gBAET,UAGTb,GAAOa,SAAS,KAChB,IAAIC,GAAMd,EAAOe,SAKjB,OAAY,QAAPD,GAAkBd,EAAOI,IAAI,MAEhCH,EAAMI,SAAWW,EACV,UAGLC,EAASC,qBAAqBJ,GACzB,UAELK,EAAMD,qBAAqBJ,GACtB,OAEF,KAGT,QAASE,GAAqBhB,EAAQC,GAIpC,MAFAA,GAAMmB,kBAAmB,EAEpBpB,EAAOqB,OAYU,KAAjBrB,EAAOG,QAAoBH,EAAOsB,QAErCrB,EAAMmB,kBAAmB,EACzBnB,EAAMI,SAAWN,GAGZ,WAjBLC,EAAOuB,WAEc,KAAjBvB,EAAOwB,QACTxB,EAAOO,YACA,YAGTP,EAAOO,YACA,WAYX,QAASD,GAAcN,EAAQC,GAE7B,IADA,GAAsBC,GAAlBuB,GAAW,EACgB,OAAvBvB,EAAKF,EAAOG,SAAiB,CACnC,GAAIsB,GAAkB,KAANvB,EAAW,CACzBD,EAAMI,SAAWN,CACjB,OAEF0B,EAAkB,KAANvB,EAEd,MAAO,UAGT,QAASM,GAAYkB,GACnB,MAAO,UAAS1B,EAAQC,GAEtB,IADA,GAAqBC,GAAjByB,GAAU,EACiB,OAAvBzB,EAAKF,EAAOG,UACdD,GAAMwB,GAAUC,IAEpBA,GAAWA,GAAiB,MAANzB,CAGxB,OADKyB,KAAS1B,EAAMI,SAAWN,GACxB,UAzIX,GAAIkB,GAAWxB,EAAM,8BACjB0B,EAAQ1B,EAAM,kBACdmC,EAAapC,EAAOoC,UA2IxB,QACEC,WAAY,SAASC,GACnB,OAAQzB,SAAUN,EACVgC,WAAYD,GAAQ,EACpBrB,aAGVuB,MAAO,SAAShC,EAAQC,GACtB,MAAID,GAAOuB,WACF,MAEDtB,EAAMI,UAAYN,GAAWC,EAAQC,IAG/CgC,OAAQ,SAAShC,EAAOiC,GACtB,GAAIpC,GAASG,EAAMQ,QAAQX,MAO3B,OANIoC,IAAgC,KAAjBA,EAAW,IAC5BpC,IAEEA,EAAQ,IACVA,EAAS,GAEJA,EAAS8B,GAGlBO,cAAe,OAInB7C,EAAW8C,WAAW,oBAAqB","file":"../../../mode/sieve/sieve.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sieve\", function(config) {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var keywords = words(\"if elsif else stop require\");\n  var atoms = words(\"true false not\");\n  var indentUnit = config.indentUnit;\n\n  function tokenBase(stream, state) {\n\n    var ch = stream.next();\n    if (ch == \"/\" && stream.eat(\"*\")) {\n      state.tokenize = tokenCComment;\n      return tokenCComment(stream, state);\n    }\n\n    if (ch === '#') {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (ch == \"\\\"\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n\n    if (ch == \"(\") {\n      state._indent.push(\"(\");\n      // add virtual angel wings so that editor behaves...\n      // ...more sane incase of broken brackets\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch === \"{\") {\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch == \")\")  {\n      state._indent.pop();\n      state._indent.pop();\n    }\n\n    if (ch === \"}\") {\n      state._indent.pop();\n      return null;\n    }\n\n    if (ch == \",\")\n      return null;\n\n    if (ch == \";\")\n      return null;\n\n\n    if (/[{}\\(\\),;]/.test(ch))\n      return null;\n\n    // 1*DIGIT \"K\" / \"M\" / \"G\"\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\d]/);\n      stream.eat(/[KkMmGg]/);\n      return \"number\";\n    }\n\n    // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n    if (ch == \":\") {\n      stream.eatWhile(/[a-zA-Z_]/);\n      stream.eatWhile(/[a-zA-Z0-9_]/);\n\n      return \"operator\";\n    }\n\n    stream.eatWhile(/\\w/);\n    var cur = stream.current();\n\n    // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n    // *(multiline-literal / multiline-dotstart)\n    // \".\" CRLF\n    if ((cur == \"text\") && stream.eat(\":\"))\n    {\n      state.tokenize = tokenMultiLineString;\n      return \"string\";\n    }\n\n    if (keywords.propertyIsEnumerable(cur))\n      return \"keyword\";\n\n    if (atoms.propertyIsEnumerable(cur))\n      return \"atom\";\n\n    return null;\n  }\n\n  function tokenMultiLineString(stream, state)\n  {\n    state._multiLineString = true;\n    // the first line is special it may contain a comment\n    if (!stream.sol()) {\n      stream.eatSpace();\n\n      if (stream.peek() == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      stream.skipToEnd();\n      return \"string\";\n    }\n\n    if ((stream.next() == \".\")  && (stream.eol()))\n    {\n      state._multiLineString = false;\n      state.tokenize = tokenBase;\n    }\n\n    return \"string\";\n  }\n\n  function tokenCComment(stream, state) {\n    var maybeEnd = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (maybeEnd && ch == \"/\") {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped)\n          break;\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  return {\n    startState: function(base) {\n      return {tokenize: tokenBase,\n              baseIndent: base || 0,\n              _indent: []};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace())\n        return null;\n\n      return (state.tokenize || tokenBase)(stream, state);;\n    },\n\n    indent: function(state, _textAfter) {\n      var length = state._indent.length;\n      if (_textAfter && (_textAfter[0] == \"}\"))\n        length--;\n\n      if (length <0)\n        length = 0;\n\n      return length * indentUnit;\n    },\n\n    electricChars: \"}\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/sieve\", \"sieve\");\n\n});\n"]}