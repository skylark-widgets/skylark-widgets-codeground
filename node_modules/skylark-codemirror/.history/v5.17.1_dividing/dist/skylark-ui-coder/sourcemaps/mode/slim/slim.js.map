{"version":3,"sources":["mode/slim/slim.js"],"names":["define","CodeMirror","defineMode","config","backup","pos","tokenize","style","restore","stream","state","maybeBackup","pat","offset","cur","current","idx","search","backUp","length","continueLine","column","stack","parent","indented","line","finishContinue","lineContinuable","match","eol","commaContinuable","rubyInQuote","endQuote","ch","peek","rubyState","next","ruby","startRubySplat","runSplat","context","prev","eatSpace","startState","rubyMode","token","htmlLine","html","htmlMode","htmlState","startHtmlLine","lastTokenize","startHtmlMode","comment","skipToEnd","commentMode","attributeWrapper","eat","wrappedAttributeNameRegexp","attributeWrapperAssign","attributeWrapperValue","readQuoted","startAttributeWrapperMode","sub","subStream","StringStream","string","slice","tabSize","start","lastColumnPos","lastColumnValue","subMode","subState","firstSub","createMode","mode","query","embedded","spec","mimeModes","getMode","factory","modes","name","hasOwnProperty","startSubMode","doctypeLine","_state","startLine","m","embeddedRegexp","slimTag","slim","startOfLine","slimTagExtras","nameRegexp","slimClass","classIdRegexp","classNameRegexp","slimAttribute","closing","RegExp","$1","attributeNameRegexp","slimAttributeAssign","slimContent","slimAttributeValue","slimAttributeSymbols","quote","embed","unescaped","nextTokenize","fresh","escaped","javascript","css","sass","scss","less","styl","coffee","asciidoc","markdown","textile","creole","wiki","mediawiki","rdoc","builder","nokogiri","erb","map","arr","key","push","join","styleMap","commentLine","slimSwitch","slimId","slimSubmode","closeAttributeTag","slimDoctype","lineContinuation","{","[","(","nameStartChar","nameChar","last","copyState","sol","indentation","blankLine","innerMode","defineMIME"],"mappings":"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","file":"../../../mode/slim/slim.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Slim Highlighting for CodeMirror copyright (c) HicknHack Software Gmbh\n\ndefine([\"../../Coder\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], function(CodeMirror) {\n\"use strict\";\n\n  CodeMirror.defineMode(\"slim\", function(config) {\n    var htmlMode = CodeMirror.getMode(config, {name: \"htmlmixed\"});\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n    var modes = { html: htmlMode, ruby: rubyMode };\n    var embedded = {\n      ruby: \"ruby\",\n      javascript: \"javascript\",\n      css: \"text/css\",\n      sass: \"text/x-sass\",\n      scss: \"text/x-scss\",\n      less: \"text/x-less\",\n      styl: \"text/x-styl\", // no highlighting so far\n      coffee: \"coffeescript\",\n      asciidoc: \"text/x-asciidoc\",\n      markdown: \"text/x-markdown\",\n      textile: \"text/x-textile\", // no highlighting so far\n      creole: \"text/x-creole\", // no highlighting so far\n      wiki: \"text/x-wiki\", // no highlighting so far\n      mediawiki: \"text/x-mediawiki\", // no highlighting so far\n      rdoc: \"text/x-rdoc\", // no highlighting so far\n      builder: \"text/x-builder\", // no highlighting so far\n      nokogiri: \"text/x-nokogiri\", // no highlighting so far\n      erb: \"application/x-erb\"\n    };\n    var embeddedRegexp = function(map){\n      var arr = [];\n      for(var key in map) arr.push(key);\n      return new RegExp(\"^(\"+arr.join('|')+\"):\");\n    }(embedded);\n\n    var styleMap = {\n      \"commentLine\": \"comment\",\n      \"slimSwitch\": \"operator special\",\n      \"slimTag\": \"tag\",\n      \"slimId\": \"attribute def\",\n      \"slimClass\": \"attribute qualifier\",\n      \"slimAttribute\": \"attribute\",\n      \"slimSubmode\": \"keyword special\",\n      \"closeAttributeTag\": null,\n      \"slimDoctype\": null,\n      \"lineContinuation\": null\n    };\n    var closing = {\n      \"{\": \"}\",\n      \"[\": \"]\",\n      \"(\": \")\"\n    };\n\n    var nameStartChar = \"_a-zA-Z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\";\n    var nameChar = nameStartChar + \"\\\\-0-9\\xB7\\u0300-\\u036F\\u203F-\\u2040\";\n    var nameRegexp = new RegExp(\"^[:\"+nameStartChar+\"](?::[\"+nameChar+\"]|[\"+nameChar+\"]*)\");\n    var attributeNameRegexp = new RegExp(\"^[:\"+nameStartChar+\"][:\\\\.\"+nameChar+\"]*(?=\\\\s*=)\");\n    var wrappedAttributeNameRegexp = new RegExp(\"^[:\"+nameStartChar+\"][:\\\\.\"+nameChar+\"]*\");\n    var classNameRegexp = /^\\.-?[_a-zA-Z]+[\\w\\-]*/;\n    var classIdRegexp = /^#[_a-zA-Z]+[\\w\\-]*/;\n\n    function backup(pos, tokenize, style) {\n      var restore = function(stream, state) {\n        state.tokenize = tokenize;\n        if (stream.pos < pos) {\n          stream.pos = pos;\n          return style;\n        }\n        return state.tokenize(stream, state);\n      };\n      return function(stream, state) {\n        state.tokenize = restore;\n        return tokenize(stream, state);\n      };\n    }\n\n    function maybeBackup(stream, state, pat, offset, style) {\n      var cur = stream.current();\n      var idx = cur.search(pat);\n      if (idx > -1) {\n        state.tokenize = backup(stream.pos, state.tokenize, style);\n        stream.backUp(cur.length - idx - offset);\n      }\n      return style;\n    }\n\n    function continueLine(state, column) {\n      state.stack = {\n        parent: state.stack,\n        style: \"continuation\",\n        indented: column,\n        tokenize: state.line\n      };\n      state.line = state.tokenize;\n    }\n    function finishContinue(state) {\n      if (state.line == state.tokenize) {\n        state.line = state.stack.tokenize;\n        state.stack = state.stack.parent;\n      }\n    }\n\n    function lineContinuable(column, tokenize) {\n      return function(stream, state) {\n        finishContinue(state);\n        if (stream.match(/^\\\\$/)) {\n          continueLine(state, column);\n          return \"lineContinuation\";\n        }\n        var style = tokenize(stream, state);\n        if (stream.eol() && stream.current().match(/(?:^|[^\\\\])(?:\\\\\\\\)*\\\\$/)) {\n          stream.backUp(1);\n        }\n        return style;\n      };\n    }\n    function commaContinuable(column, tokenize) {\n      return function(stream, state) {\n        finishContinue(state);\n        var style = tokenize(stream, state);\n        if (stream.eol() && stream.current().match(/,$/)) {\n          continueLine(state, column);\n        }\n        return style;\n      };\n    }\n\n    function rubyInQuote(endQuote, tokenize) {\n      // TODO: add multi line support\n      return function(stream, state) {\n        var ch = stream.peek();\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = tokenize;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n    function startRubySplat(tokenize) {\n      var rubyState;\n      var runSplat = function(stream, state) {\n        if (state.rubyState.tokenize.length == 1 && !state.rubyState.context.prev) {\n          stream.backUp(1);\n          if (stream.eatSpace()) {\n            state.rubyState = rubyState;\n            state.tokenize = tokenize;\n            return tokenize(stream, state);\n          }\n          stream.next();\n        }\n        return ruby(stream, state);\n      };\n      return function(stream, state) {\n        rubyState = state.rubyState;\n        state.rubyState = CodeMirror.startState(rubyMode);\n        state.tokenize = runSplat;\n        return ruby(stream, state);\n      };\n    }\n\n    function ruby(stream, state) {\n      return rubyMode.token(stream, state.rubyState);\n    }\n\n    function htmlLine(stream, state) {\n      if (stream.match(/^\\\\$/)) {\n        return \"lineContinuation\";\n      }\n      return html(stream, state);\n    }\n    function html(stream, state) {\n      if (stream.match(/^#\\{/)) {\n        state.tokenize = rubyInQuote(\"}\", state.tokenize);\n        return null;\n      }\n      return maybeBackup(stream, state, /[^\\\\]#\\{/, 1, htmlMode.token(stream, state.htmlState));\n    }\n\n    function startHtmlLine(lastTokenize) {\n      return function(stream, state) {\n        var style = htmlLine(stream, state);\n        if (stream.eol()) state.tokenize = lastTokenize;\n        return style;\n      };\n    }\n\n    function startHtmlMode(stream, state, offset) {\n      state.stack = {\n        parent: state.stack,\n        style: \"html\",\n        indented: stream.column() + offset, // pipe + space\n        tokenize: state.line\n      };\n      state.line = state.tokenize = html;\n      return null;\n    }\n\n    function comment(stream, state) {\n      stream.skipToEnd();\n      return state.stack.style;\n    }\n\n    function commentMode(stream, state) {\n      state.stack = {\n        parent: state.stack,\n        style: \"comment\",\n        indented: state.indented + 1,\n        tokenize: state.line\n      };\n      state.line = comment;\n      return comment(stream, state);\n    }\n\n    function attributeWrapper(stream, state) {\n      if (stream.eat(state.stack.endQuote)) {\n        state.line = state.stack.line;\n        state.tokenize = state.stack.tokenize;\n        state.stack = state.stack.parent;\n        return null;\n      }\n      if (stream.match(wrappedAttributeNameRegexp)) {\n        state.tokenize = attributeWrapperAssign;\n        return \"slimAttribute\";\n      }\n      stream.next();\n      return null;\n    }\n    function attributeWrapperAssign(stream, state) {\n      if (stream.match(/^==?/)) {\n        state.tokenize = attributeWrapperValue;\n        return null;\n      }\n      return attributeWrapper(stream, state);\n    }\n    function attributeWrapperValue(stream, state) {\n      var ch = stream.peek();\n      if (ch == '\"' || ch == \"\\'\") {\n        state.tokenize = readQuoted(ch, \"string\", true, false, attributeWrapper);\n        stream.next();\n        return state.tokenize(stream, state);\n      }\n      if (ch == '[') {\n        return startRubySplat(attributeWrapper)(stream, state);\n      }\n      if (stream.match(/^(true|false|nil)\\b/)) {\n        state.tokenize = attributeWrapper;\n        return \"keyword\";\n      }\n      return startRubySplat(attributeWrapper)(stream, state);\n    }\n\n    function startAttributeWrapperMode(state, endQuote, tokenize) {\n      state.stack = {\n        parent: state.stack,\n        style: \"wrapper\",\n        indented: state.indented + 1,\n        tokenize: tokenize,\n        line: state.line,\n        endQuote: endQuote\n      };\n      state.line = state.tokenize = attributeWrapper;\n      return null;\n    }\n\n    function sub(stream, state) {\n      if (stream.match(/^#\\{/)) {\n        state.tokenize = rubyInQuote(\"}\", state.tokenize);\n        return null;\n      }\n      var subStream = new CodeMirror.StringStream(stream.string.slice(state.stack.indented), stream.tabSize);\n      subStream.pos = stream.pos - state.stack.indented;\n      subStream.start = stream.start - state.stack.indented;\n      subStream.lastColumnPos = stream.lastColumnPos - state.stack.indented;\n      subStream.lastColumnValue = stream.lastColumnValue - state.stack.indented;\n      var style = state.subMode.token(subStream, state.subState);\n      stream.pos = subStream.pos + state.stack.indented;\n      return style;\n    }\n    function firstSub(stream, state) {\n      state.stack.indented = stream.column();\n      state.line = state.tokenize = sub;\n      return state.tokenize(stream, state);\n    }\n\n    function createMode(mode) {\n      var query = embedded[mode];\n      var spec = CodeMirror.mimeModes[query];\n      if (spec) {\n        return CodeMirror.getMode(config, spec);\n      }\n      var factory = CodeMirror.modes[query];\n      if (factory) {\n        return factory(config, {name: query});\n      }\n      return CodeMirror.getMode(config, \"null\");\n    }\n\n    function getMode(mode) {\n      if (!modes.hasOwnProperty(mode)) {\n        return modes[mode] = createMode(mode);\n      }\n      return modes[mode];\n    }\n\n    function startSubMode(mode, state) {\n      var subMode = getMode(mode);\n      var subState = CodeMirror.startState(subMode);\n\n      state.subMode = subMode;\n      state.subState = subState;\n\n      state.stack = {\n        parent: state.stack,\n        style: \"sub\",\n        indented: state.indented + 1,\n        tokenize: state.line\n      };\n      state.line = state.tokenize = firstSub;\n      return \"slimSubmode\";\n    }\n\n    function doctypeLine(stream, _state) {\n      stream.skipToEnd();\n      return \"slimDoctype\";\n    }\n\n    function startLine(stream, state) {\n      var ch = stream.peek();\n      if (ch == '<') {\n        return (state.tokenize = startHtmlLine(state.tokenize))(stream, state);\n      }\n      if (stream.match(/^[|']/)) {\n        return startHtmlMode(stream, state, 1);\n      }\n      if (stream.match(/^\\/(!|\\[\\w+])?/)) {\n        return commentMode(stream, state);\n      }\n      if (stream.match(/^(-|==?[<>]?)/)) {\n        state.tokenize = lineContinuable(stream.column(), commaContinuable(stream.column(), ruby));\n        return \"slimSwitch\";\n      }\n      if (stream.match(/^doctype\\b/)) {\n        state.tokenize = doctypeLine;\n        return \"keyword\";\n      }\n\n      var m = stream.match(embeddedRegexp);\n      if (m) {\n        return startSubMode(m[1], state);\n      }\n\n      return slimTag(stream, state);\n    }\n\n    function slim(stream, state) {\n      if (state.startOfLine) {\n        return startLine(stream, state);\n      }\n      return slimTag(stream, state);\n    }\n\n    function slimTag(stream, state) {\n      if (stream.eat('*')) {\n        state.tokenize = startRubySplat(slimTagExtras);\n        return null;\n      }\n      if (stream.match(nameRegexp)) {\n        state.tokenize = slimTagExtras;\n        return \"slimTag\";\n      }\n      return slimClass(stream, state);\n    }\n    function slimTagExtras(stream, state) {\n      if (stream.match(/^(<>?|><?)/)) {\n        state.tokenize = slimClass;\n        return null;\n      }\n      return slimClass(stream, state);\n    }\n    function slimClass(stream, state) {\n      if (stream.match(classIdRegexp)) {\n        state.tokenize = slimClass;\n        return \"slimId\";\n      }\n      if (stream.match(classNameRegexp)) {\n        state.tokenize = slimClass;\n        return \"slimClass\";\n      }\n      return slimAttribute(stream, state);\n    }\n    function slimAttribute(stream, state) {\n      if (stream.match(/^([\\[\\{\\(])/)) {\n        return startAttributeWrapperMode(state, closing[RegExp.$1], slimAttribute);\n      }\n      if (stream.match(attributeNameRegexp)) {\n        state.tokenize = slimAttributeAssign;\n        return \"slimAttribute\";\n      }\n      if (stream.peek() == '*') {\n        stream.next();\n        state.tokenize = startRubySplat(slimContent);\n        return null;\n      }\n      return slimContent(stream, state);\n    }\n    function slimAttributeAssign(stream, state) {\n      if (stream.match(/^==?/)) {\n        state.tokenize = slimAttributeValue;\n        return null;\n      }\n      // should never happen, because of forward lookup\n      return slimAttribute(stream, state);\n    }\n\n    function slimAttributeValue(stream, state) {\n      var ch = stream.peek();\n      if (ch == '\"' || ch == \"\\'\") {\n        state.tokenize = readQuoted(ch, \"string\", true, false, slimAttribute);\n        stream.next();\n        return state.tokenize(stream, state);\n      }\n      if (ch == '[') {\n        return startRubySplat(slimAttribute)(stream, state);\n      }\n      if (ch == ':') {\n        return startRubySplat(slimAttributeSymbols)(stream, state);\n      }\n      if (stream.match(/^(true|false|nil)\\b/)) {\n        state.tokenize = slimAttribute;\n        return \"keyword\";\n      }\n      return startRubySplat(slimAttribute)(stream, state);\n    }\n    function slimAttributeSymbols(stream, state) {\n      stream.backUp(1);\n      if (stream.match(/^[^\\s],(?=:)/)) {\n        state.tokenize = startRubySplat(slimAttributeSymbols);\n        return null;\n      }\n      stream.next();\n      return slimAttribute(stream, state);\n    }\n    function readQuoted(quote, style, embed, unescaped, nextTokenize) {\n      return function(stream, state) {\n        finishContinue(state);\n        var fresh = stream.current().length == 0;\n        if (stream.match(/^\\\\$/, fresh)) {\n          if (!fresh) return style;\n          continueLine(state, state.indented);\n          return \"lineContinuation\";\n        }\n        if (stream.match(/^#\\{/, fresh)) {\n          if (!fresh) return style;\n          state.tokenize = rubyInQuote(\"}\", state.tokenize);\n          return null;\n        }\n        var escaped = false, ch;\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && (unescaped || !escaped)) {\n            state.tokenize = nextTokenize;\n            break;\n          }\n          if (embed && ch == \"#\" && !escaped) {\n            if (stream.eat(\"{\")) {\n              stream.backUp(2);\n              break;\n            }\n          }\n          escaped = !escaped && ch == \"\\\\\";\n        }\n        if (stream.eol() && escaped) {\n          stream.backUp(1);\n        }\n        return style;\n      };\n    }\n    function slimContent(stream, state) {\n      if (stream.match(/^==?/)) {\n        state.tokenize = ruby;\n        return \"slimSwitch\";\n      }\n      if (stream.match(/^\\/$/)) { // tag close hint\n        state.tokenize = slim;\n        return null;\n      }\n      if (stream.match(/^:/)) { // inline tag\n        state.tokenize = slimTag;\n        return \"slimSwitch\";\n      }\n      startHtmlMode(stream, state, 0);\n      return state.tokenize(stream, state);\n    }\n\n    var mode = {\n      // default to html mode\n      startState: function() {\n        var htmlState = CodeMirror.startState(htmlMode);\n        var rubyState = CodeMirror.startState(rubyMode);\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          stack: null,\n          last: null,\n          tokenize: slim,\n          line: slim,\n          indented: 0\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          htmlState : CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          subMode: state.subMode,\n          subState: state.subMode && CodeMirror.copyState(state.subMode, state.subState),\n          stack: state.stack,\n          last: state.last,\n          tokenize: state.tokenize,\n          line: state.line\n        };\n      },\n\n      token: function(stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n          state.tokenize = state.line;\n          while (state.stack && state.stack.indented > state.indented && state.last != \"slimSubmode\") {\n            state.line = state.tokenize = state.stack.tokenize;\n            state.stack = state.stack.parent;\n            state.subMode = null;\n            state.subState = null;\n          }\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false;\n        if (style) state.last = style;\n        return styleMap.hasOwnProperty(style) ? styleMap[style] : style;\n      },\n\n      blankLine: function(state) {\n        if (state.subMode && state.subMode.blankLine) {\n          return state.subMode.blankLine(state.subState);\n        }\n      },\n\n      innerMode: function(state) {\n        if (state.subMode) return {state: state.subState, mode: state.subMode};\n        return {state: state, mode: mode};\n      }\n\n      //indent: function(state) {\n      //  return state.indented;\n      //}\n    };\n    return mode;\n  }, \"htmlmixed\", \"ruby\");\n\n  CodeMirror.defineMIME(\"text/x-slim\", \"slim\");\n  CodeMirror.defineMIME(\"application/x-slim\", \"slim\");\n});\n"]}