{"version":3,"sources":["mode/smalltalk/smalltalk.js"],"names":["define","CodeMirror","defineMode","config","specialChars","keywords","Context","tokenizer","parent","this","next","Token","name","context","eos","State","expectVariable","indentation","userIndentationDelta","prototype","userIndent","indentUnit","stream","state","token","aChar","nextComment","nextString","peek","nextSymbol","eatWhile","nextTemporaries","test","Math","max","current","eat","startState","eatSpace","blankLine","indent","textAfter","i","charAt","electricChars","defineMIME"],"mappings":"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","file":"../../../mode/smalltalk/smalltalk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('smalltalk', function(config) {\n\n  var specialChars = /[+\\-\\/\\\\*~<>=@%|&?!.,:;^]/;\n  var keywords = /true|false|nil|self|super|thisContext/;\n\n  var Context = function(tokenizer, parent) {\n    this.next = tokenizer;\n    this.parent = parent;\n  };\n\n  var Token = function(name, context, eos) {\n    this.name = name;\n    this.context = context;\n    this.eos = eos;\n  };\n\n  var State = function() {\n    this.context = new Context(next, null);\n    this.expectVariable = true;\n    this.indentation = 0;\n    this.userIndentationDelta = 0;\n  };\n\n  State.prototype.userIndent = function(indentation) {\n    this.userIndentationDelta = indentation > 0 ? (indentation / config.indentUnit - this.indentation) : 0;\n  };\n\n  var next = function(stream, context, state) {\n    var token = new Token(null, context, false);\n    var aChar = stream.next();\n\n    if (aChar === '\"') {\n      token = nextComment(stream, new Context(nextComment, context));\n\n    } else if (aChar === '\\'') {\n      token = nextString(stream, new Context(nextString, context));\n\n    } else if (aChar === '#') {\n      if (stream.peek() === '\\'') {\n        stream.next();\n        token = nextSymbol(stream, new Context(nextSymbol, context));\n      } else {\n        if (stream.eatWhile(/[^\\s.{}\\[\\]()]/))\n          token.name = 'string-2';\n        else\n          token.name = 'meta';\n      }\n\n    } else if (aChar === '$') {\n      if (stream.next() === '<') {\n        stream.eatWhile(/[^\\s>]/);\n        stream.next();\n      }\n      token.name = 'string-2';\n\n    } else if (aChar === '|' && state.expectVariable) {\n      token.context = new Context(nextTemporaries, context);\n\n    } else if (/[\\[\\]{}()]/.test(aChar)) {\n      token.name = 'bracket';\n      token.eos = /[\\[{(]/.test(aChar);\n\n      if (aChar === '[') {\n        state.indentation++;\n      } else if (aChar === ']') {\n        state.indentation = Math.max(0, state.indentation - 1);\n      }\n\n    } else if (specialChars.test(aChar)) {\n      stream.eatWhile(specialChars);\n      token.name = 'operator';\n      token.eos = aChar !== ';'; // ; cascaded message expression\n\n    } else if (/\\d/.test(aChar)) {\n      stream.eatWhile(/[\\w\\d]/);\n      token.name = 'number';\n\n    } else if (/[\\w_]/.test(aChar)) {\n      stream.eatWhile(/[\\w\\d_]/);\n      token.name = state.expectVariable ? (keywords.test(stream.current()) ? 'keyword' : 'variable') : null;\n\n    } else {\n      token.eos = state.expectVariable;\n    }\n\n    return token;\n  };\n\n  var nextComment = function(stream, context) {\n    stream.eatWhile(/[^\"]/);\n    return new Token('comment', stream.eat('\"') ? context.parent : context, true);\n  };\n\n  var nextString = function(stream, context) {\n    stream.eatWhile(/[^']/);\n    return new Token('string', stream.eat('\\'') ? context.parent : context, false);\n  };\n\n  var nextSymbol = function(stream, context) {\n    stream.eatWhile(/[^']/);\n    return new Token('string-2', stream.eat('\\'') ? context.parent : context, false);\n  };\n\n  var nextTemporaries = function(stream, context) {\n    var token = new Token(null, context, false);\n    var aChar = stream.next();\n\n    if (aChar === '|') {\n      token.context = context.parent;\n      token.eos = true;\n\n    } else {\n      stream.eatWhile(/[^|]/);\n      token.name = 'variable';\n    }\n\n    return token;\n  };\n\n  return {\n    startState: function() {\n      return new State;\n    },\n\n    token: function(stream, state) {\n      state.userIndent(stream.indentation());\n\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var token = state.context.next(stream, state.context, state);\n      state.context = token.context;\n      state.expectVariable = token.eos;\n\n      return token.name;\n    },\n\n    blankLine: function(state) {\n      state.userIndent(0);\n    },\n\n    indent: function(state, textAfter) {\n      var i = state.context.next === next && textAfter && textAfter.charAt(0) === ']' ? -1 : state.userIndentationDelta;\n      return (state.indentation + i) * config.indentUnit;\n    },\n\n    electricChars: ']'\n  };\n\n});\n\nCodeMirror.defineMIME('text/x-stsrc', {name: 'smalltalk'});\n\n});\n"]}