{"version":3,"sources":["mode/solr/solr.js"],"names":["define","CodeMirror","defineMode","isNumber","word","parseFloat","toString","tokenString","quote","stream","state","next","escaped","tokenize","tokenBase","tokenOperator","operator","style","eat","tokenWord","ch","peek","match","isStringChar","isOperatorString","test","isOperatorChar","startState","token","eatSpace","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,eAAgB,SAASC,GACjC,YAEAA,GAAWC,WAAW,OAAQ,WAO5B,QAASC,GAASC,GAChB,MAAOC,YAAWD,EAAM,IAAIE,aAAeF,EAG7C,QAASG,GAAYC,GACnB,MAAO,UAASC,EAAQC,GAEtB,IADA,GAAqBC,GAAjBC,GAAU,EACmB,OAAzBD,EAAOF,EAAOE,UAChBA,GAAQH,GAAUI,IACtBA,GAAWA,GAAmB,MAARD,CAIxB,OADKC,KAASF,EAAMG,SAAWC,GACxB,UAIX,QAASC,GAAcC,GACrB,MAAO,UAASP,EAAQC,GACtB,GAAIO,GAAQ,UAaZ,OAZgB,KAAZD,EACFC,GAAS,YACU,KAAZD,EACPC,GAAS,YACU,KAAZD,EACPP,EAAOS,IAAI,MACQ,KAAZF,EACPP,EAAOS,IAAI,MACQ,KAAZF,IACPC,GAAS,UAEXP,EAAMG,SAAWC,EACVG,GAIX,QAASE,GAAUC,GACjB,MAAO,UAASX,EAAQC,GAEtB,IADA,GAAIN,GAAOgB,GACHA,EAAKX,EAAOY,SAAqC,MAA1BD,EAAGE,MAAMC,IACtCnB,GAAQK,EAAOE,MAIjB,OADAD,GAAMG,SAAWC,EACbU,EAAiBC,KAAKrB,GACjB,WACAD,EAASC,GACT,SACiB,KAAjBK,EAAOY,OACP,QAEA,UAIb,QAASP,GAAUL,EAAQC,GACzB,GAAIU,GAAKX,EAAOE,MAQhB,OAPU,KAANS,EACFV,EAAMG,SAAWN,EAAYa,GACtBM,EAAeD,KAAKL,GAC3BV,EAAMG,SAAWE,EAAcK,GACxBG,EAAaE,KAAKL,KACzBV,EAAMG,SAAWM,EAAUC,IAErBV,EAAMG,UAAYC,EAAaJ,EAAMG,SAASJ,EAAQC,GAAS,KApEzE,GAAIa,GAAe,8CACfG,EAAiB,uBACjBF,EAAmB,oBAqEvB,QACEG,WAAY,WACV,OACEd,SAAUC,IAIdc,MAAO,SAASnB,EAAQC,GACtB,MAAID,GAAOoB,WAAmB,KACvBnB,EAAMG,SAASJ,EAAQC,OAKpCT,EAAW6B,WAAW,cAAe","file":"../../../mode/solr/solr.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"solr\", function() {\n  \"use strict\";\n\n  var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\^\\\"\\\\]/;\n  var isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\n  var isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\n  function isNumber(word) {\n    return parseFloat(word, 10).toString() === word;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenOperator(operator) {\n    return function(stream, state) {\n      var style = \"operator\";\n      if (operator == \"+\")\n        style += \" positive\";\n      else if (operator == \"-\")\n        style += \" negative\";\n      else if (operator == \"|\")\n        stream.eat(/\\|/);\n      else if (operator == \"&\")\n        stream.eat(/\\&/);\n      else if (operator == \"^\")\n        style += \" boost\";\n\n      state.tokenize = tokenBase;\n      return style;\n    };\n  }\n\n  function tokenWord(ch) {\n    return function(stream, state) {\n      var word = ch;\n      while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n        word += stream.next();\n      }\n\n      state.tokenize = tokenBase;\n      if (isOperatorString.test(word))\n        return \"operator\";\n      else if (isNumber(word))\n        return \"number\";\n      else if (stream.peek() == \":\")\n        return \"field\";\n      else\n        return \"string\";\n    };\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"')\n      state.tokenize = tokenString(ch);\n    else if (isOperatorChar.test(ch))\n      state.tokenize = tokenOperator(ch);\n    else if (isStringChar.test(ch))\n      state.tokenize = tokenWord(ch);\n\n    return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-solr\", \"solr\");\n\n});\n"]}