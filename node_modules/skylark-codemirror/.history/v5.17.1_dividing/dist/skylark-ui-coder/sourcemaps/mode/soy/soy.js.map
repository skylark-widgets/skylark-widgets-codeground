{"version":3,"sources":["mode/soy/soy.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","indentingTags","defineMode","config","last","array","length","tokenUntil","stream","state","untilRegExp","oldString","string","match","exec","substr","pos","index","result","hideFirstChars","indent","localMode","token","localState","textMode","getMode","modes","html","name","multilineTagIndentFactor","multilineTagIndentPastTag","attributes","text","uri","css","js","statementIndent","indentUnit","startState","kind","kindTag","soyState","copyState","tag","concat","pop","skipToEnd","next","current","indexOf","push","this","sol","test","textAfter","top","Pass","innerMode","mode","electricInput","lineComment","blockCommentStart","blockCommentEnd","blockCommentContinue","fold","registerHelper","defineMIME"],"mappings":";;;;;;;CAGA,SAAUA,GACc,gBAAXC,UAAwC,gBAAVC,QACvCF,EAAIG,QAAQ,eAAgBA,QAAQ,2BACZ,kBAAVC,SAAwBA,OAAOC,IAC7CD,QAAQ,cAAe,0BAA2BJ,GAElDA,EAAIM,aACL,SAASA,GACV,YAEA,IAAIC,IAAiB,WAAY,UAAW,MAAO,cAAe,MAAO,KAAM,SAC1D,OAAQ,SAAU,OAAQ,UAAW,UAAW,UAAW,MAC3D,OAAQ,QAAS,cAAe,UAAW,MAEhED,GAAWE,WAAW,MAAO,SAASC,GAWpC,QAASC,GAAKC,GACZ,MAAOA,GAAMA,EAAMC,OAAS,GAG9B,QAASC,GAAWC,EAAQC,EAAOC,GACjC,GAAIC,GAAYH,EAAOI,OACnBC,EAAQH,EAAYI,KAAKH,EAAUI,OAAOP,EAAOQ,KACjDH,KAGFL,EAAOI,OAASD,EAAUI,OAAO,EAAGP,EAAOQ,IAAMH,EAAMI,OAEzD,IAAIC,GAASV,EAAOW,eAAeV,EAAMW,OAAQ,WAC/C,MAAOX,GAAMY,UAAUC,MAAMd,EAAQC,EAAMc,aAG7C,OADAf,GAAOI,OAASD,EACTO,EA1BT,GAAIM,GAAWxB,EAAWyB,QAAQtB,EAAQ,cACtCuB,GACFC,KAAM3B,EAAWyB,QAAQtB,GAASyB,KAAM,YAAaC,yBAA0B,EAAGC,2BAA2B,IAC7GC,WAAYP,EACZQ,KAAMR,EACNS,IAAKT,EACLU,IAAKlC,EAAWyB,QAAQtB,EAAQ,YAChCgC,GAAInC,EAAWyB,QAAQtB,GAASyB,KAAM,kBAAmBQ,gBAAiB,EAAIjC,EAAOkC,aAsBvF,QACEC,WAAY,WACV,OACEC,QACAC,WACAC,YACArB,OAAQ,EACRC,UAAWK,EAAMC,KACjBJ,WAAYvB,EAAWsC,WAAWZ,EAAMC,QAI5Ce,UAAW,SAASjC,GAClB,OACEkC,IAAKlC,EAAMkC,IACXJ,KAAM9B,EAAM8B,KAAKK,WACjBJ,QAAS/B,EAAM+B,QAAQI,WACvBH,SAAUhC,EAAMgC,SAASG,WACzBxB,OAAQX,EAAMW,OACdC,UAAWZ,EAAMY,UACjBE,WAAYvB,EAAW0C,UAAUjC,EAAMY,UAAWZ,EAAMc,cAI5DD,MAAO,SAASd,EAAQC,GACtB,GAAII,EAEJ,QAAQT,EAAKK,EAAMgC,WACjB,IAAK,UAMH,MALIjC,GAAOK,MAAM,YACfJ,EAAMgC,SAASI,MAEfrC,EAAOsC,YAEF,SAET,KAAK,WACH,MAAItC,GAAOK,MAAM,OACfJ,EAAMW,QAAU,EAAIjB,EAAOkC,WAC3B5B,EAAMgC,SAASI,MACR,eAETrC,EAAOuC,OACA,KAET,KAAK,MACH,GAAIvC,EAAOK,MAAM,SAIf,MAHiB,aAAbJ,EAAMkC,KAAmC,gBAAblC,EAAMkC,IAAuBlC,EAAMW,OAAS,EACvEX,EAAMW,SAA+B,MAApBZ,EAAOwC,WAAqB/C,EAAcgD,QAAQxC,EAAMkC,SAAa,EAAI,GAAKxC,EAAOkC,WAC3G5B,EAAMgC,SAASI,MACR,SACF,IAAIrC,EAAOK,MAAM,kBAAmB,CACzC,GAAwB,QAApBL,EAAOwC,YAAwBnC,EAAQL,EAAOK,MAAM,cAAc,IAAS,CAC7E,GAAI0B,GAAO1B,EAAM,EACjBJ,GAAM8B,KAAKW,KAAKX,GAChB9B,EAAM+B,QAAQU,KAAKzC,EAAMkC,KACzBlC,EAAMY,UAAYK,EAAMa,IAASb,EAAMC,KACvClB,EAAMc,WAAavB,EAAWsC,WAAW7B,EAAMY,WAEjD,MAAO,YACF,MAAIb,GAAOK,MAAM,OACtBJ,EAAMgC,SAASS,KAAK,UACb,WAET1C,EAAOuC,OACA,KAET,KAAK,UACH,MAAIvC,GAAOK,MAAM,sBACfJ,EAAMW,QAAUjB,EAAOkC,WACvB5B,EAAMgC,SAASI,MACRM,KAAK7B,MAAMd,EAAQC,IAErBF,EAAWC,EAAQC,EAAO,eAEnC,KAAK,SACH,GAAII,GAAQL,EAAOK,MAAM,mBAMzB,OALKA,GAEkB,KAAZA,EAAM,IACfJ,EAAMgC,SAASI,MAFfrC,EAAOsC,YAIF,SAGX,MAAItC,GAAOK,MAAM,UACfJ,EAAMgC,SAASS,KAAK,WACb,WACE1C,EAAOK,MAAML,EAAO4C,MAAQ,aAAe,cAC7C,UACE5C,EAAOK,MAAM,gBACtBJ,EAAMW,QAAU,EAAIjB,EAAOkC,WAC3B5B,EAAMgC,SAASS,KAAK,YACb,cACE1C,EAAOK,MAAM,gBACtBJ,EAAMW,QAAUjB,EAAOkC,WACvB5B,EAAMgC,SAASS,KAAK,WACb,YACErC,EAAQL,EAAOK,MAAM,yBACd,WAAZA,EAAM,KACRJ,EAAMW,SAAW,oCAAoCiC,KAAKxC,EAAM,KAAoB,UAAbJ,EAAMkC,IAAkB,EAAI,GAAKxC,EAAOkC,YACjH5B,EAAMkC,IAAM9B,EAAM,GACdJ,EAAMkC,KAAO,IAAMvC,EAAKK,EAAM+B,WAEhC/B,EAAM8B,KAAKM,MACXpC,EAAM+B,QAAQK,MACdpC,EAAMY,UAAYK,EAAMtB,EAAKK,EAAM8B,QAAUb,EAAMC,KACnDlB,EAAMc,WAAavB,EAAWsC,WAAW7B,EAAMY,YAEjDZ,EAAMgC,SAASS,KAAK,OACb,WAGF3C,EAAWC,EAAQC,EAAO,oBAGnCW,OAAQ,SAASX,EAAO6C,GACtB,GAAIlC,GAASX,EAAMW,OAAQmC,EAAMnD,EAAKK,EAAMgC,SAC5C,IAAW,WAAPc,EAAkB,MAAOvD,GAAWwD,IAExC,IAAW,WAAPD,EACE,gBAAgBF,KAAKC,KAAYlC,GAAUjB,EAAOkC,gBACjD,CACL,GAAI,mCAAmCgB,KAAKC,GAAY,MAAO,EAC3D,+CAA8CD,KAAKC,KAAYlC,GAAUjB,EAAOkC,YACnE,UAAb5B,EAAMkC,KAAmB,sBAAsBU,KAAKC,KAAYlC,GAAUjB,EAAOkC,YACjF,gBAAgBgB,KAAKC,KAAYlC,GAAUjB,EAAOkC,YAIxD,MAFIjB,IAAUX,EAAMY,UAAUD,SAC5BA,GAAUX,EAAMY,UAAUD,OAAOX,EAAMc,WAAY+B,IAC9ClC,GAGTqC,UAAW,SAAShD,GAClB,MAAIA,GAAMgC,SAASnC,QAAkC,WAAxBF,EAAKK,EAAMgC,UAA+B,MAC1DhC,MAAOA,EAAMc,WAAYmC,KAAMjD,EAAMY,YAGpDsC,cAAe,yGACfC,YAAa,KACbC,kBAAmB,KACnBC,gBAAiB,KACjBC,qBAAsB,MACtBC,KAAM,WAEP,aAEHhE,EAAWiE,eAAe,YAAa,MAAOhE,EAAc2C,QACvD,aAAc,YAAa,QAAS,QAAS,MAAO,cAEzD5C,EAAWkE,WAAW,aAAc","file":"../../../mode/soy/soy.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../Coder\"), require(\"../htmlmixed/htmlmixed\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../Coder\", \"../htmlmixed/htmlmixed\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var indentingTags = [\"template\", \"literal\", \"msg\", \"fallbackmsg\", \"let\", \"if\", \"elseif\",\n                       \"else\", \"switch\", \"case\", \"default\", \"foreach\", \"ifempty\", \"for\",\n                       \"call\", \"param\", \"deltemplate\", \"delcall\", \"log\"];\n\n  CodeMirror.defineMode(\"soy\", function(config) {\n    var textMode = CodeMirror.getMode(config, \"text/plain\");\n    var modes = {\n      html: CodeMirror.getMode(config, {name: \"text/html\", multilineTagIndentFactor: 2, multilineTagIndentPastTag: false}),\n      attributes: textMode,\n      text: textMode,\n      uri: textMode,\n      css: CodeMirror.getMode(config, \"text/css\"),\n      js: CodeMirror.getMode(config, {name: \"text/javascript\", statementIndent: 2 * config.indentUnit})\n    };\n\n    function last(array) {\n      return array[array.length - 1];\n    }\n\n    function tokenUntil(stream, state, untilRegExp) {\n      var oldString = stream.string;\n      var match = untilRegExp.exec(oldString.substr(stream.pos));\n      if (match) {\n        // We don't use backUp because it backs up just the position, not the state.\n        // This uses an undocumented API.\n        stream.string = oldString.substr(0, stream.pos + match.index);\n      }\n      var result = stream.hideFirstChars(state.indent, function() {\n        return state.localMode.token(stream, state.localState);\n      });\n      stream.string = oldString;\n      return result;\n    }\n\n    return {\n      startState: function() {\n        return {\n          kind: [],\n          kindTag: [],\n          soyState: [],\n          indent: 0,\n          localMode: modes.html,\n          localState: CodeMirror.startState(modes.html)\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          tag: state.tag, // Last seen Soy tag.\n          kind: state.kind.concat([]), // Values of kind=\"\" attributes.\n          kindTag: state.kindTag.concat([]), // Opened tags with kind=\"\" attributes.\n          soyState: state.soyState.concat([]),\n          indent: state.indent, // Indentation of the following line.\n          localMode: state.localMode,\n          localState: CodeMirror.copyState(state.localMode, state.localState)\n        };\n      },\n\n      token: function(stream, state) {\n        var match;\n\n        switch (last(state.soyState)) {\n          case \"comment\":\n            if (stream.match(/^.*?\\*\\//)) {\n              state.soyState.pop();\n            } else {\n              stream.skipToEnd();\n            }\n            return \"comment\";\n\n          case \"variable\":\n            if (stream.match(/^}/)) {\n              state.indent -= 2 * config.indentUnit;\n              state.soyState.pop();\n              return \"variable-2\";\n            }\n            stream.next();\n            return null;\n\n          case \"tag\":\n            if (stream.match(/^\\/?}/)) {\n              if (state.tag == \"/template\" || state.tag == \"/deltemplate\") state.indent = 0;\n              else state.indent -= (stream.current() == \"/}\" || indentingTags.indexOf(state.tag) == -1 ? 2 : 1) * config.indentUnit;\n              state.soyState.pop();\n              return \"keyword\";\n            } else if (stream.match(/^([\\w?]+)(?==)/)) {\n              if (stream.current() == \"kind\" && (match = stream.match(/^=\"([^\"]+)/, false))) {\n                var kind = match[1];\n                state.kind.push(kind);\n                state.kindTag.push(state.tag);\n                state.localMode = modes[kind] || modes.html;\n                state.localState = CodeMirror.startState(state.localMode);\n              }\n              return \"attribute\";\n            } else if (stream.match(/^\"/)) {\n              state.soyState.push(\"string\");\n              return \"string\";\n            }\n            stream.next();\n            return null;\n\n          case \"literal\":\n            if (stream.match(/^(?=\\{\\/literal})/)) {\n              state.indent -= config.indentUnit;\n              state.soyState.pop();\n              return this.token(stream, state);\n            }\n            return tokenUntil(stream, state, /\\{\\/literal}/);\n\n          case \"string\":\n            var match = stream.match(/^.*?(\"|\\\\[\\s\\S])/);\n            if (!match) {\n              stream.skipToEnd();\n            } else if (match[1] == \"\\\"\") {\n              state.soyState.pop();\n            }\n            return \"string\";\n        }\n\n        if (stream.match(/^\\/\\*/)) {\n          state.soyState.push(\"comment\");\n          return \"comment\";\n        } else if (stream.match(stream.sol() ? /^\\s*\\/\\/.*/ : /^\\s+\\/\\/.*/)) {\n          return \"comment\";\n        } else if (stream.match(/^\\{\\$[\\w?]*/)) {\n          state.indent += 2 * config.indentUnit;\n          state.soyState.push(\"variable\");\n          return \"variable-2\";\n        } else if (stream.match(/^\\{literal}/)) {\n          state.indent += config.indentUnit;\n          state.soyState.push(\"literal\");\n          return \"keyword\";\n        } else if (match = stream.match(/^\\{([\\/@\\\\]?[\\w?]*)/)) {\n          if (match[1] != \"/switch\")\n            state.indent += (/^(\\/|(else|elseif|case|default)$)/.test(match[1]) && state.tag != \"switch\" ? 1 : 2) * config.indentUnit;\n          state.tag = match[1];\n          if (state.tag == \"/\" + last(state.kindTag)) {\n            // We found the tag that opened the current kind=\"\".\n            state.kind.pop();\n            state.kindTag.pop();\n            state.localMode = modes[last(state.kind)] || modes.html;\n            state.localState = CodeMirror.startState(state.localMode);\n          }\n          state.soyState.push(\"tag\");\n          return \"keyword\";\n        }\n\n        return tokenUntil(stream, state, /\\{|\\s+\\/\\/|\\/\\*/);\n      },\n\n      indent: function(state, textAfter) {\n        var indent = state.indent, top = last(state.soyState);\n        if (top == \"comment\") return CodeMirror.Pass;\n\n        if (top == \"literal\") {\n          if (/^\\{\\/literal}/.test(textAfter)) indent -= config.indentUnit;\n        } else {\n          if (/^\\s*\\{\\/(template|deltemplate)\\b/.test(textAfter)) return 0;\n          if (/^\\{(\\/|(fallbackmsg|elseif|else|ifempty)\\b)/.test(textAfter)) indent -= config.indentUnit;\n          if (state.tag != \"switch\" && /^\\{(case|default)\\b/.test(textAfter)) indent -= config.indentUnit;\n          if (/^\\{\\/switch\\b/.test(textAfter)) indent -= config.indentUnit;\n        }\n        if (indent && state.localMode.indent)\n          indent += state.localMode.indent(state.localState, textAfter);\n        return indent;\n      },\n\n      innerMode: function(state) {\n        if (state.soyState.length && last(state.soyState) != \"literal\") return null;\n        else return {state: state.localState, mode: state.localMode};\n      },\n\n      electricInput: /^\\s*\\{(\\/|\\/template|\\/deltemplate|\\/switch|fallbackmsg|elseif|else|case|default|ifempty|\\/literal\\})$/,\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      fold: \"indent\"\n    };\n  }, \"htmlmixed\");\n\n  CodeMirror.registerHelper(\"hintWords\", \"soy\", indentingTags.concat(\n      [\"delpackage\", \"namespace\", \"alias\", \"print\", \"css\", \"debugger\"]));\n\n  CodeMirror.defineMIME(\"text/x-soy\", \"soy\");\n});\n"]}