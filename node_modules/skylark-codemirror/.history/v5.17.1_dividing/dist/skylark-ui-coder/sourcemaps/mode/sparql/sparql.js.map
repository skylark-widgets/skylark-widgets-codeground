{"version":3,"sources":["mode/sparql/sparql.js"],"names":["define","CodeMirror","defineMode","config","wordRegexp","words","RegExp","join","tokenBase","stream","state","ch","next","curPunc","match","tokenize","tokenLiteral","test","skipToEnd","operatorChars","eatWhile","eat","word","current","ops","keywords","quote","escaped","pushContext","type","col","context","prev","indent","popContext","indentUnit","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME"],"mappings":"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","file":"../../../mode/sparql/sparql.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sparql\", function(config) {\n  var indentUnit = config.indentUnit;\n  var curPunc;\n\n  function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  }\n  var ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\",\n                        \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\",\n                        \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\",\n                        \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\",\n                        \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\",\n                        \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\",\n                        \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\",\n                        \"isblank\", \"isliteral\", \"a\", \"bind\"]);\n  var keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\",\n                             \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\",\n                             \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\",\n                             \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\",\n                             \"true\", \"false\", \"with\",\n                             \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\"]);\n  var operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    curPunc = null;\n    if (ch == \"$\" || ch == \"?\") {\n      if(ch == \"?\" && stream.match(/\\s/, false)){\n        return \"operator\";\n      }\n      stream.match(/^[\\w\\d]*/);\n      return \"variable-2\";\n    }\n    else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n      stream.match(/^[^\\s\\u00a0>]*>?/);\n      return \"atom\";\n    }\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    }\n    else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n      curPunc = ch;\n      return \"bracket\";\n    }\n    else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (operatorChars.test(ch)) {\n      stream.eatWhile(operatorChars);\n      return \"operator\";\n    }\n    else if (ch == \":\") {\n      stream.eatWhile(/[\\w\\d\\._\\-]/);\n      return \"atom\";\n    }\n    else if (ch == \"@\") {\n      stream.eatWhile(/[a-z\\d\\-]/i);\n      return \"meta\";\n    }\n    else {\n      stream.eatWhile(/[_\\w\\d]/);\n      if (stream.eat(\":\")) {\n        stream.eatWhile(/[\\w\\d_\\-]/);\n        return \"atom\";\n      }\n      var word = stream.current();\n      if (ops.test(word))\n        return \"builtin\";\n      else if (keywords.test(word))\n        return \"keyword\";\n      else\n        return \"variable\";\n    }\n  }\n\n  function tokenLiteral(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n\n  function pushContext(state, type, col) {\n    state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n  }\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              context: null,\n              indent: 0,\n              col: 0};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null) state.context.align = false;\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n        state.context.align = true;\n      }\n\n      if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n      else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n      else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n      else if (/[\\]\\}\\)]/.test(curPunc)) {\n        while (state.context && state.context.type == \"pattern\") popContext(state);\n        if (state.context && curPunc == state.context.type) {\n          popContext(state);\n          if (curPunc == \"}\" && state.context && state.context.type == \"pattern\")\n            popContext(state);\n        }\n      }\n      else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n      else if (/atom|string|variable/.test(style) && state.context) {\n        if (/[\\}\\]]/.test(state.context.type))\n          pushContext(state, \"pattern\", stream.column());\n        else if (state.context.type == \"pattern\" && !state.context.align) {\n          state.context.align = true;\n          state.context.col = stream.column();\n        }\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      var context = state.context;\n      if (/[\\]\\}]/.test(firstChar))\n        while (context && context.type == \"pattern\") context = context.prev;\n\n      var closing = context && firstChar == context.type;\n      if (!context)\n        return 0;\n      else if (context.type == \"pattern\")\n        return context.col;\n      else if (context.align)\n        return context.col + (closing ? 0 : 1);\n      else\n        return context.indent + (closing ? 0 : indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/sparql-query\", \"sparql\");\n\n});\n"]}