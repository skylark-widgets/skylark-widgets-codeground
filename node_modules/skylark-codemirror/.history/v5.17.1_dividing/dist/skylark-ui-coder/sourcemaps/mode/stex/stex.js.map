{"version":3,"sources":["mode/stex/stex.js"],"names":["define","CodeMirror","defineMode","pushCommand","state","command","cmdState","push","peekCommand","length","popCommand","plug","pop","closeBracket","getMostPowerful","context","i","name","styleIdentifier","addPluginPattern","pluginName","cmdStyle","styles","this","bracketNo","style","argument","openBracket","setState","f","normal","source","match","cmdName","current","slice","plugins","beginParams","inMathMode","ch","next","skipToEnd","test","eatWhile","endModeSeq","eatSpace","lastPlug","peek","eat","startState","copyState","s","token","stream","blankLine","lineComment","defineMIME"],"mappings":"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","file":"../../../mode/stex/stex.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/*\n * Author: Constantin Jucovschi (c.jucovschi@jacobs-university.de)\n * Licence: MIT\n */\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"stex\", function() {\n    \"use strict\";\n\n    function pushCommand(state, command) {\n      state.cmdState.push(command);\n    }\n\n    function peekCommand(state) {\n      if (state.cmdState.length > 0) {\n        return state.cmdState[state.cmdState.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    function popCommand(state) {\n      var plug = state.cmdState.pop();\n      if (plug) {\n        plug.closeBracket();\n      }\n    }\n\n    // returns the non-default plugin closest to the end of the list\n    function getMostPowerful(state) {\n      var context = state.cmdState;\n      for (var i = context.length - 1; i >= 0; i--) {\n        var plug = context[i];\n        if (plug.name == \"DEFAULT\") {\n          continue;\n        }\n        return plug;\n      }\n      return { styleIdentifier: function() { return null; } };\n    }\n\n    function addPluginPattern(pluginName, cmdStyle, styles) {\n      return function () {\n        this.name = pluginName;\n        this.bracketNo = 0;\n        this.style = cmdStyle;\n        this.styles = styles;\n        this.argument = null;   // \\begin and \\end have arguments that follow. These are stored in the plugin\n\n        this.styleIdentifier = function() {\n          return this.styles[this.bracketNo - 1] || null;\n        };\n        this.openBracket = function() {\n          this.bracketNo++;\n          return \"bracket\";\n        };\n        this.closeBracket = function() {};\n      };\n    }\n\n    var plugins = {};\n\n    plugins[\"importmodule\"] = addPluginPattern(\"importmodule\", \"tag\", [\"string\", \"builtin\"]);\n    plugins[\"documentclass\"] = addPluginPattern(\"documentclass\", \"tag\", [\"\", \"atom\"]);\n    plugins[\"usepackage\"] = addPluginPattern(\"usepackage\", \"tag\", [\"atom\"]);\n    plugins[\"begin\"] = addPluginPattern(\"begin\", \"tag\", [\"atom\"]);\n    plugins[\"end\"] = addPluginPattern(\"end\", \"tag\", [\"atom\"]);\n\n    plugins[\"DEFAULT\"] = function () {\n      this.name = \"DEFAULT\";\n      this.style = \"tag\";\n\n      this.styleIdentifier = this.openBracket = this.closeBracket = function() {};\n    };\n\n    function setState(state, f) {\n      state.f = f;\n    }\n\n    // called when in a normal (no environment) context\n    function normal(source, state) {\n      var plug;\n      // Do we look like '\\command' ?  If so, attempt to apply the plugin 'command'\n      if (source.match(/^\\\\[a-zA-Z@]+/)) {\n        var cmdName = source.current().slice(1);\n        plug = plugins[cmdName] || plugins[\"DEFAULT\"];\n        plug = new plug();\n        pushCommand(state, plug);\n        setState(state, beginParams);\n        return plug.style;\n      }\n\n      // escape characters\n      if (source.match(/^\\\\[$&%#{}_]/)) {\n        return \"tag\";\n      }\n\n      // white space control characters\n      if (source.match(/^\\\\[,;!\\/\\\\]/)) {\n        return \"tag\";\n      }\n\n      // find if we're starting various math modes\n      if (source.match(\"\\\\[\")) {\n        setState(state, function(source, state){ return inMathMode(source, state, \"\\\\]\"); });\n        return \"keyword\";\n      }\n      if (source.match(\"$$\")) {\n        setState(state, function(source, state){ return inMathMode(source, state, \"$$\"); });\n        return \"keyword\";\n      }\n      if (source.match(\"$\")) {\n        setState(state, function(source, state){ return inMathMode(source, state, \"$\"); });\n        return \"keyword\";\n      }\n\n      var ch = source.next();\n      if (ch == \"%\") {\n        source.skipToEnd();\n        return \"comment\";\n      } else if (ch == '}' || ch == ']') {\n        plug = peekCommand(state);\n        if (plug) {\n          plug.closeBracket(ch);\n          setState(state, beginParams);\n        } else {\n          return \"error\";\n        }\n        return \"bracket\";\n      } else if (ch == '{' || ch == '[') {\n        plug = plugins[\"DEFAULT\"];\n        plug = new plug();\n        pushCommand(state, plug);\n        return \"bracket\";\n      } else if (/\\d/.test(ch)) {\n        source.eatWhile(/[\\w.%]/);\n        return \"atom\";\n      } else {\n        source.eatWhile(/[\\w\\-_]/);\n        plug = getMostPowerful(state);\n        if (plug.name == 'begin') {\n          plug.argument = source.current();\n        }\n        return plug.styleIdentifier();\n      }\n    }\n\n    function inMathMode(source, state, endModeSeq) {\n      if (source.eatSpace()) {\n        return null;\n      }\n      if (source.match(endModeSeq)) {\n        setState(state, normal);\n        return \"keyword\";\n      }\n      if (source.match(/^\\\\[a-zA-Z@]+/)) {\n        return \"tag\";\n      }\n      if (source.match(/^[a-zA-Z]+/)) {\n        return \"variable-2\";\n      }\n      // escape characters\n      if (source.match(/^\\\\[$&%#{}_]/)) {\n        return \"tag\";\n      }\n      // white space control characters\n      if (source.match(/^\\\\[,;!\\/]/)) {\n        return \"tag\";\n      }\n      // special math-mode characters\n      if (source.match(/^[\\^_&]/)) {\n        return \"tag\";\n      }\n      // non-special characters\n      if (source.match(/^[+\\-<>|=,\\/@!*:;'\"`~#?]/)) {\n        return null;\n      }\n      if (source.match(/^(\\d+\\.\\d*|\\d*\\.\\d+|\\d+)/)) {\n        return \"number\";\n      }\n      var ch = source.next();\n      if (ch == \"{\" || ch == \"}\" || ch == \"[\" || ch == \"]\" || ch == \"(\" || ch == \")\") {\n        return \"bracket\";\n      }\n\n      if (ch == \"%\") {\n        source.skipToEnd();\n        return \"comment\";\n      }\n      return \"error\";\n    }\n\n    function beginParams(source, state) {\n      var ch = source.peek(), lastPlug;\n      if (ch == '{' || ch == '[') {\n        lastPlug = peekCommand(state);\n        lastPlug.openBracket(ch);\n        source.eat(ch);\n        setState(state, normal);\n        return \"bracket\";\n      }\n      if (/[ \\t\\r]/.test(ch)) {\n        source.eat(ch);\n        return null;\n      }\n      setState(state, normal);\n      popCommand(state);\n\n      return normal(source, state);\n    }\n\n    return {\n      startState: function() {\n        return {\n          cmdState: [],\n          f: normal\n        };\n      },\n      copyState: function(s) {\n        return {\n          cmdState: s.cmdState.slice(),\n          f: s.f\n        };\n      },\n      token: function(stream, state) {\n        return state.f(stream, state);\n      },\n      blankLine: function(state) {\n        state.f = normal;\n        state.cmdState.length = 0;\n      },\n      lineComment: \"%\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-stex\", \"stex\");\n  CodeMirror.defineMIME(\"text/x-latex\", \"stex\");\n\n});\n"]}