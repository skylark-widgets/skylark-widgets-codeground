{"version":3,"sources":["mode/tiddlywiki/tiddlywiki.js"],"names":["define","CodeMirror","defineMode","chain","stream","state","f","tokenize","tokenBase","sol","ch","peek","block","test","match","reCodeBlockStart","twTokenCode","reBlockQuote","reWikiCommentStart","reWikiCommentStop","reJsCodeStart","reJsCodeStop","reXmlCodeStart","reXmlCodeStop","reHR","next","skipToEnd","eatWhile","isSpaceName","eat","twTokenComment","twTokenEm","twTokenUnderline","twTokenStrike","twTokenStrong","twTokenMacro","textwords","propertyIsEnumerable","current","maybeEnd","sb","reUntilCodeStop","reCodeBlockStop","keywords","allTags","closeAll","list","newJournal","newTiddler","permaview","saveChanges","search","slider","tabs","tag","tagging","tags","tiddler","timeline","today","version","option","with","filter","startState","token","eatSpace","style","defineMIME"],"mappings":"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","file":"../../../mode/tiddlywiki/tiddlywiki.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/***\n    |''Name''|tiddlywiki.js|\n    |''Description''|Enables TiddlyWikiy syntax highlighting using CodeMirror|\n    |''Author''|PMario|\n    |''Version''|0.1.7|\n    |''Status''|''stable''|\n    |''Source''|[[GitHub|https://github.com/pmario/CodeMirror2/blob/tw-syntax/mode/tiddlywiki]]|\n    |''Documentation''|http://codemirror.tiddlyspace.com/|\n    |''License''|[[MIT License|http://www.opensource.org/licenses/mit-license.php]]|\n    |''CoreVersion''|2.5.0|\n    |''Requires''|codemirror.js|\n    |''Keywords''|syntax highlighting color code mirror codemirror|\n    ! Info\n    CoreVersion parameter is needed for TiddlyWiki only!\n***/\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"tiddlywiki\", function () {\n  // Tokenizer\n  var textwords = {};\n\n  var keywords = {\n    \"allTags\": true, \"closeAll\": true, \"list\": true,\n    \"newJournal\": true, \"newTiddler\": true,\n    \"permaview\": true, \"saveChanges\": true,\n    \"search\": true, \"slider\": true, \"tabs\": true,\n    \"tag\": true, \"tagging\": true, \"tags\": true,\n    \"tiddler\": true, \"timeline\": true,\n    \"today\": true, \"version\": true, \"option\": true,\n    \"with\": true, \"filter\": true\n  };\n\n  var isSpaceName = /[\\w_\\-]/i,\n      reHR = /^\\-\\-\\-\\-+$/,                                 // <hr>\n      reWikiCommentStart = /^\\/\\*\\*\\*$/,            // /***\n      reWikiCommentStop = /^\\*\\*\\*\\/$/,             // ***/\n      reBlockQuote = /^<<<$/,\n\n      reJsCodeStart = /^\\/\\/\\{\\{\\{$/,                       // //{{{ js block start\n      reJsCodeStop = /^\\/\\/\\}\\}\\}$/,                        // //}}} js stop\n      reXmlCodeStart = /^<!--\\{\\{\\{-->$/,           // xml block start\n      reXmlCodeStop = /^<!--\\}\\}\\}-->$/,            // xml stop\n\n      reCodeBlockStart = /^\\{\\{\\{$/,                        // {{{ TW text div block start\n      reCodeBlockStop = /^\\}\\}\\}$/,                 // }}} TW text stop\n\n      reUntilCodeStop = /.*?\\}\\}\\}/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenBase(stream, state) {\n    var sol = stream.sol(), ch = stream.peek();\n\n    state.block = false;        // indicates the start of a code block.\n\n    // check start of  blocks\n    if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\n      if (stream.match(reCodeBlockStart)) {\n        state.block = true;\n        return chain(stream, state, twTokenCode);\n      }\n      if (stream.match(reBlockQuote))\n        return 'quote';\n      if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop))\n        return 'comment';\n      if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop))\n        return 'comment';\n      if (stream.match(reHR))\n        return 'hr';\n    }\n\n    stream.next();\n    if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\n      if (ch == \"!\") { // tw header\n        stream.skipToEnd();\n        return \"header\";\n      }\n      if (ch == \"*\") { // tw list\n        stream.eatWhile('*');\n        return \"comment\";\n      }\n      if (ch == \"#\") { // tw numbered list\n        stream.eatWhile('#');\n        return \"comment\";\n      }\n      if (ch == \";\") { // definition list, term\n        stream.eatWhile(';');\n        return \"comment\";\n      }\n      if (ch == \":\") { // definition list, description\n        stream.eatWhile(':');\n        return \"comment\";\n      }\n      if (ch == \">\") { // single line quote\n        stream.eatWhile(\">\");\n        return \"quote\";\n      }\n      if (ch == '|')\n        return 'header';\n    }\n\n    if (ch == '{' && stream.match(/\\{\\{/))\n      return chain(stream, state, twTokenCode);\n\n    // rudimentary html:// file:// link matching. TW knows much more ...\n    if (/[hf]/i.test(ch) &&\n        /[ti]/i.test(stream.peek()) &&\n        stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i))\n      return \"link\";\n\n    // just a little string indicator, don't want to have the whole string covered\n    if (ch == '\"')\n      return 'string';\n\n    if (ch == '~')    // _no_ CamelCase indicator should be bold\n      return 'brace';\n\n    if (/[\\[\\]]/.test(ch) && stream.match(ch)) // check for [[..]]\n      return 'brace';\n\n    if (ch == \"@\") {    // check for space link. TODO fix @@...@@ highlighting\n      stream.eatWhile(isSpaceName);\n      return \"link\";\n    }\n\n    if (/\\d/.test(ch)) {        // numbers\n      stream.eatWhile(/\\d/);\n      return \"number\";\n    }\n\n    if (ch == \"/\") { // tw invisible comment\n      if (stream.eat(\"%\")) {\n        return chain(stream, state, twTokenComment);\n      } else if (stream.eat(\"/\")) { //\n        return chain(stream, state, twTokenEm);\n      }\n    }\n\n    if (ch == \"_\" && stream.eat(\"_\")) // tw underline\n        return chain(stream, state, twTokenUnderline);\n\n    // strikethrough and mdash handling\n    if (ch == \"-\" && stream.eat(\"-\")) {\n      // if strikethrough looks ugly, change CSS.\n      if (stream.peek() != ' ')\n        return chain(stream, state, twTokenStrike);\n      // mdash\n      if (stream.peek() == ' ')\n        return 'brace';\n    }\n\n    if (ch == \"'\" && stream.eat(\"'\")) // tw bold\n      return chain(stream, state, twTokenStrong);\n\n    if (ch == \"<\" && stream.eat(\"<\")) // tw macro\n      return chain(stream, state, twTokenMacro);\n\n    // core macro handling\n    stream.eatWhile(/[\\w\\$_]/);\n    return textwords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null\n  }\n\n  // tw invisible comment\n  function twTokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"%\");\n    }\n    return \"comment\";\n  }\n\n  // tw strong / bold\n  function twTokenStrong(stream, state) {\n    var maybeEnd = false,\n    ch;\n    while (ch = stream.next()) {\n      if (ch == \"'\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"'\");\n    }\n    return \"strong\";\n  }\n\n  // tw code\n  function twTokenCode(stream, state) {\n    var sb = state.block;\n\n    if (sb && stream.current()) {\n      return \"comment\";\n    }\n\n    if (!sb && stream.match(reUntilCodeStop)) {\n      state.tokenize = tokenBase;\n      return \"comment\";\n    }\n\n    if (sb && stream.sol() && stream.match(reCodeBlockStop)) {\n      state.tokenize = tokenBase;\n      return \"comment\";\n    }\n\n    stream.next();\n    return \"comment\";\n  }\n\n  // tw em / italic\n  function twTokenEm(stream, state) {\n    var maybeEnd = false,\n    ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"/\");\n    }\n    return \"em\";\n  }\n\n  // tw underlined text\n  function twTokenUnderline(stream, state) {\n    var maybeEnd = false,\n    ch;\n    while (ch = stream.next()) {\n      if (ch == \"_\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"_\");\n    }\n    return \"underlined\";\n  }\n\n  // tw strike through text looks ugly\n  // change CSS if needed\n  function twTokenStrike(stream, state) {\n    var maybeEnd = false, ch;\n\n    while (ch = stream.next()) {\n      if (ch == \"-\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"-\");\n    }\n    return \"strikethrough\";\n  }\n\n  // macro\n  function twTokenMacro(stream, state) {\n    if (stream.current() == '<<') {\n      return 'macro';\n    }\n\n    var ch = stream.next();\n    if (!ch) {\n      state.tokenize = tokenBase;\n      return null;\n    }\n    if (ch == \">\") {\n      if (stream.peek() == '>') {\n        stream.next();\n        state.tokenize = tokenBase;\n        return \"macro\";\n      }\n    }\n\n    stream.eatWhile(/[\\w\\$_]/);\n    return keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null\n  }\n\n  // Interface\n  return {\n    startState: function () {\n      return {tokenize: tokenBase};\n    },\n\n    token: function (stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-tiddlywiki\", \"tiddlywiki\");\n});\n"]}