{"version":3,"sources":["mode/tiki/tiki.js"],"names":["define","CodeMirror","defineMode","config","inBlock","style","terminator","returnTokenizer","stream","state","eol","match","tokenize","inText","next","inLine","chain","parser","sol","ch","eat","eatSpace","eatWhile","inPlugin","peek","type","test","inAttributeNoQuote","inAttribute","quote","pass","i","arguments","length","curState","cc","push","cont","apply","pushContext","pluginName","startOfLine","noIndent","context","prev","indent","indented","popContext","element","attributes","endplugin","err","setStyle","endcloseplugin","name","attvalue","attvaluemaybe","indentUnit","startState","token","indentation","comb","pop","textAfter","electricChars","defineMIME"],"mappings":"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","file":"../../../mode/tiki/tiki.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('tiki', function(config) {\n  function inBlock(style, terminator, returnTokenizer) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.match(terminator)) {\n          state.tokenize = inText;\n          break;\n        }\n        stream.next();\n      }\n\n      if (returnTokenizer) state.tokenize = returnTokenizer;\n\n      return style;\n    };\n  }\n\n  function inLine(style) {\n    return function(stream, state) {\n      while(!stream.eol()) {\n        stream.next();\n      }\n      state.tokenize = inText;\n      return style;\n    };\n  }\n\n  function inText(stream, state) {\n    function chain(parser) {\n      state.tokenize = parser;\n      return parser(stream, state);\n    }\n\n    var sol = stream.sol();\n    var ch = stream.next();\n\n    //non start of line\n    switch (ch) { //switch is generally much faster than if, so it is used here\n    case \"{\": //plugin\n      stream.eat(\"/\");\n      stream.eatSpace();\n      stream.eatWhile(/[^\\s\\u00a0=\\\"\\'\\/?(}]/);\n      state.tokenize = inPlugin;\n      return \"tag\";\n    case \"_\": //bold\n      if (stream.eat(\"_\"))\n        return chain(inBlock(\"strong\", \"__\", inText));\n      break;\n    case \"'\": //italics\n      if (stream.eat(\"'\"))\n        return chain(inBlock(\"em\", \"''\", inText));\n      break;\n    case \"(\":// Wiki Link\n      if (stream.eat(\"(\"))\n        return chain(inBlock(\"variable-2\", \"))\", inText));\n      break;\n    case \"[\":// Weblink\n      return chain(inBlock(\"variable-3\", \"]\", inText));\n      break;\n    case \"|\": //table\n      if (stream.eat(\"|\"))\n        return chain(inBlock(\"comment\", \"||\"));\n      break;\n    case \"-\":\n      if (stream.eat(\"=\")) {//titleBar\n        return chain(inBlock(\"header string\", \"=-\", inText));\n      } else if (stream.eat(\"-\")) {//deleted\n        return chain(inBlock(\"error tw-deleted\", \"--\", inText));\n      }\n      break;\n    case \"=\": //underline\n      if (stream.match(\"==\"))\n        return chain(inBlock(\"tw-underline\", \"===\", inText));\n      break;\n    case \":\":\n      if (stream.eat(\":\"))\n        return chain(inBlock(\"comment\", \"::\"));\n      break;\n    case \"^\": //box\n      return chain(inBlock(\"tw-box\", \"^\"));\n      break;\n    case \"~\": //np\n      if (stream.match(\"np~\"))\n        return chain(inBlock(\"meta\", \"~/np~\"));\n      break;\n    }\n\n    //start of line types\n    if (sol) {\n      switch (ch) {\n      case \"!\": //header at start of line\n        if (stream.match('!!!!!')) {\n          return chain(inLine(\"header string\"));\n        } else if (stream.match('!!!!')) {\n          return chain(inLine(\"header string\"));\n        } else if (stream.match('!!!')) {\n          return chain(inLine(\"header string\"));\n        } else if (stream.match('!!')) {\n          return chain(inLine(\"header string\"));\n        } else {\n          return chain(inLine(\"header string\"));\n        }\n        break;\n      case \"*\": //unordered list line item, or <li /> at start of line\n      case \"#\": //ordered list line item, or <li /> at start of line\n      case \"+\": //ordered list line item, or <li /> at start of line\n        return chain(inLine(\"tw-listitem bracket\"));\n        break;\n      }\n    }\n\n    //stream.eatWhile(/[&{]/); was eating up plugins, turned off to act less like html and more like tiki\n    return null;\n  }\n\n  var indentUnit = config.indentUnit;\n\n  // Return variables for tokenizers\n  var pluginName, type;\n  function inPlugin(stream, state) {\n    var ch = stream.next();\n    var peek = stream.peek();\n\n    if (ch == \"}\") {\n      state.tokenize = inText;\n      //type = ch == \")\" ? \"endPlugin\" : \"selfclosePlugin\"; inPlugin\n      return \"tag\";\n    } else if (ch == \"(\" || ch == \")\") {\n      return \"bracket\";\n    } else if (ch == \"=\") {\n      type = \"equals\";\n\n      if (peek == \">\") {\n        ch = stream.next();\n        peek = stream.peek();\n      }\n\n      //here we detect values directly after equal character with no quotes\n      if (!/[\\'\\\"]/.test(peek)) {\n        state.tokenize = inAttributeNoQuote();\n      }\n      //end detect values\n\n      return \"operator\";\n    } else if (/[\\'\\\"]/.test(ch)) {\n      state.tokenize = inAttribute(ch);\n      return state.tokenize(stream, state);\n    } else {\n      stream.eatWhile(/[^\\s\\u00a0=\\\"\\'\\/?]/);\n      return \"keyword\";\n    }\n  }\n\n  function inAttribute(quote) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.next() == quote) {\n          state.tokenize = inPlugin;\n          break;\n        }\n      }\n      return \"string\";\n    };\n  }\n\n  function inAttributeNoQuote() {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        var ch = stream.next();\n        var peek = stream.peek();\n        if (ch == \" \" || ch == \",\" || /[ )}]/.test(peek)) {\n      state.tokenize = inPlugin;\n      break;\n    }\n  }\n  return \"string\";\n};\n                     }\n\nvar curState, setStyle;\nfunction pass() {\n  for (var i = arguments.length - 1; i >= 0; i--) curState.cc.push(arguments[i]);\n}\n\nfunction cont() {\n  pass.apply(null, arguments);\n  return true;\n}\n\nfunction pushContext(pluginName, startOfLine) {\n  var noIndent = curState.context && curState.context.noIndent;\n  curState.context = {\n    prev: curState.context,\n    pluginName: pluginName,\n    indent: curState.indented,\n    startOfLine: startOfLine,\n    noIndent: noIndent\n  };\n}\n\nfunction popContext() {\n  if (curState.context) curState.context = curState.context.prev;\n}\n\nfunction element(type) {\n  if (type == \"openPlugin\") {curState.pluginName = pluginName; return cont(attributes, endplugin(curState.startOfLine));}\n  else if (type == \"closePlugin\") {\n    var err = false;\n    if (curState.context) {\n      err = curState.context.pluginName != pluginName;\n      popContext();\n    } else {\n      err = true;\n    }\n    if (err) setStyle = \"error\";\n    return cont(endcloseplugin(err));\n  }\n  else if (type == \"string\") {\n    if (!curState.context || curState.context.name != \"!cdata\") pushContext(\"!cdata\");\n    if (curState.tokenize == inText) popContext();\n    return cont();\n  }\n  else return cont();\n}\n\nfunction endplugin(startOfLine) {\n  return function(type) {\n    if (\n      type == \"selfclosePlugin\" ||\n        type == \"endPlugin\"\n    )\n      return cont();\n    if (type == \"endPlugin\") {pushContext(curState.pluginName, startOfLine); return cont();}\n    return cont();\n  };\n}\n\nfunction endcloseplugin(err) {\n  return function(type) {\n    if (err) setStyle = \"error\";\n    if (type == \"endPlugin\") return cont();\n    return pass();\n  };\n}\n\nfunction attributes(type) {\n  if (type == \"keyword\") {setStyle = \"attribute\"; return cont(attributes);}\n  if (type == \"equals\") return cont(attvalue, attributes);\n  return pass();\n}\nfunction attvalue(type) {\n  if (type == \"keyword\") {setStyle = \"string\"; return cont();}\n  if (type == \"string\") return cont(attvaluemaybe);\n  return pass();\n}\nfunction attvaluemaybe(type) {\n  if (type == \"string\") return cont(attvaluemaybe);\n  else return pass();\n}\nreturn {\n  startState: function() {\n    return {tokenize: inText, cc: [], indented: 0, startOfLine: true, pluginName: null, context: null};\n  },\n  token: function(stream, state) {\n    if (stream.sol()) {\n      state.startOfLine = true;\n      state.indented = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n\n    setStyle = type = pluginName = null;\n    var style = state.tokenize(stream, state);\n    if ((style || type) && style != \"comment\") {\n      curState = state;\n      while (true) {\n        var comb = state.cc.pop() || element;\n        if (comb(type || style)) break;\n      }\n    }\n    state.startOfLine = false;\n    return setStyle || style;\n  },\n  indent: function(state, textAfter) {\n    var context = state.context;\n    if (context && context.noIndent) return 0;\n    if (context && /^{\\//.test(textAfter))\n        context = context.prev;\n        while (context && !context.startOfLine)\n          context = context.prev;\n        if (context) return context.indent + indentUnit;\n        else return 0;\n       },\n    electricChars: \"/\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/tiki\", \"tiki\");\n\n});\n"]}