{"version":3,"sources":["mode/tornado/tornado.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","tokenBase","stream","state","eatWhile","ch","next","eat","tokenize","inTag","close","match","keywords","RegExp","join","startState","token","config","htmlBase","getMode","tornadoInner","overlayMode","defineMIME"],"mappings":";;;;;;;CAGA,SAAUA,GACc,gBAAXC,UAAwC,gBAAVC,QACvCF,EAAIG,QAAQ,eAAgBA,QAAQ,0BAChCA,QAAQ,6BACY,kBAAVC,SAAwBA,OAAOC,IAC7CD,QAAQ,cAAe,yBACf,4BAA6BJ,GAErCA,EAAIM,aACL,SAASA,GACV,YAEAA,GAAWC,WAAW,gBAAiB,WASrC,QAASC,GAAWC,EAAQC,GAC1BD,EAAOE,SAAS,QAChB,IAAIC,GAAKH,EAAOI,MAChB,IAAU,KAAND,IACEA,EAAKH,EAAOK,IAAI,WAElB,MADAJ,GAAMK,SAAWC,EAAMJ,GAChB,MAIb,QAASI,GAAOC,GAId,MAHa,KAATA,IACFA,EAAQ,KAEH,SAAUR,EAAQC,GACvB,GAAIE,GAAKH,EAAOI,MAChB,OAAKD,IAAMK,GAAUR,EAAOK,IAAI,MAC9BJ,EAAMK,SAAWP,EACV,OAELC,EAAOS,MAAMC,GACR,UAEO,KAATF,EAAe,UAAY,UA/BtC,GAAIE,IAAY,MAAM,KAAK,SAAS,aAAa,QAAQ,QAAQ,QAAQ,UAAU,UACnE,WAAW,WAAW,MAAM,MAAM,OAAO,OAAO,MAAM,SAAS,SAC/D,OAAO,UAAU,QAAQ,UAAU,MAAM,OAAO,SAAS,KAAK,SAAS,KACvE,UAAU,KAAK,cAAc,SAAS,SAAS,UAAU,OAAO,SAChE,OAAO,MAAM,KAAK,OAAO,QAAQ,MAAM,QAAQ,MAAM,SAAS,OAAO,MACrE,UAAU,QAAQ,OAAO,MAAM,aAAa,QAAQ,OAAO,UAAU,eAAe,QA6BpG,OA5BAA,GAAW,GAAIC,QAAO,MAAQD,EAASE,KAAK,OAAS,UA6BnDC,WAAY,WACV,OAAQP,SAAUP,IAEpBe,MAAO,SAAUd,EAAQC,GACvB,MAAOA,GAAMK,SAASN,EAAQC,OAKpCJ,EAAWC,WAAW,UAAW,SAASiB,GACxC,GAAIC,GAAWnB,EAAWoB,QAAQF,EAAQ,aACtCG,EAAerB,EAAWoB,QAAQF,EAAQ,gBAC9C,OAAOlB,GAAWsB,YAAYH,EAAUE,KAG1CrB,EAAWuB,WAAW,iBAAkB","file":"../../../mode/tornado/tornado.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../Coder\"), require(\"../htmlmixed/htmlmixed\"),\n        require(\"../../addon/mode/overlay\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../Coder\", \"../htmlmixed/htmlmixed\",\n            \"../../addon/mode/overlay\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tornado:inner\", function() {\n    var keywords = [\"and\",\"as\",\"assert\",\"autoescape\",\"block\",\"break\",\"class\",\"comment\",\"context\",\n                    \"continue\",\"datetime\",\"def\",\"del\",\"elif\",\"else\",\"end\",\"escape\",\"except\",\n                    \"exec\",\"extends\",\"false\",\"finally\",\"for\",\"from\",\"global\",\"if\",\"import\",\"in\",\n                    \"include\",\"is\",\"json_encode\",\"lambda\",\"length\",\"linkify\",\"load\",\"module\",\n                    \"none\",\"not\",\"or\",\"pass\",\"print\",\"put\",\"raise\",\"raw\",\"return\",\"self\",\"set\",\n                    \"squeeze\",\"super\",\"true\",\"try\",\"url_escape\",\"while\",\"with\",\"without\",\"xhtml_escape\",\"yield\"];\n    keywords = new RegExp(\"^((\" + keywords.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      stream.eatWhile(/[^\\{]/);\n      var ch = stream.next();\n      if (ch == \"{\") {\n        if (ch = stream.eat(/\\{|%|#/)) {\n          state.tokenize = inTag(ch);\n          return \"tag\";\n        }\n      }\n    }\n    function inTag (close) {\n      if (close == \"{\") {\n        close = \"}\";\n      }\n      return function (stream, state) {\n        var ch = stream.next();\n        if ((ch == close) && stream.eat(\"}\")) {\n          state.tokenize = tokenBase;\n          return \"tag\";\n        }\n        if (stream.match(keywords)) {\n          return \"keyword\";\n        }\n        return close == \"#\" ? \"comment\" : \"string\";\n      };\n    }\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"tornado\", function(config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var tornadoInner = CodeMirror.getMode(config, \"tornado:inner\");\n    return CodeMirror.overlayMode(htmlBase, tornadoInner);\n  });\n\n  CodeMirror.defineMIME(\"text/x-tornado\", \"tornado\");\n});\n"]}