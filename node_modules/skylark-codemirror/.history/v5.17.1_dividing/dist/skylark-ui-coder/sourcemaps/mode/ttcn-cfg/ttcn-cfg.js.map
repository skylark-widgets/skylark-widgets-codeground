{"version":3,"sources":["mode/ttcn-cfg/ttcn-cfg.js"],"names":["define","CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","tokenBase","stream","state","ch","next","tokenize","tokenString","test","curPunc","skipToEnd","eatWhile","isOperatorChar","cur","current","keywords","propertyIsEnumerable","fileNCtrlMaskOptions","externalCommands","quote","escaped","end","afterNext","peek","toLowerCase","multiLineStrings","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","indentUnit","indentStatements","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","lineComment","fold","defineMIME","name"],"mappings":"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","file":"../../../mode/ttcn-cfg/ttcn-cfg.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn-cfg\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions || {},\n        externalCommands = parserConfig.externalCommands || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[:=]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"#\"){\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      if (ch == \"[\"){\n        stream.eatWhile(/[\\w_\\]]/);\n        return \"number sectionTitle\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (fileNCtrlMaskOptions.propertyIsEnumerable(cur))\n        return \"negative fileNCtrlMaskOptions\";\n      if (externalCommands.propertyIsEnumerable(cur)) return \"negative externalCommands\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterNext = stream.peek();\n            //look if the character if the quote is like the B in '10100010'B\n            if (afterNext){\n              afterNext = afterNext.toLowerCase();\n              if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n            && curPunc != ';') || (ctx.type == \"statement\"\n            && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n      },\n\n      electricChars: \"{}\",\n      lineComment: \"#\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i)\n      obj[words[i]] = true;\n    return obj;\n  }\n\n  CodeMirror.defineMIME(\"text/x-ttcn-cfg\", {\n    name: \"ttcn-cfg\",\n    keywords: words(\"Yes No LogFile FileMask ConsoleMask AppendFile\" +\n    \" TimeStampFormat LogEventTypes SourceInfoFormat\" +\n    \" LogEntityName LogSourceInfo DiskFullAction\" +\n    \" LogFileNumber LogFileSize MatchingHints Detailed\" +\n    \" Compact SubCategories Stack Single None Seconds\" +\n    \" DateTime Time Stop Error Retry Delete TCPPort KillTimer\" +\n    \" NumHCs UnixSocketsEnabled LocalAddress\"),\n    fileNCtrlMaskOptions: words(\"TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING\" +\n    \" TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP\" +\n    \" TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION\" +\n    \" TTCN_USER TTCN_FUNCTION TTCN_STATISTICS\" +\n    \" TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG\" +\n    \" EXECUTOR ERROR WARNING PORTEVENT TIMEROP\" +\n    \" VERDICTOP DEFAULTOP TESTCASE ACTION USER\" +\n    \" FUNCTION STATISTICS PARALLEL MATCHING DEBUG\" +\n    \" LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED\" +\n    \" DEBUG_ENCDEC DEBUG_TESTPORT\" +\n    \" DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE\" +\n    \" DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT\" +\n    \" DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED\" +\n    \" EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA\" +\n    \" EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS\" +\n    \" EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED\" +\n    \" FUNCTION_RND FUNCTION_UNQUALIFIED\" +\n    \" MATCHING_DONE MATCHING_MCSUCCESS\" +\n    \" MATCHING_MCUNSUCC MATCHING_MMSUCCESS\" +\n    \" MATCHING_MMUNSUCC MATCHING_PCSUCCESS\" +\n    \" MATCHING_PCUNSUCC MATCHING_PMSUCCESS\" +\n    \" MATCHING_PMUNSUCC MATCHING_PROBLEM\" +\n    \" MATCHING_TIMEOUT MATCHING_UNQUALIFIED\" +\n    \" PARALLEL_PORTCONN PARALLEL_PORTMAP\" +\n    \" PARALLEL_PTC PARALLEL_UNQUALIFIED\" +\n    \" PORTEVENT_DUALRECV PORTEVENT_DUALSEND\" +\n    \" PORTEVENT_MCRECV PORTEVENT_MCSEND\" +\n    \" PORTEVENT_MMRECV PORTEVENT_MMSEND\" +\n    \" PORTEVENT_MQUEUE PORTEVENT_PCIN\" +\n    \" PORTEVENT_PCOUT PORTEVENT_PMIN\" +\n    \" PORTEVENT_PMOUT PORTEVENT_PQUEUE\" +\n    \" PORTEVENT_STATE PORTEVENT_UNQUALIFIED\" +\n    \" STATISTICS_UNQUALIFIED STATISTICS_VERDICT\" +\n    \" TESTCASE_FINISH TESTCASE_START\" +\n    \" TESTCASE_UNQUALIFIED TIMEROP_GUARD\" +\n    \" TIMEROP_READ TIMEROP_START TIMEROP_STOP\" +\n    \" TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED\" +\n    \" USER_UNQUALIFIED VERDICTOP_FINAL\" +\n    \" VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT\" +\n    \" VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED\"),\n    externalCommands: words(\"BeginControlPart EndControlPart BeginTestCase\" +\n    \" EndTestCase\"),\n    multiLineStrings: true\n  });\n});"]}