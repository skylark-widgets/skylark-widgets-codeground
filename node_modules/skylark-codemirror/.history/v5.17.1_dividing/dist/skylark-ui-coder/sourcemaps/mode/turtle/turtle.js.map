{"version":3,"sources":["mode/turtle/turtle.js"],"names":["define","CodeMirror","defineMode","config","wordRegexp","words","RegExp","join","tokenBase","stream","state","ch","next","curPunc","match","tokenize","tokenLiteral","test","skipToEnd","operatorChars","eatWhile","peek","word","current","keywords","quote","escaped","pushContext","type","col","context","prev","indent","popContext","indentUnit","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME"],"mappings":"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","file":"../../../mode/turtle/turtle.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"turtle\", function(config) {\n  var indentUnit = config.indentUnit;\n  var curPunc;\n\n  function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  }\n  var ops = wordRegexp([]);\n  var keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\n  var operatorChars = /[*+\\-<>=&|]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    curPunc = null;\n    if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n      stream.match(/^[^\\s\\u00a0>]*>?/);\n      return \"atom\";\n    }\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    }\n    else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (operatorChars.test(ch)) {\n      stream.eatWhile(operatorChars);\n      return null;\n    }\n    else if (ch == \":\") {\n          return \"operator\";\n        } else {\n      stream.eatWhile(/[_\\w\\d]/);\n      if(stream.peek() == \":\") {\n        return \"variable-3\";\n      } else {\n             var word = stream.current();\n\n             if(keywords.test(word)) {\n                        return \"meta\";\n             }\n\n             if(ch >= \"A\" && ch <= \"Z\") {\n                    return \"comment\";\n                 } else {\n                        return \"keyword\";\n                 }\n      }\n      var word = stream.current();\n      if (ops.test(word))\n        return null;\n      else if (keywords.test(word))\n        return \"meta\";\n      else\n        return \"variable\";\n    }\n  }\n\n  function tokenLiteral(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n\n  function pushContext(state, type, col) {\n    state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n  }\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              context: null,\n              indent: 0,\n              col: 0};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null) state.context.align = false;\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n        state.context.align = true;\n      }\n\n      if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n      else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n      else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n      else if (/[\\]\\}\\)]/.test(curPunc)) {\n        while (state.context && state.context.type == \"pattern\") popContext(state);\n        if (state.context && curPunc == state.context.type) popContext(state);\n      }\n      else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n      else if (/atom|string|variable/.test(style) && state.context) {\n        if (/[\\}\\]]/.test(state.context.type))\n          pushContext(state, \"pattern\", stream.column());\n        else if (state.context.type == \"pattern\" && !state.context.align) {\n          state.context.align = true;\n          state.context.col = stream.column();\n        }\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      var context = state.context;\n      if (/[\\]\\}]/.test(firstChar))\n        while (context && context.type == \"pattern\") context = context.prev;\n\n      var closing = context && firstChar == context.type;\n      if (!context)\n        return 0;\n      else if (context.type == \"pattern\")\n        return context.col;\n      else if (context.align)\n        return context.col + (closing ? 0 : 1);\n      else\n        return context.indent + (closing ? 0 : indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/turtle\", \"turtle\");\n\n});\n"]}