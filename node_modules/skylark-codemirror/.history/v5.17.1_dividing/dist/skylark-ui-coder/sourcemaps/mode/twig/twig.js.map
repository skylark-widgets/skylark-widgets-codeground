{"version":3,"sources":["mode/twig/twig.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","operator","match","atom","number","sign","instring","next","eat","sol","keywords","RegExp","join","startState","token","config","parserConfig","twigInner","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME"],"mappings":"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","file":"../../../mode/twig/twig.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../Coder\"),  require(\"../../addon/mode/multiplex\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../Coder\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function() {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if (state.sign) {\n          state.sign = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n            if (stream.match(number)) {\n              return \"number\";\n            }\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (ch = stream.eat(\"#\")) {\n          state.incomment = true;\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {};\n      },\n      token: function (stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"twig\", function(config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base), {\n        open: /\\{[{#%]/, close: /[}#%]\\}/, mode: twigInner, parseDelimiters: true\n      }\n    );\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});\n"]}