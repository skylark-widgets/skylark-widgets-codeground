{"version":3,"sources":["mode/vbscript/vbscript.js"],"names":["define","CodeMirror","defineMode","conf","parserConf","wordRegexp","words","RegExp","join","indent","_stream","state","currentIndent","dedent","tokenBase","stream","eatSpace","ch","peek","skipToEnd","match","comment","floatLiteral","eat","intLiteral","stringPrefixes","tokenize","tokenStringFactory","current","doubleOperators","singleOperators","wordOperators","singleDelimiters","brakets","noIndentWords","doInCurrentLine","doOpening","opening","middle","doubleClosing","closing","keywords","atoms","known","builtinFuncs","builtinObjs","identifiers","next","ERRORCLASS","delimiter","singleline","length","OUTCLASS","eol","eatWhile","singleLineStringErrors","tokenLexer","style","substr","knownWords","indexOf","openingKeywords","middleKeywords","endKeywords","commonkeywords","atomWords","builtinFuncsWords","builtinConsts","builtinObjsWords","knownProperties","knownMethods","aspBuiltinObjsWords","aspKnownProperties","aspKnownMethods","concat","isASP","external","electricChars","startState","lastToken","nextLineIndent","ignoreKeyword","token","sol","content","textAfter","trueText","replace","indentUnit","defineMIME"],"mappings":"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","file":"../../../mode/vbscript/vbscript.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/*\nFor extra ASP classic objects, initialize CodeMirror instance with this option:\n    isASP: true\n\nE.G.:\n    var editor = CodeMirror.fromTextArea(document.getElementById(\"code\"), {\n        lineNumbers: true,\n        isASP: true\n      });\n*/\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"vbscript\", function(conf, parserConf) {\n    var ERRORCLASS = 'error';\n\n    function wordRegexp(words) {\n        return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&\\\\\\\\\\\\^<>=]\");\n    var doubleOperators = new RegExp(\"^((<>)|(<=)|(>=))\");\n    var singleDelimiters = new RegExp('^[\\\\.,]');\n    var brakets = new RegExp('^[\\\\(\\\\)]');\n    var identifiers = new RegExp(\"^[A-Za-z][_A-Za-z0-9]*\");\n\n    var openingKeywords = ['class','sub','select','while','if','function', 'property', 'with', 'for'];\n    var middleKeywords = ['else','elseif','case'];\n    var endKeywords = ['next','loop','wend'];\n\n    var wordOperators = wordRegexp(['and', 'or', 'not', 'xor', 'is', 'mod', 'eqv', 'imp']);\n    var commonkeywords = ['dim', 'redim', 'then',  'until', 'randomize',\n                          'byval','byref','new','property', 'exit', 'in',\n                          'const','private', 'public',\n                          'get','set','let', 'stop', 'on error resume next', 'on error goto 0', 'option explicit', 'call', 'me'];\n\n    //This list was from: http://msdn.microsoft.com/en-us/library/f8tbc79x(v=vs.84).aspx\n    var atomWords = ['true', 'false', 'nothing', 'empty', 'null'];\n    //This list was from: http://msdn.microsoft.com/en-us/library/3ca8tfek(v=vs.84).aspx\n    var builtinFuncsWords = ['abs', 'array', 'asc', 'atn', 'cbool', 'cbyte', 'ccur', 'cdate', 'cdbl', 'chr', 'cint', 'clng', 'cos', 'csng', 'cstr', 'date', 'dateadd', 'datediff', 'datepart',\n                        'dateserial', 'datevalue', 'day', 'escape', 'eval', 'execute', 'exp', 'filter', 'formatcurrency', 'formatdatetime', 'formatnumber', 'formatpercent', 'getlocale', 'getobject',\n                        'getref', 'hex', 'hour', 'inputbox', 'instr', 'instrrev', 'int', 'fix', 'isarray', 'isdate', 'isempty', 'isnull', 'isnumeric', 'isobject', 'join', 'lbound', 'lcase', 'left',\n                        'len', 'loadpicture', 'log', 'ltrim', 'rtrim', 'trim', 'maths', 'mid', 'minute', 'month', 'monthname', 'msgbox', 'now', 'oct', 'replace', 'rgb', 'right', 'rnd', 'round',\n                        'scriptengine', 'scriptenginebuildversion', 'scriptenginemajorversion', 'scriptengineminorversion', 'second', 'setlocale', 'sgn', 'sin', 'space', 'split', 'sqr', 'strcomp',\n                        'string', 'strreverse', 'tan', 'time', 'timer', 'timeserial', 'timevalue', 'typename', 'ubound', 'ucase', 'unescape', 'vartype', 'weekday', 'weekdayname', 'year'];\n\n    //This list was from: http://msdn.microsoft.com/en-us/library/ydz4cfk3(v=vs.84).aspx\n    var builtinConsts = ['vbBlack', 'vbRed', 'vbGreen', 'vbYellow', 'vbBlue', 'vbMagenta', 'vbCyan', 'vbWhite', 'vbBinaryCompare', 'vbTextCompare',\n                         'vbSunday', 'vbMonday', 'vbTuesday', 'vbWednesday', 'vbThursday', 'vbFriday', 'vbSaturday', 'vbUseSystemDayOfWeek', 'vbFirstJan1', 'vbFirstFourDays', 'vbFirstFullWeek',\n                         'vbGeneralDate', 'vbLongDate', 'vbShortDate', 'vbLongTime', 'vbShortTime', 'vbObjectError',\n                         'vbOKOnly', 'vbOKCancel', 'vbAbortRetryIgnore', 'vbYesNoCancel', 'vbYesNo', 'vbRetryCancel', 'vbCritical', 'vbQuestion', 'vbExclamation', 'vbInformation', 'vbDefaultButton1', 'vbDefaultButton2',\n                         'vbDefaultButton3', 'vbDefaultButton4', 'vbApplicationModal', 'vbSystemModal', 'vbOK', 'vbCancel', 'vbAbort', 'vbRetry', 'vbIgnore', 'vbYes', 'vbNo',\n                         'vbCr', 'VbCrLf', 'vbFormFeed', 'vbLf', 'vbNewLine', 'vbNullChar', 'vbNullString', 'vbTab', 'vbVerticalTab', 'vbUseDefault', 'vbTrue', 'vbFalse',\n                         'vbEmpty', 'vbNull', 'vbInteger', 'vbLong', 'vbSingle', 'vbDouble', 'vbCurrency', 'vbDate', 'vbString', 'vbObject', 'vbError', 'vbBoolean', 'vbVariant', 'vbDataObject', 'vbDecimal', 'vbByte', 'vbArray'];\n    //This list was from: http://msdn.microsoft.com/en-us/library/hkc375ea(v=vs.84).aspx\n    var builtinObjsWords = ['WScript', 'err', 'debug', 'RegExp'];\n    var knownProperties = ['description', 'firstindex', 'global', 'helpcontext', 'helpfile', 'ignorecase', 'length', 'number', 'pattern', 'source', 'value', 'count'];\n    var knownMethods = ['clear', 'execute', 'raise', 'replace', 'test', 'write', 'writeline', 'close', 'open', 'state', 'eof', 'update', 'addnew', 'end', 'createobject', 'quit'];\n\n    var aspBuiltinObjsWords = ['server', 'response', 'request', 'session', 'application'];\n    var aspKnownProperties = ['buffer', 'cachecontrol', 'charset', 'contenttype', 'expires', 'expiresabsolute', 'isclientconnected', 'pics', 'status', //response\n                              'clientcertificate', 'cookies', 'form', 'querystring', 'servervariables', 'totalbytes', //request\n                              'contents', 'staticobjects', //application\n                              'codepage', 'lcid', 'sessionid', 'timeout', //session\n                              'scripttimeout']; //server\n    var aspKnownMethods = ['addheader', 'appendtolog', 'binarywrite', 'end', 'flush', 'redirect', //response\n                           'binaryread', //request\n                           'remove', 'removeall', 'lock', 'unlock', //application\n                           'abandon', //session\n                           'getlasterror', 'htmlencode', 'mappath', 'transfer', 'urlencode']; //server\n\n    var knownWords = knownMethods.concat(knownProperties);\n\n    builtinObjsWords = builtinObjsWords.concat(builtinConsts);\n\n    if (conf.isASP){\n        builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);\n        knownWords = knownWords.concat(aspKnownMethods, aspKnownProperties);\n    };\n\n    var keywords = wordRegexp(commonkeywords);\n    var atoms = wordRegexp(atomWords);\n    var builtinFuncs = wordRegexp(builtinFuncsWords);\n    var builtinObjs = wordRegexp(builtinObjsWords);\n    var known = wordRegexp(knownWords);\n    var stringPrefixes = '\"';\n\n    var opening = wordRegexp(openingKeywords);\n    var middle = wordRegexp(middleKeywords);\n    var closing = wordRegexp(endKeywords);\n    var doubleClosing = wordRegexp(['end']);\n    var doOpening = wordRegexp(['do']);\n    var noIndentWords = wordRegexp(['on error resume next', 'exit']);\n    var comment = wordRegexp(['rem']);\n\n\n    function indent(_stream, state) {\n      state.currentIndent++;\n    }\n\n    function dedent(_stream, state) {\n      state.currentIndent--;\n    }\n    // tokenizers\n    function tokenBase(stream, state) {\n        if (stream.eatSpace()) {\n            return 'space';\n            //return null;\n        }\n\n        var ch = stream.peek();\n\n        // Handle Comments\n        if (ch === \"'\") {\n            stream.skipToEnd();\n            return 'comment';\n        }\n        if (stream.match(comment)){\n            stream.skipToEnd();\n            return 'comment';\n        }\n\n\n        // Handle Number Literals\n        if (stream.match(/^((&H)|(&O))?[0-9\\.]/i, false) && !stream.match(/^((&H)|(&O))?[0-9\\.]+[a-z_]/i, false)) {\n            var floatLiteral = false;\n            // Floats\n            if (stream.match(/^\\d*\\.\\d+/i)) { floatLiteral = true; }\n            else if (stream.match(/^\\d+\\.\\d*/)) { floatLiteral = true; }\n            else if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n\n            if (floatLiteral) {\n                // Float literals may be \"imaginary\"\n                stream.eat(/J/i);\n                return 'number';\n            }\n            // Integers\n            var intLiteral = false;\n            // Hex\n            if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }\n            // Octal\n            else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }\n            // Decimal\n            else if (stream.match(/^[1-9]\\d*F?/)) {\n                // Decimal literals may be \"imaginary\"\n                stream.eat(/J/i);\n                // TODO - Can you have imaginary longs?\n                intLiteral = true;\n            }\n            // Zero by itself with no other piece of number.\n            else if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n            if (intLiteral) {\n                // Integer literals may be \"long\"\n                stream.eat(/L/i);\n                return 'number';\n            }\n        }\n\n        // Handle Strings\n        if (stream.match(stringPrefixes)) {\n            state.tokenize = tokenStringFactory(stream.current());\n            return state.tokenize(stream, state);\n        }\n\n        // Handle operators and Delimiters\n        if (stream.match(doubleOperators)\n            || stream.match(singleOperators)\n            || stream.match(wordOperators)) {\n            return 'operator';\n        }\n        if (stream.match(singleDelimiters)) {\n            return null;\n        }\n\n        if (stream.match(brakets)) {\n            return \"bracket\";\n        }\n\n        if (stream.match(noIndentWords)) {\n            state.doInCurrentLine = true;\n\n            return 'keyword';\n        }\n\n        if (stream.match(doOpening)) {\n            indent(stream,state);\n            state.doInCurrentLine = true;\n\n            return 'keyword';\n        }\n        if (stream.match(opening)) {\n            if (! state.doInCurrentLine)\n              indent(stream,state);\n            else\n              state.doInCurrentLine = false;\n\n            return 'keyword';\n        }\n        if (stream.match(middle)) {\n            return 'keyword';\n        }\n\n\n        if (stream.match(doubleClosing)) {\n            dedent(stream,state);\n            dedent(stream,state);\n\n            return 'keyword';\n        }\n        if (stream.match(closing)) {\n            if (! state.doInCurrentLine)\n              dedent(stream,state);\n            else\n              state.doInCurrentLine = false;\n\n            return 'keyword';\n        }\n\n        if (stream.match(keywords)) {\n            return 'keyword';\n        }\n\n        if (stream.match(atoms)) {\n            return 'atom';\n        }\n\n        if (stream.match(known)) {\n            return 'variable-2';\n        }\n\n        if (stream.match(builtinFuncs)) {\n            return 'builtin';\n        }\n\n        if (stream.match(builtinObjs)){\n            return 'variable-2';\n        }\n\n        if (stream.match(identifiers)) {\n            return 'variable';\n        }\n\n        // Handle non-detected items\n        stream.next();\n        return ERRORCLASS;\n    }\n\n    function tokenStringFactory(delimiter) {\n        var singleline = delimiter.length == 1;\n        var OUTCLASS = 'string';\n\n        return function(stream, state) {\n            while (!stream.eol()) {\n                stream.eatWhile(/[^'\"]/);\n                if (stream.match(delimiter)) {\n                    state.tokenize = tokenBase;\n                    return OUTCLASS;\n                } else {\n                    stream.eat(/['\"]/);\n                }\n            }\n            if (singleline) {\n                if (parserConf.singleLineStringErrors) {\n                    return ERRORCLASS;\n                } else {\n                    state.tokenize = tokenBase;\n                }\n            }\n            return OUTCLASS;\n        };\n    }\n\n\n    function tokenLexer(stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n\n        // Handle '.' connected identifiers\n        if (current === '.') {\n            style = state.tokenize(stream, state);\n\n            current = stream.current();\n            if (style && (style.substr(0, 8) === 'variable' || style==='builtin' || style==='keyword')){//|| knownWords.indexOf(current.substring(1)) > -1) {\n                if (style === 'builtin' || style === 'keyword') style='variable';\n                if (knownWords.indexOf(current.substr(1)) > -1) style='variable-2';\n\n                return style;\n            } else {\n                return ERRORCLASS;\n            }\n        }\n\n        return style;\n    }\n\n    var external = {\n        electricChars:\"dDpPtTfFeE \",\n        startState: function() {\n            return {\n              tokenize: tokenBase,\n              lastToken: null,\n              currentIndent: 0,\n              nextLineIndent: 0,\n              doInCurrentLine: false,\n              ignoreKeyword: false\n\n\n          };\n        },\n\n        token: function(stream, state) {\n            if (stream.sol()) {\n              state.currentIndent += state.nextLineIndent;\n              state.nextLineIndent = 0;\n              state.doInCurrentLine = 0;\n            }\n            var style = tokenLexer(stream, state);\n\n            state.lastToken = {style:style, content: stream.current()};\n\n            if (style==='space') style=null;\n\n            return style;\n        },\n\n        indent: function(state, textAfter) {\n            var trueText = textAfter.replace(/^\\s+|\\s+$/g, '') ;\n            if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return conf.indentUnit*(state.currentIndent-1);\n            if(state.currentIndent < 0) return 0;\n            return state.currentIndent * conf.indentUnit;\n        }\n\n    };\n    return external;\n});\n\nCodeMirror.defineMIME(\"text/vbscript\", \"vbscript\");\n\n});\n"]}