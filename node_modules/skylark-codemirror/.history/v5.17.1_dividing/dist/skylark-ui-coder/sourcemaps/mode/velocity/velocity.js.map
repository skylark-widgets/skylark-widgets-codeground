{"version":3,"sources":["mode/velocity/velocity.js"],"names":["define","CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inString","inParams","lastTokenWasBuiltin","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","specials","propertyIsEnumerable","current","isOperatorChar","word","keywords","functions","peek","toLowerCase","pos","string","charAt","quote","escaped","end","maybeEnd","startState","token","eatSpace","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME"],"mappings":"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","file":"../../../mode/velocity/velocity.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../Coder\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"velocity\", function() {\n    function parseWords(str) {\n        var obj = {}, words = str.split(\" \");\n        for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n        return obj;\n    }\n\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\n                              \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\n                               \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\n    function chain(stream, state, f) {\n        state.tokenize = f;\n        return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n        var beforeParams = state.beforeParams;\n        state.beforeParams = false;\n        var ch = stream.next();\n        // start of unparsed string?\n        if ((ch == \"'\") && !state.inString && state.inParams) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenString(ch));\n        }\n        // start of parsed string?\n        else if ((ch == '\"')) {\n            state.lastTokenWasBuiltin = false;\n            if (state.inString) {\n                state.inString = false;\n                return \"string\";\n            }\n            else if (state.inParams)\n                return chain(stream, state, tokenString(ch));\n        }\n        // is it one of the special signs []{}().,;? Seperator?\n        else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n            if (ch == \"(\" && beforeParams)\n                state.inParams = true;\n            else if (ch == \")\") {\n                state.inParams = false;\n                state.lastTokenWasBuiltin = true;\n            }\n            return null;\n        }\n        // start of a number value?\n        else if (/\\d/.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(/[\\w\\.]/);\n            return \"number\";\n        }\n        // multi line comment?\n        else if (ch == \"#\" && stream.eat(\"*\")) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenComment);\n        }\n        // unparsed content?\n        else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenUnparsed);\n        }\n        // single line comment?\n        else if (ch == \"#\" && stream.eat(\"#\")) {\n            state.lastTokenWasBuiltin = false;\n            stream.skipToEnd();\n            return \"comment\";\n        }\n        // variable?\n        else if (ch == \"$\") {\n            stream.eatWhile(/[\\w\\d\\$_\\.{}]/);\n            // is it one of the specials?\n            if (specials && specials.propertyIsEnumerable(stream.current())) {\n                return \"keyword\";\n            }\n            else {\n                state.lastTokenWasBuiltin = true;\n                state.beforeParams = true;\n                return \"builtin\";\n            }\n        }\n        // is it a operator?\n        else if (isOperatorChar.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(isOperatorChar);\n            return \"operator\";\n        }\n        else {\n            // get the whole word\n            stream.eatWhile(/[\\w\\$_{}@]/);\n            var word = stream.current();\n            // is it one of the listed keywords?\n            if (keywords && keywords.propertyIsEnumerable(word))\n                return \"keyword\";\n            // is it one of the listed functions?\n            if (functions && functions.propertyIsEnumerable(word) ||\n                    (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\n                     !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n                state.beforeParams = true;\n                state.lastTokenWasBuiltin = false;\n                return \"keyword\";\n            }\n            if (state.inString) {\n                state.lastTokenWasBuiltin = false;\n                return \"string\";\n            }\n            if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\n                return \"builtin\";\n            // default: just a \"word\"\n            state.lastTokenWasBuiltin = false;\n            return null;\n        }\n    }\n\n    function tokenString(quote) {\n        return function(stream, state) {\n            var escaped = false, next, end = false;\n            while ((next = stream.next()) != null) {\n                if ((next == quote) && !escaped) {\n                    end = true;\n                    break;\n                }\n                if (quote=='\"' && stream.peek() == '$' && !escaped) {\n                    state.inString = true;\n                    end = true;\n                    break;\n                }\n                escaped = !escaped && next == \"\\\\\";\n            }\n            if (end) state.tokenize = tokenBase;\n            return \"string\";\n        };\n    }\n\n    function tokenComment(stream, state) {\n        var maybeEnd = false, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            maybeEnd = (ch == \"*\");\n        }\n        return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n        var maybeEnd = 0, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd == 2) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            if (ch == \"]\")\n                maybeEnd++;\n            else if (ch != \" \")\n                maybeEnd = 0;\n        }\n        return \"meta\";\n    }\n    // Interface\n\n    return {\n        startState: function() {\n            return {\n                tokenize: tokenBase,\n                beforeParams: false,\n                inParams: false,\n                inString: false,\n                lastTokenWasBuiltin: false\n            };\n        },\n\n        token: function(stream, state) {\n            if (stream.eatSpace()) return null;\n            return state.tokenize(stream, state);\n        },\n        blockCommentStart: \"#*\",\n        blockCommentEnd: \"*#\",\n        lineComment: \"##\",\n        fold: \"velocity\"\n    };\n});\n\nCodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n\n});\n"]}