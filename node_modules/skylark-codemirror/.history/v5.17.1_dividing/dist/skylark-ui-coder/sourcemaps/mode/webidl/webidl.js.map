{"version":3,"sources":["mode/webidl/webidl.js"],"names":["define","CodeMirror","wordRegexp","words","RegExp","join","readToken","stream","state","eatSpace","inComment","match","multilineCommentsEnd","skipToEnd","multilineComments","multilineCommentsStart","integers","floats","strings","startDef","identifiers","endDef","identifiersEnd","keywords","types","lastToken","nextToken","builtins","atoms","singleOperators","next","builtinArray","typeArray","keywordArray","atomArray","registerHelper","concat","startDefArray","startDefs","endDefArray","endDefs","defineMode","startState","token","style","cur","current","test","defineMIME"],"mappings":"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","file":"../../../mode/webidl/webidl.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../lib/codemirror\"], function(CodeMirror) {\n\"use strict\";\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n};\n\nvar builtinArray = [\n  \"Clamp\",\n  \"Constructor\",\n  \"EnforceRange\",\n  \"Exposed\",\n  \"ImplicitThis\",\n  \"Global\", \"PrimaryGlobal\",\n  \"LegacyArrayClass\",\n  \"LegacyUnenumerableNamedProperties\",\n  \"LenientThis\",\n  \"NamedConstructor\",\n  \"NewObject\",\n  \"NoInterfaceObject\",\n  \"OverrideBuiltins\",\n  \"PutForwards\",\n  \"Replaceable\",\n  \"SameObject\",\n  \"TreatNonObjectAsNull\",\n  \"TreatNullAs\",\n    \"EmptyString\",\n  \"Unforgeable\",\n  \"Unscopeable\"\n];\nvar builtins = wordRegexp(builtinArray);\n\nvar typeArray = [\n  \"unsigned\", \"short\", \"long\",                  // UnsignedIntegerType\n  \"unrestricted\", \"float\", \"double\",            // UnrestrictedFloatType\n  \"boolean\", \"byte\", \"octet\",                   // Rest of PrimitiveType\n  \"Promise\",                                    // PromiseType\n  \"ArrayBuffer\", \"DataView\", \"Int8Array\", \"Int16Array\", \"Int32Array\",\n  \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\",\n  \"Float32Array\", \"Float64Array\",               // BufferRelatedType\n  \"ByteString\", \"DOMString\", \"USVString\", \"sequence\", \"object\", \"RegExp\",\n  \"Error\", \"DOMException\", \"FrozenArray\",       // Rest of NonAnyType\n  \"any\",                                        // Rest of SingleType\n  \"void\"                                        // Rest of ReturnType\n];\nvar types = wordRegexp(typeArray);\n\nvar keywordArray = [\n  \"attribute\", \"callback\", \"const\", \"deleter\", \"dictionary\", \"enum\", \"getter\",\n  \"implements\", \"inherit\", \"interface\", \"iterable\", \"legacycaller\", \"maplike\",\n  \"partial\", \"required\", \"serializer\", \"setlike\", \"setter\", \"static\",\n  \"stringifier\", \"typedef\",                     // ArgumentNameKeyword except\n                                                // \"unrestricted\"\n  \"optional\", \"readonly\", \"or\"\n];\nvar keywords = wordRegexp(keywordArray);\n\nvar atomArray = [\n  \"true\", \"false\",                              // BooleanLiteral\n  \"Infinity\", \"NaN\",                            // FloatLiteral\n  \"null\"                                        // Rest of ConstValue\n];\nvar atoms = wordRegexp(atomArray);\n\nCodeMirror.registerHelper(\"hintWords\", \"webidl\",\n    builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray));\n\nvar startDefArray = [\"callback\", \"dictionary\", \"enum\", \"interface\"];\nvar startDefs = wordRegexp(startDefArray);\n\nvar endDefArray = [\"typedef\"];\nvar endDefs = wordRegexp(endDefArray);\n\nvar singleOperators = /^[:<=>?]/;\nvar integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;\nvar floats = /^-?(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;\nvar identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;\nvar identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\\s*;)/;\nvar strings = /^\"[^\"]*\"/;\nvar multilineComments = /^\\/\\*.*?\\*\\//;\nvar multilineCommentsStart = /^\\/\\*.*/;\nvar multilineCommentsEnd = /^.*?\\*\\//;\n\nfunction readToken(stream, state) {\n  // whitespace\n  if (stream.eatSpace()) return null;\n\n  // comment\n  if (state.inComment) {\n    if (stream.match(multilineCommentsEnd)) {\n      state.inComment = false;\n      return \"comment\";\n    }\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (stream.match(multilineComments)) return \"comment\";\n  if (stream.match(multilineCommentsStart)) {\n    state.inComment = true;\n    return \"comment\";\n  }\n\n  // integer and float\n  if (stream.match(/^-?[0-9\\.]/, false)) {\n    if (stream.match(integers) || stream.match(floats)) return \"number\";\n  }\n\n  // string\n  if (stream.match(strings)) return \"string\";\n\n  // identifier\n  if (state.startDef && stream.match(identifiers)) return \"def\";\n\n  if (state.endDef && stream.match(identifiersEnd)) {\n    state.endDef = false;\n    return \"def\";\n  }\n\n  if (stream.match(keywords)) return \"keyword\";\n\n  if (stream.match(types)) {\n    var lastToken = state.lastToken;\n    var nextToken = (stream.match(/^\\s*(.+?)\\b/, false) || [])[1];\n\n    if (lastToken === \":\" || lastToken === \"implements\" ||\n        nextToken === \"implements\" || nextToken === \"=\") {\n      // Used as identifier\n      return \"builtin\";\n    } else {\n      // Used as type\n      return \"variable-3\";\n    }\n  }\n\n  if (stream.match(builtins)) return \"builtin\";\n  if (stream.match(atoms)) return \"atom\";\n  if (stream.match(identifiers)) return \"variable\";\n\n  // other\n  if (stream.match(singleOperators)) return \"operator\";\n\n  // unrecognized\n  stream.next();\n  return null;\n};\n\nCodeMirror.defineMode(\"webidl\", function() {\n  return {\n    startState: function() {\n      return {\n        // Is in multiline comment\n        inComment: false,\n        // Last non-whitespace, matched token\n        lastToken: \"\",\n        // Next token is a definition\n        startDef: false,\n        // Last token of the statement is a definition\n        endDef: false\n      };\n    },\n    token: function(stream, state) {\n      var style = readToken(stream, state);\n\n      if (style) {\n        var cur = stream.current();\n        state.lastToken = cur;\n        if (style === \"keyword\") {\n          state.startDef = startDefs.test(cur);\n          state.endDef = state.endDef || endDefs.test(cur);\n        } else {\n          state.startDef = false;\n        }\n      }\n\n      return style;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-webidl\", \"webidl\");\n});\n"]}