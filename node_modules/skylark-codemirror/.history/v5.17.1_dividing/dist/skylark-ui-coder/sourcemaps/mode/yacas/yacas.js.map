{"version":3,"sources":["mode/yacas/yacas.js"],"names":["define","CodeMirror","defineMode","_config","_parserConfig","words","str","obj","split","i","length","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","tokenComment","skipToEnd","backUp","m","match","bodiedOps","hasOwnProperty","scopes","push","scope","currentScope","pop","reFloatForm","rePattern","reFunctionLike","reIdentifier","end","escaped","prev","pFloatForm","pIdentifier","RegExp","startState","token","eatSpace","indent","textAfter","Pass","delta","indentUnit","electricChars","blockCommentStart","blockCommentEnd","lineComment","defineMIME","name"],"mappings":"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","file":"../../../mode/yacas/yacas.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Yacas mode copyright (c) 2015 by Grzegorz Mazur\n// Loosely based on mathematica mode by Calin Barbat\n\ndefine([\"../../lib/codemirror\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('yacas', function(_config, _parserConfig) {\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var bodiedOps = words(\"Assert BackQuote D Defun Deriv For ForEach FromFile \" +\n                        \"FromString Function Integrate InverseTaylor Limit \" +\n                        \"LocalSymbols Macro MacroRule MacroRulePattern \" +\n                        \"NIntegrate Rule RulePattern Subst TD TExplicitSum \" +\n                        \"TSum Taylor Taylor1 Taylor2 Taylor3 ToFile \" +\n                        \"ToStdout ToString TraceRule Until While\");\n\n  // patterns\n  var pFloatForm  = \"(?:(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(?:[eE][+-]?\\\\d+)?)\";\n  var pIdentifier = \"(?:[a-zA-Z\\\\$'][a-zA-Z0-9\\\\$']*)\";\n\n  // regular expressions\n  var reFloatForm    = new RegExp(pFloatForm);\n  var reIdentifier   = new RegExp(pIdentifier);\n  var rePattern      = new RegExp(pIdentifier + \"?_\" + pIdentifier);\n  var reFunctionLike = new RegExp(pIdentifier + \"\\\\s*\\\\(\");\n\n  function tokenBase(stream, state) {\n    var ch;\n\n    // get next character\n    ch = stream.next();\n\n    // string\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n\n    // comment\n    if (ch === '/') {\n      if (stream.eat('*')) {\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n\n    // go back one character\n    stream.backUp(1);\n\n    // update scope info\n    var m = stream.match(/^(\\w+)\\s*\\(/, false);\n    if (m !== null && bodiedOps.hasOwnProperty(m[1]))\n      state.scopes.push('bodied');\n\n    var scope = currentScope(state);\n\n    if (scope === 'bodied' && ch === '[')\n      state.scopes.pop();\n\n    if (ch === '[' || ch === '{' || ch === '(')\n      state.scopes.push(ch);\n\n    scope = currentScope(state);\n\n    if (scope === '[' && ch === ']' ||\n        scope === '{' && ch === '}' ||\n        scope === '(' && ch === ')')\n      state.scopes.pop();\n\n    if (ch === ';') {\n      while (scope === 'bodied') {\n        state.scopes.pop();\n        scope = currentScope(state);\n      }\n    }\n\n    // look for ordered rules\n    if (stream.match(/\\d+ *#/, true, false)) {\n      return 'qualifier';\n    }\n\n    // look for numbers\n    if (stream.match(reFloatForm, true, false)) {\n      return 'number';\n    }\n\n    // look for placeholders\n    if (stream.match(rePattern, true, false)) {\n      return 'variable-3';\n    }\n\n    // match all braces separately\n    if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n      return 'bracket';\n    }\n\n    // literals looking like function calls\n    if (stream.match(reFunctionLike, true, false)) {\n      stream.backUp(1);\n      return 'variable';\n    }\n\n    // all other identifiers\n    if (stream.match(reIdentifier, true, false)) {\n      return 'variable-2';\n    }\n\n    // operators; note that operators like @@ or /; are matched separately for each symbol.\n    if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n      return 'operator';\n    }\n\n    // everything else is an error\n    return 'error';\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while((next = stream.next()) != null) {\n      if (prev === '*' && next === '/') {\n        state.tokenize = tokenBase;\n        break;\n      }\n      prev = next;\n    }\n    return 'comment';\n  }\n\n  function currentScope(state) {\n    var scope = null;\n    if (state.scopes.length > 0)\n      scope = state.scopes[state.scopes.length - 1];\n    return scope;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: []\n      };\n    },\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n    indent: function(state, textAfter) {\n      if (state.tokenize !== tokenBase && state.tokenize !== null)\n        return CodeMirror.Pass;\n\n      var delta = 0;\n      if (textAfter === ']' || textAfter === '];' ||\n          textAfter === '}' || textAfter === '};' ||\n          textAfter === ');')\n        delta = -1;\n\n      return (state.scopes.length + delta) * _config.indentUnit;\n    },\n    electricChars: \"{}[]();\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-yacas', {\n  name: 'yacas'\n});\n\n});\n"]}