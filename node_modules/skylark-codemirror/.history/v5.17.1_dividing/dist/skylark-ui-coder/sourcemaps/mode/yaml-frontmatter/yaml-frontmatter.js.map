{"version":3,"sources":["mode/yaml-frontmatter/yaml-frontmatter.js"],"names":["define","CodeMirror","START","FRONTMATTER","BODY","defineMode","config","parserConfig","curMode","state","innerMode","yamlMode","getMode","base","startState","inner","copyState","token","stream","match","end","sol","style","mode","blankLine"],"mappings":";;;;;;;AAGAA,QAAQ,uBAAwB,gBAAiB,SAAUC,GAEzD,GAAIC,GAAQ,EAAGC,EAAc,EAAGC,EAAO,CAGvCH,GAAWI,WAAW,mBAAoB,SAAUC,EAAQC,GAI1D,QAASC,GAAQC,GACf,MAAOA,GAAMA,OAASL,EAAOM,EAAYC,EAJ3C,GAAIA,GAAWV,EAAWW,QAAQN,EAAQ,QACtCI,EAAYT,EAAWW,QAAQN,EAAQC,GAAgBA,EAAaM,MAAQ,MAMhF,QACEC,WAAY,WACV,OACEL,MAAOP,EACPa,MAAOd,EAAWa,WAAWH,KAGjCK,UAAW,SAAUP,GACnB,OACEA,MAAOA,EAAMA,MACbM,MAAOd,EAAWe,UAAUR,EAAQC,GAAQA,EAAMM,SAGtDE,MAAO,SAAUC,EAAQT,GACvB,GAAIA,EAAMA,OAASP,EACjB,MAAIgB,GAAOC,MAAM,OAAO,IACtBV,EAAMA,MAAQN,EACPQ,EAASM,MAAMC,EAAQT,EAAMM,SAEpCN,EAAMA,MAAQL,EACdK,EAAMM,MAAQd,EAAWa,WAAWJ,GAC7BA,EAAUO,MAAMC,EAAQT,EAAMM,OAElC,IAAIN,EAAMA,OAASN,EAAa,CACrC,GAAIiB,GAAMF,EAAOG,OAASH,EAAOC,MAAM,OAAO,GAC1CG,EAAQX,EAASM,MAAMC,EAAQT,EAAMM,MAKzC,OAJIK,KACFX,EAAMA,MAAQL,EACdK,EAAMM,MAAQd,EAAWa,WAAWJ,IAE/BY,EAEP,MAAOZ,GAAUO,MAAMC,EAAQT,EAAMM,QAGzCL,UAAW,SAAUD,GACnB,OAAQc,KAAMf,EAAQC,GAAQA,MAAOA,EAAMM,QAE7CS,UAAW,SAAUf,GACnB,GAAIc,GAAOf,EAAQC,EACnB,IAAIc,EAAKC,UAAW,MAAOD,GAAKC,UAAUf,EAAMM","file":"../../../mode/yaml-frontmatter/yaml-frontmatter.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../lib/codemirror\", \"../yaml/yaml\"], function (CodeMirror) {\n\n  var START = 0, FRONTMATTER = 1, BODY = 2\n\n  // a mixed mode for Markdown text with an optional YAML front matter\n  CodeMirror.defineMode(\"yaml-frontmatter\", function (config, parserConfig) {\n    var yamlMode = CodeMirror.getMode(config, \"yaml\")\n    var innerMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"gfm\")\n\n    function curMode(state) {\n      return state.state == BODY ? innerMode : yamlMode\n    }\n\n    return {\n      startState: function () {\n        return {\n          state: START,\n          inner: CodeMirror.startState(yamlMode)\n        }\n      },\n      copyState: function (state) {\n        return {\n          state: state.state,\n          inner: CodeMirror.copyState(curMode(state), state.inner)\n        }\n      },\n      token: function (stream, state) {\n        if (state.state == START) {\n          if (stream.match(/---/, false)) {\n            state.state = FRONTMATTER\n            return yamlMode.token(stream, state.inner)\n          } else {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n            return innerMode.token(stream, state.inner)\n          }\n        } else if (state.state == FRONTMATTER) {\n          var end = stream.sol() && stream.match(/---/, false)\n          var style = yamlMode.token(stream, state.inner)\n          if (end) {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n          }\n          return style\n        } else {\n          return innerMode.token(stream, state.inner)\n        }\n      },\n      innerMode: function (state) {\n        return {mode: curMode(state), state: state.inner}\n      },\n      blankLine: function (state) {\n        var mode = curMode(state)\n        if (mode.blankLine) return mode.blankLine(state.inner)\n      }\n    }\n  })\n});\n"]}