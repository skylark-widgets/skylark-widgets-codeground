{"version":3,"sources":["mode/yaml/yaml.js"],"names":["define","CodeMirror","defineMode","cons","keywordRegex","RegExp","join","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,wBAAyB,SAASC,GAC1C,YAEAA,GAAWC,WAAW,OAAQ,WAE5B,GAAIC,IAAQ,OAAQ,QAAS,KAAM,MAAO,MAAO,MAC7CC,EAAe,GAAIC,QAAO,QAAQF,EAAKG,KAAK,OAAO,MAAO,IAE9D,QACEC,MAAO,SAASC,EAAQC,GACtB,GAAIC,GAAKF,EAAOG,OACZC,EAAMH,EAAMI,OAGhB,IAFAJ,EAAMI,SAAU,EAEN,KAANH,IAA4B,GAAdF,EAAOM,KAAY,KAAKC,KAAKP,EAAOQ,OAAOC,OAAOT,EAAOM,IAAM,KAE/E,MADAN,GAAOU,YACA,SAGT,IAAIV,EAAOW,MAAM,oCACf,MAAO,QAET,IAAIV,EAAMW,SAAWZ,EAAOa,cAAgBZ,EAAMa,OAC5B,MAApBd,GAAOU,YAAoB,QAE7B,IADWT,EAAMW,UAAWX,EAAMW,SAAU,GACxCZ,EAAOe,MAAO,CAKhB,GAJAd,EAAMa,OAAS,EACfb,EAAMe,MAAO,EACbf,EAAMgB,WAAY,EAEfjB,EAAOW,MAAM,OAAU,MAAO,KAEjC,IAAIX,EAAOW,MAAM,UAAa,MAAO,KAErC,IAAIX,EAAOW,MAAM,WAAc,MAAO,OAGxC,GAAIX,EAAOW,MAAM,kBASf,MARU,KAANT,EACFD,EAAMiB,cACO,KAANhB,EACPD,EAAMiB,cACO,KAANhB,EACPD,EAAMkB,aAENlB,EAAMkB,aACD,MAIT,IAAIlB,EAAMkB,WAAa,IAAMf,GAAa,KAANF,EAElC,MADAF,GAAOoB,OACA,MAGT,IAAInB,EAAMiB,YAAc,IAAMd,GAAa,KAANF,EAKnC,MAJAD,GAAMa,OAAS,EACfb,EAAMe,MAAO,EACbf,EAAMgB,WAAY,EAClBjB,EAAOoB,OACA,MAIT,IAAInB,EAAMgB,UAAW,CAEnB,GAAIjB,EAAOW,MAAM,kBAA2C,MAAtBV,GAAMW,SAAU,EAAa,MAEnE,IAAIZ,EAAOW,MAAM,+BAAkC,MAAO,YAE1D,IAAyB,GAArBV,EAAMiB,aAAoBlB,EAAOW,MAAM,wBAA2B,MAAO,QAC7E,IAAIV,EAAMiB,YAAc,GAAKlB,EAAOW,MAAM,gCAAmC,MAAO,QAEpF,IAAIX,EAAOW,MAAMf,GAAiB,MAAO,UAI3C,OAAKK,EAAMe,MAAQhB,EAAOW,MAAM,kFAC9BV,EAAMe,MAAO,EACbf,EAAMa,OAASd,EAAOa,cACf,QAELZ,EAAMe,MAAQhB,EAAOW,MAAM,UAAYV,EAAMgB,WAAY,EAAa,SAG1EhB,EAAMgB,WAAY,EAClBhB,EAAMI,QAAiB,MAANH,EACjBF,EAAOoB,OACA,OAETC,WAAY,WACV,OACEL,MAAM,EACNC,WAAW,EACXH,OAAQ,EACRI,YAAa,EACbC,WAAY,EACZP,SAAS,EACTP,SAAS,OAMjBZ,EAAW6B,WAAW,cAAe","file":"../../../mode/yaml/yaml.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\ndefine([\"../../lib/codemirror\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"yaml\", function() {\n\n  var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n  var keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\n  return {\n    token: function(stream, state) {\n      var ch = stream.peek();\n      var esc = state.escaped;\n      state.escaped = false;\n      /* comments */\n      if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n        return \"string\";\n\n      if (state.literal && stream.indentation() > state.keyCol) {\n        stream.skipToEnd(); return \"string\";\n      } else if (state.literal) { state.literal = false; }\n      if (stream.sol()) {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        /* document start */\n        if(stream.match(/---/)) { return \"def\"; }\n        /* document end */\n        if (stream.match(/\\.\\.\\./)) { return \"def\"; }\n        /* array list item */\n        if (stream.match(/\\s*-\\s+/)) { return 'meta'; }\n      }\n      /* inline pairs/lists */\n      if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n        if (ch == '{')\n          state.inlinePairs++;\n        else if (ch == '}')\n          state.inlinePairs--;\n        else if (ch == '[')\n          state.inlineList++;\n        else\n          state.inlineList--;\n        return 'meta';\n      }\n\n      /* list seperator */\n      if (state.inlineList > 0 && !esc && ch == ',') {\n        stream.next();\n        return 'meta';\n      }\n      /* pairs seperator */\n      if (state.inlinePairs > 0 && !esc && ch == ',') {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        stream.next();\n        return 'meta';\n      }\n\n      /* start of value of a pair */\n      if (state.pairStart) {\n        /* block literals */\n        if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n        /* references */\n        if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable-2'; }\n        /* numbers */\n        if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n        if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n        /* keywords */\n        if (stream.match(keywordRegex)) { return 'keyword'; }\n      }\n\n      /* pairs (associative arrays) -> key */\n      if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n        state.pair = true;\n        state.keyCol = stream.indentation();\n        return \"atom\";\n      }\n      if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n      /* nothing found, continue */\n      state.pairStart = false;\n      state.escaped = (ch == '\\\\');\n      stream.next();\n      return null;\n    },\n    startState: function() {\n      return {\n        pair: false,\n        pairStart: false,\n        keyCol: 0,\n        inlinePairs: 0,\n        inlineList: 0,\n        literal: false,\n        escaped: false\n      };\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\n\n});\n"]}