{"version":3,"sources":["primitives/display/Display.js"],"names":["define","klass","browser","dom","CoderCtor","measureText","Display","klassName","_construct","place","doc","input","d","this","scrollbarFiller","elt","setAttribute","gutterFiller","lineDiv","selectionDiv","cursorDiv","measure","lineMeasure","lineSpace","mover","sizer","sizerWidth","heightForcer","scrollerGap","gutters","lineGutter","scroller","wrapper","ie","ie_version","style","zIndex","paddingRight","webkit","gecko","mobile","draggable","appendChild","viewFrom","viewTo","first","reportedViewFrom","reportedViewTo","view","renderedView","externalMeasured","viewOffset","lastWrapHeight","lastWrapWidth","updateLineNumbers","nativeBarWidth","barHeight","barWidth","scrollbarsClipped","lineNumWidth","lineNumInnerWidth","lineNumChars","alignWidgets","cachedCharWidth","cachedTextHeight","cachedPaddingH","maxLine","maxLineLength","maxLineChanged","wheelDX","wheelDY","wheelStartX","wheelStartY","shift","selForContextMenu","activeTouch","init","eventInWidget","e","display","n","e_target","parentNode","nodeType","getAttribute","paddingTop","offsetTop","paddingVert","offsetHeight","paddingH","removeChildrenAndAdd","window","getComputedStyle","currentStyle","data","left","parseInt","paddingLeft","right","isNaN","textHeight","i","document","createTextNode","height","removeChildren","charWidth","anchor","pre","rect","getBoundingClientRect","width"],"mappings":"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","file":"../../../primitives/display/Display.js","sourcesContent":["define([\r\n    \"skylark-langx/klass\",\r\n    \"../util/browser\",\r\n    \"../util/dom\",\r\n    \"../CoderCtor\"\r\n],function(klass, browser, dom, CoderCtor) {\r\n\r\n  var measureText;\r\n\r\n  // DISPLAY CONSTRUCTOR\r\n\r\n  // The display handles the DOM integration, both for input reading\r\n  // and content drawing. It holds references to DOM nodes and\r\n  // display-related state.\r\n\r\n    var Display = klass({\r\n        klassName : \"Display\",\r\n\r\n        _construct :   function (place, doc, input) {\r\n            var d = this;\r\n            this.input = input;\r\n\r\n            // Covers bottom-right square when both scrollbars are present.\r\n            d.scrollbarFiller = dom.elt(\"div\", null, \"CodeMirror-scrollbar-filler\");\r\n            d.scrollbarFiller.setAttribute(\"cm-not-content\", \"true\");\r\n            // Covers bottom of gutter when coverGutterNextToScrollbar is on\r\n            // and h scrollbar is present.\r\n            d.gutterFiller = dom.elt(\"div\", null, \"CodeMirror-gutter-filler\");\r\n            d.gutterFiller.setAttribute(\"cm-not-content\", \"true\");\r\n            // Will contain the actual code, positioned to cover the viewport.\r\n            d.lineDiv = dom.elt(\"div\", null, \"CodeMirror-code\");\r\n            // Elements are added to these to represent selection and cursors.\r\n            d.selectionDiv = dom.elt(\"div\", null, null, \"position: relative; z-index: 1\");\r\n            d.cursorDiv = dom.elt(\"div\", null, \"CodeMirror-cursors\");\r\n            // A visibility: hidden element used to find the size of things.\r\n            d.measure = dom.elt(\"div\", null, \"CodeMirror-measure\");\r\n            // When lines outside of the viewport are measured, they are drawn in this.\r\n            d.lineMeasure = dom.elt(\"div\", null, \"CodeMirror-measure\");\r\n            // Wraps everything that needs to exist inside the vertically-padded coordinate system\r\n            d.lineSpace = dom.elt(\"div\", [d.measure, d.lineMeasure, d.selectionDiv, d.cursorDiv, d.lineDiv],\r\n                              null, \"position: relative; outline: none\");\r\n            // Moved around its parent to cover visible view.\r\n            d.mover = dom.elt(\"div\", [dom.elt(\"div\", [d.lineSpace], \"CodeMirror-lines\")], null, \"position: relative\");\r\n            // Set to the height of the document, allowing scrolling.\r\n            d.sizer = dom.elt(\"div\", [d.mover], \"CodeMirror-sizer\");\r\n            d.sizerWidth = null;\r\n            // Behavior of dom.elts with overflow: auto and padding is\r\n            // inconsistent across browsers. This is used to ensure the\r\n            // scrollable area is big enough.\r\n            d.heightForcer = dom.elt(\"div\", null, null, \"position: absolute; height: \" + scrollerGap + \"px; width: 1px;\");\r\n            // Will contain the gutters, if any.\r\n            d.gutters = dom.elt(\"div\", null, \"CodeMirror-gutters\");\r\n            d.lineGutter = null;\r\n            // Actual scrollable element.\r\n            d.scroller = dom.elt(\"div\", [d.sizer, d.heightForcer, d.gutters], \"CodeMirror-scroll\");\r\n            d.scroller.setAttribute(\"tabIndex\", \"-1\");\r\n            // The element in which the editor lives.\r\n            d.wrapper = dom.elt(\"div\", [d.scrollbarFiller, d.gutterFiller, d.scroller], \"CodeMirror\");\r\n\r\n            // Work around IE7 z-index bug (not perfect, hence IE7 not really being supported)\r\n            if (ie && ie_version < 8) { d.gutters.style.zIndex = -1; d.scroller.style.paddingRight = 0; }\r\n            if (!webkit && !(gecko && mobile)) d.scroller.draggable = true;\r\n\r\n            if (place) {\r\n              if (place.appendChild) {\r\n                place.appendChild(d.wrapper);\r\n              } else {\r\n                place(d.wrapper);\r\n              }\r\n            }\r\n\r\n            // Current rendered range (may be bigger than the view window).\r\n            d.viewFrom = d.viewTo = doc.first;\r\n            d.reportedViewFrom = d.reportedViewTo = doc.first;\r\n            // Information about the rendered lines.\r\n            d.view = [];\r\n            d.renderedView = null;\r\n            // Holds info about a single rendered line when it was rendered\r\n            // for measurement, while not in view.\r\n            d.externalMeasured = null;\r\n            // Empty space (in pixels) above the view\r\n            d.viewOffset = 0;\r\n            d.lastWrapHeight = d.lastWrapWidth = 0;\r\n            d.updateLineNumbers = null;\r\n\r\n            d.nativeBarWidth = d.barHeight = d.barWidth = 0;\r\n            d.scrollbarsClipped = false;\r\n\r\n            // Used to only resize the line number gutter when necessary (when\r\n            // the amount of lines crosses a boundary that makes its width change)\r\n            d.lineNumWidth = d.lineNumInnerWidth = d.lineNumChars = null;\r\n            // Set to true when a non-horizontal-scrolling line widget is\r\n            // added. As an optimization, line widget aligning is skipped when\r\n            // this is false.\r\n            d.alignWidgets = false;\r\n\r\n            d.cachedCharWidth = d.cachedTextHeight = d.cachedPaddingH = null;\r\n\r\n            // Tracks the maximum line length so that the horizontal scrollbar\r\n            // can be kept static when scrolling.\r\n            d.maxLine = null;\r\n            d.maxLineLength = 0;\r\n            d.maxLineChanged = false;\r\n\r\n            // Used for measuring wheel scrolling granularity\r\n            d.wheelDX = d.wheelDY = d.wheelStartX = d.wheelStartY = null;\r\n\r\n            // True when shift is held down.\r\n            d.shift = false;\r\n\r\n            // Used to track whether anything happened since the context menu\r\n            // was opened.\r\n            d.selForContextMenu = null;\r\n\r\n            d.activeTouch = null;\r\n\r\n            input.init(d);\r\n        },\r\n\r\n        // Return true when the given mouse event happened in a widget\r\n        eventInWidget : function (e) {\r\n            var display = this;\r\n            for (var n = e_target(e); n != display.wrapper; n = n.parentNode) {\r\n              if (!n || (n.nodeType == 1 && n.getAttribute(\"cm-ignore-events\") == \"true\") ||\r\n                  (n.parentNode == display.sizer && n != display.mover))\r\n                return true;\r\n            }\r\n        },\r\n\r\n        paddingTop : function () {\r\n            var display = this;\r\n\r\n            return display.lineSpace.offsetTop;\r\n        },\r\n\r\n        paddingVert : function () {\r\n            var display = this;\r\n\r\n            return display.mover.offsetHeight - display.lineSpace.offsetHeight;\r\n        },\r\n\r\n        paddingH : function () {\r\n            var display = this;\r\n\r\n            if (display.cachedPaddingH) return display.cachedPaddingH;\r\n            var e = dom.removeChildrenAndAdd(display.measure, dom.elt(\"pre\", \"x\"));\r\n            var style = window.getComputedStyle ? window.getComputedStyle(e) : e.currentStyle;\r\n            var data = {left: parseInt(style.paddingLeft), right: parseInt(style.paddingRight)};\r\n            if (!isNaN(data.left) && !isNaN(data.right)) display.cachedPaddingH = data;\r\n            return data;\r\n        },\r\n\r\n        // Compute the default text height.\r\n        textHeight : function () {\r\n            var display = this;\r\n\r\n            if (display.cachedTextHeight != null) return display.cachedTextHeight;\r\n            if (measureText == null) {\r\n              measureText = dom.elt(\"pre\");\r\n              // Measure a bunch of lines, for browsers that compute\r\n              // fractional heights.\r\n              for (var i = 0; i < 49; ++i) {\r\n                measureText.appendChild(document.createTextNode(\"x\"));\r\n                measureText.appendChild(dom.elt(\"br\"));\r\n              }\r\n              measureText.appendChild(document.createTextNode(\"x\"));\r\n            }\r\n            dom.removeChildrenAndAdd(display.measure, measureText);\r\n            var height = measureText.offsetHeight / 50;\r\n            if (height > 3) display.cachedTextHeight = height;\r\n            removeChildren(display.measure);\r\n            return height || 1;\r\n        },\r\n\r\n        // Compute the default character width.\r\n        charWidth : function () {\r\n            var display = this;\r\n\r\n            if (display.cachedCharWidth != null) return display.cachedCharWidth;\r\n            \r\n            var anchor = dom.elt(\"span\", \"xxxxxxxxxx\");\r\n            var pre = dom.elt(\"pre\", [anchor]);\r\n            dom.removeChildrenAndAdd(display.measure, pre);\r\n            var rect = anchor.getBoundingClientRect(), width = (rect.right - rect.left) / 10;\r\n            if (width > 2) display.cachedCharWidth = width;\r\n            return width || 10;\r\n        }\r\n            \r\n    });\r\n\r\n    return Display;\r\n\r\n});\r\n"]}