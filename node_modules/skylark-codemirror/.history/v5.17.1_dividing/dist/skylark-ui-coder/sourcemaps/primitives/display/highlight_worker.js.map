{"version":3,"sources":["primitives/display/highlight_worker.js"],"names":["define","CoderCtor","partial","startWorker","time","cm","this","doc","mode","startState","frontier","display","viewTo","state","highlight","set","highlightWorker","first","end","Date","options","workTime","copyState","getStateBefore","changedLines","iter","Math","min","size","line","viewFrom","oldStyles","styles","tooLong","text","length","maxHighlightLength","highlighted","ighlightLine","oldCls","styleClasses","newCls","classes","ischange","bgClass","textClass","i","push","stateAfter","processLine","workDelay","runInOp","regLineChange"],"mappings":";;;;;;;AAAAA,QACE,gBACA,SAASC,GAETA,EAAUC,SACRC,YAAc,SAAUC,GACtB,GAAIC,GAAKC,IACLD,GAAGE,IAAIC,KAAKC,YAAcJ,EAAGE,IAAIG,SAAWL,EAAGM,QAAQC,QACzDP,EAAGQ,MAAMC,UAAUC,IAAIX,EAAM,WAC3BC,EAAGW,qBAKTA,gBAAkB,WAChB,GAAIX,GAAKC,KAELC,EAAMF,EAAGE,GAEb,IADIA,EAAIG,SAAWH,EAAIU,QAAOV,EAAIG,SAAWH,EAAIU,SAC7CV,EAAIG,UAAYL,EAAGM,QAAQC,QAA/B,CACA,GAAIM,IAAO,GAAIC,MAAOd,EAAGe,QAAQC,SAC7BR,EAAQS,UAAUf,EAAIC,KAAMe,eAAelB,EAAIE,EAAIG,WACnDc,IAEJjB,GAAIkB,KAAKlB,EAAIG,SAAUgB,KAAKC,IAAIpB,EAAIU,MAAQV,EAAIqB,KAAMvB,EAAGM,QAAQC,OAAS,KAAM,SAASiB,GACvF,GAAItB,EAAIG,UAAYL,EAAGM,QAAQmB,SAAU,CACvC,GAAIC,GAAYF,EAAKG,OAAQC,EAAUJ,EAAKK,KAAKC,OAAS9B,EAAGe,QAAQgB,mBACjEC,EAAchC,EAAGiC,aAAaT,EAAMI,EAAUX,UAAUf,EAAIC,KAAMK,GAASA,GAAO,EACtFgB,GAAKG,OAASK,EAAYL,MAC1B,IAAIO,GAASV,EAAKW,aAAcC,EAASJ,EAAYK,OACjDD,GAAQZ,EAAKW,aAAeC,EACvBF,IAAQV,EAAKW,aAAe,KAGrC,KAAK,GAFDG,IAAYZ,GAAaA,EAAUI,QAAUN,EAAKG,OAAOG,QAC3DI,GAAUE,KAAYF,IAAWE,GAAUF,EAAOK,SAAWH,EAAOG,SAAWL,EAAOM,WAAaJ,EAAOI,WACnGC,EAAI,GAAIH,GAAYG,EAAIf,EAAUI,SAAUW,EAAGH,EAAWZ,EAAUe,IAAMjB,EAAKG,OAAOc,EAC3FH,IAAUnB,EAAauB,KAAKxC,EAAIG,UACpCmB,EAAKmB,WAAaf,EAAUpB,EAAQS,UAAUf,EAAIC,KAAMK,OAEpDgB,GAAKK,KAAKC,QAAU9B,EAAGe,QAAQgB,oBACjCa,YAAY5C,EAAIwB,EAAKK,KAAMrB,GAC7BgB,EAAKmB,WAAazC,EAAIG,SAAW,GAAK,EAAIY,UAAUf,EAAIC,KAAMK,GAAS,IAGzE,MADEN,EAAIG,UACD,GAAIS,MAAOD,EAEd,MADAb,GAAGF,YAAYE,EAAGe,QAAQ8B,YACnB,IAGP1B,EAAaW,QAAQgB,QAAQ9C,EAAI,WACnC,IAAK,GAAIyC,GAAI,EAAGA,EAAItB,EAAaW,OAAQW,IACvCzC,EAAG+C,cAAc5B,EAAasB,GAAI","file":"../../../primitives/display/highlight_worker.js","sourcesContent":["define([\r\n  \"../CoderCtor\"\r\n],function(CoderCtor) {\r\n  // HIGHLIGHT WORKER\r\n  CoderCtor.partial({\r\n    startWorker : function (time) {\r\n      var cm = this;\r\n      if (cm.doc.mode.startState && cm.doc.frontier < cm.display.viewTo) {\r\n        cm.state.highlight.set(time, function(){\r\n          cm.highlightWorker()\r\n        });\r\n      }\r\n    },\r\n\r\n    highlightWorker : function () {\r\n      var cm = this;\r\n\r\n      var doc = cm.doc;\r\n      if (doc.frontier < doc.first) doc.frontier = doc.first;\r\n      if (doc.frontier >= cm.display.viewTo) return;\r\n      var end = +new Date + cm.options.workTime;\r\n      var state = copyState(doc.mode, getStateBefore(cm, doc.frontier));\r\n      var changedLines = [];\r\n\r\n      doc.iter(doc.frontier, Math.min(doc.first + doc.size, cm.display.viewTo + 500), function(line) {\r\n        if (doc.frontier >= cm.display.viewFrom) { // Visible\r\n          var oldStyles = line.styles, tooLong = line.text.length > cm.options.maxHighlightLength;\r\n          var highlighted = cm.ighlightLine(line, tooLong ? copyState(doc.mode, state) : state, true);\r\n          line.styles = highlighted.styles;\r\n          var oldCls = line.styleClasses, newCls = highlighted.classes;\r\n          if (newCls) line.styleClasses = newCls;\r\n          else if (oldCls) line.styleClasses = null;\r\n          var ischange = !oldStyles || oldStyles.length != line.styles.length ||\r\n            oldCls != newCls && (!oldCls || !newCls || oldCls.bgClass != newCls.bgClass || oldCls.textClass != newCls.textClass);\r\n          for (var i = 0; !ischange && i < oldStyles.length; ++i) ischange = oldStyles[i] != line.styles[i];\r\n          if (ischange) changedLines.push(doc.frontier);\r\n          line.stateAfter = tooLong ? state : copyState(doc.mode, state);\r\n        } else {\r\n          if (line.text.length <= cm.options.maxHighlightLength)\r\n            processLine(cm, line.text, state);\r\n          line.stateAfter = doc.frontier % 5 == 0 ? copyState(doc.mode, state) : null;\r\n        }\r\n        ++doc.frontier;\r\n        if (+new Date > end) {\r\n          cm.startWorker(cm.options.workDelay);\r\n          return true;\r\n        }\r\n      });\r\n      if (changedLines.length) runInOp(cm, function() {\r\n        for (var i = 0; i < changedLines.length; i++)\r\n          cm.regLineChange(changedLines[i], \"text\");\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n"]}