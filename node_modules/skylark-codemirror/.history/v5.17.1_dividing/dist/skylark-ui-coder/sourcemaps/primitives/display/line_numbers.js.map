{"version":3,"sources":["primitives/display/line_numbers.js"],"names":["define","dom","CoderCtor","partial","alignHorizontally","cm","this","display","view","alignWidgets","gutters","firstChild","options","fixedGutter","comp","compensateForHScroll","scroller","scrollLeft","doc","gutterW","offsetWidth","left","i","length","hidden","gutter","style","gutterBackground","align","alignable","j","maybeUpdateLineNumberWidth","lineNumbers","last","lineNumberFor","first","size","lineNumChars","test","measure","appendChild","elt","innerW","padding","lineGutter","width","lineNumInnerWidth","Math","max","lineNumWidth","updateGutterSpace","String","lineNumberFormatter","firstLineNumber","getBoundingClientRect","sizer"],"mappings":";;;;;;;AAAAA,QACE,cACA,gBACA,SAASC,EAAIC,GAGbA,EAAUC,SAGRC,kBAAoB,WAClB,GAAIC,GAAKC,KACLC,EAAUF,EAAGE,QAASC,EAAOD,EAAQC,IACzC,IAAKD,EAAQE,cAAkBF,EAAQG,QAAQC,YAAeN,EAAGO,QAAQC,YAAzE,CAGA,IAAK,GAFDC,GAAOT,EAAGU,qBAAqBR,GAAWA,EAAQS,SAASC,WAAaZ,EAAGa,IAAID,WAC/EE,EAAUZ,EAAQG,QAAQU,YAAaC,EAAOP,EAAO,KAChDQ,EAAI,EAAGA,EAAId,EAAKe,OAAQD,IAAK,IAAKd,EAAKc,GAAGE,OAAQ,CACrDnB,EAAGO,QAAQC,cACTL,EAAKc,GAAGG,SACVjB,EAAKc,GAAGG,OAAOC,MAAML,KAAOA,GAC1Bb,EAAKc,GAAGK,mBACVnB,EAAKc,GAAGK,iBAAiBD,MAAML,KAAOA,GAE1C,IAAIO,GAAQpB,EAAKc,GAAGO,SACpB,IAAID,EAAO,IAAK,GAAIE,GAAI,EAAGA,EAAIF,EAAML,OAAQO,IAC3CF,EAAME,GAAGJ,MAAML,KAAOA,EAEtBhB,EAAGO,QAAQC,cACbN,EAAQG,QAAQgB,MAAML,KAAQP,EAAOK,EAAW,QAMpDY,2BAA6B,WAC3B,GAAI1B,GAAKC,IAET,KAAKD,EAAGO,QAAQoB,YAAa,OAAO,CACpC,IAAId,GAAMb,EAAGa,IAAKe,EAAO5B,EAAG6B,cAAc7B,EAAGO,QAASM,EAAIiB,MAAQjB,EAAIkB,KAAO,GAAI7B,EAAUF,EAAGE,OAC9F,IAAI0B,EAAKV,QAAUhB,EAAQ8B,aAAc,CACvC,GAAIC,GAAO/B,EAAQgC,QAAQC,YAAYC,IAAI,OAAQA,IAAI,MAAOR,IACnB,gDACvCS,EAASJ,EAAK3B,WAAWS,YAAauB,EAAUL,EAAKlB,YAAcsB,CAOvE,OANAnC,GAAQqC,WAAWlB,MAAMmB,MAAQ,GACjCtC,EAAQuC,kBAAoBC,KAAKC,IAAIN,EAAQnC,EAAQqC,WAAWxB,YAAcuB,GAAW,EACzFpC,EAAQ0C,aAAe1C,EAAQuC,kBAAoBH,EACnDpC,EAAQ8B,aAAe9B,EAAQuC,kBAAoBb,EAAKV,UACxDhB,EAAQqC,WAAWlB,MAAMmB,MAAQtC,EAAQ0C,aAAe,KACxDC,kBAAkB7C,IACX,EAET,OAAO,GAGT6B,cAAe,SAAUtB,EAASU,GAChC,MAAO6B,QAAOvC,EAAQwC,oBAAoB9B,EAAIV,EAAQyC,mBAMxDtC,qBAAuB,SAAUR,GAC/B,MAAOA,GAAQS,SAASsC,wBAAwBjC,KAAOd,EAAQgD,MAAMD,wBAAwBjC","file":"../../../primitives/display/line_numbers.js","sourcesContent":["define([\r\n  \"../util/dom\",\r\n  \"../CoderCtor\"\r\n],function(dom,CoderCtor) {\r\n  // LINE NUMBERS\r\n\r\n  CoderCtor.partial({\r\n    // Re-align line numbers and gutter marks to compensate for\r\n    // horizontal scrolling.\r\n    alignHorizontally : function () {\r\n      var cm = this;\r\n      var display = cm.display, view = display.view;\r\n      if (!display.alignWidgets && (!display.gutters.firstChild || !cm.options.fixedGutter)) return;\r\n      var comp = cm.compensateForHScroll(display) - display.scroller.scrollLeft + cm.doc.scrollLeft;\r\n      var gutterW = display.gutters.offsetWidth, left = comp + \"px\";\r\n      for (var i = 0; i < view.length; i++) if (!view[i].hidden) {\r\n        if (cm.options.fixedGutter) {\r\n          if (view[i].gutter)\r\n            view[i].gutter.style.left = left;\r\n          if (view[i].gutterBackground)\r\n            view[i].gutterBackground.style.left = left;\r\n        }\r\n        var align = view[i].alignable;\r\n        if (align) for (var j = 0; j < align.length; j++)\r\n          align[j].style.left = left;\r\n      }\r\n      if (cm.options.fixedGutter)\r\n        display.gutters.style.left = (comp + gutterW) + \"px\";\r\n    },\r\n\r\n    // Used to ensure that the line number gutter is still the right\r\n    // size for the current document size. Returns true when an update\r\n    // is needed.\r\n    maybeUpdateLineNumberWidth : function () {\r\n      var cm = this;\r\n\r\n      if (!cm.options.lineNumbers) return false;\r\n      var doc = cm.doc, last = cm.lineNumberFor(cm.options, doc.first + doc.size - 1), display = cm.display;\r\n      if (last.length != display.lineNumChars) {\r\n        var test = display.measure.appendChild(elt(\"div\", [elt(\"div\", last)],\r\n                                                   \"CodeMirror-linenumber CodeMirror-gutter-elt\"));\r\n        var innerW = test.firstChild.offsetWidth, padding = test.offsetWidth - innerW;\r\n        display.lineGutter.style.width = \"\";\r\n        display.lineNumInnerWidth = Math.max(innerW, display.lineGutter.offsetWidth - padding) + 1;\r\n        display.lineNumWidth = display.lineNumInnerWidth + padding;\r\n        display.lineNumChars = display.lineNumInnerWidth ? last.length : -1;\r\n        display.lineGutter.style.width = display.lineNumWidth + \"px\";\r\n        updateGutterSpace(cm);\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n\r\n    lineNumberFor :function (options, i) {\r\n      return String(options.lineNumberFormatter(i + options.firstLineNumber));\r\n    },\r\n\r\n    // Computes display.scroller.scrollLeft + display.gutters.offsetWidth,\r\n    // but using getBoundingClientRect to get a sub-pixel-accurate\r\n    // result.\r\n    compensateForHScroll : function (display) {\r\n      return display.scroller.getBoundingClientRect().left - display.sizer.getBoundingClientRect().left;\r\n    }\r\n  });\r\n\r\n});\r\n"]}