{"version":3,"sources":["primitives/display/update_line.js"],"names":["define","dom","CoderCtor","elt","partial","updateLineForChanges","lineView","lineN","dims","cm","this","j","changes","length","type","updateLineText","updateLineGutter","updateLineClasses","updateLineWidgets","ensureLineWrapped","node","text","parentNode","replaceChild","appendChild","ie","ie_version","style","zIndex","updateLineBackground","cls","bgClass","line","background","className","removeChild","wrap","insertBefore","firstChild","getLineContent","ext","display","externalMeasured","measure","built","buildLineContent","pre","textClass","wrapClass","gutter","gutterBackground","gutterClass","options","fixedGutter","fixedPos","gutterTotalWidth","markers","gutterMarkers","lineNumbers","gutterWrap","input","setUneditable","lineNumber","lineNumberFor","gutterLeft","lineNumInnerWidth","k","gutters","id","found","hasOwnProperty","gutterWidth","alignable","next","nextSibling","insertLineWidgets","buildLineElement","insertLineWidgetsFor","rest","i","allowAbove","widgets","ws","widget","handleMouseEvents","setAttribute","positionLineWidget","above","signalLater","noHScroll","push","width","wrapperWidth","left","coverGutter","paddingLeft","position","marginLeft"],"mappings":"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","file":"../../../primitives/display/update_line.js","sourcesContent":["define([\r\n  \"../util/dom\",\r\n  \"../CoderCtor\"\r\n],function(dom,CoderCtor) {\r\n  var elt = dom.elt;\r\n\r\n  CoderCtor.partial({\r\n    // When an aspect of a line changes, a string is added to\r\n    // lineView.changes. This updates the relevant part of the line's\r\n    // DOM structure.\r\n    updateLineForChanges : function (lineView, lineN, dims) {\r\n      var cm = this;\r\n      for (var j = 0; j < lineView.changes.length; j++) {\r\n        var type = lineView.changes[j];\r\n        if (type == \"text\") {\r\n          cm.updateLineText(lineView);\r\n        } else if (type == \"gutter\") {\r\n          cm.updateLineGutter(lineView, lineN, dims);\r\n        } else if (type == \"class\") {\r\n          cm.updateLineClasses(lineView);\r\n        } else if (type == \"widget\") {\r\n          cm.updateLineWidgets(lineView, dims);\r\n        }\r\n      }\r\n      lineView.changes = null;\r\n    },\r\n\r\n    // Lines with gutter elements, widgets or a background class need to\r\n    // be wrapped, and have the extra elements added to the wrapper div\r\n   ensureLineWrapped :function (lineView) {\r\n      if (lineView.node == lineView.text) {\r\n        lineView.node = elt(\"div\", null, null, \"position: relative\");\r\n        if (lineView.text.parentNode)\r\n          lineView.text.parentNode.replaceChild(lineView.node, lineView.text);\r\n        lineView.node.appendChild(lineView.text);\r\n        if (ie && ie_version < 8) lineView.node.style.zIndex = 2;\r\n      }\r\n      return lineView.node;\r\n    },\r\n\r\n    updateLineBackground : function (lineView) {\r\n      var cls = lineView.bgClass ? lineView.bgClass + \" \" + (lineView.line.bgClass || \"\") : lineView.line.bgClass;\r\n      if (cls) cls += \" CodeMirror-linebackground\";\r\n      if (lineView.background) {\r\n        if (cls) lineView.background.className = cls;\r\n        else { lineView.background.parentNode.removeChild(lineView.background); lineView.background = null; }\r\n      } else if (cls) {\r\n        var wrap = this.ensureLineWrapped(lineView);\r\n        lineView.background = wrap.insertBefore(elt(\"div\", null, cls), wrap.firstChild);\r\n      }\r\n    },\r\n\r\n    // Wrapper around buildLineContent which will reuse the structure\r\n    // in display.externalMeasured when possible.\r\n    getLineContent : function (lineView) {\r\n      var cm = this;\r\n      var ext = cm.display.externalMeasured;\r\n      if (ext && ext.line == lineView.line) {\r\n        cm.display.externalMeasured = null;\r\n        lineView.measure = ext.measure;\r\n        return ext.built;\r\n      }\r\n      return cm.buildLineContent(lineView);\r\n    },\r\n\r\n    // Redraw the line's text. Interacts with the background and text\r\n    // classes because the mode may output tokens that influence these\r\n    // classes.\r\n    updateLineText : function (lineView) {\r\n      var cm = this;\r\n      var cls = lineView.text.className;\r\n      var built = getLineContent(cm, lineView);\r\n      if (lineView.text == lineView.node) lineView.node = built.pre;\r\n      lineView.text.parentNode.replaceChild(built.pre, lineView.text);\r\n      lineView.text = built.pre;\r\n      if (built.bgClass != lineView.bgClass || built.textClass != lineView.textClass) {\r\n        lineView.bgClass = built.bgClass;\r\n        lineView.textClass = built.textClass;\r\n        this.updateLineClasses(lineView);\r\n      } else if (cls) {\r\n        lineView.text.className = cls;\r\n      }\r\n    },\r\n\r\n    updateLineClasses :function (lineView) {\r\n      updateLineBackground(lineView);\r\n      if (lineView.line.wrapClass)\r\n        ensureLineWrapped(lineView).className = lineView.line.wrapClass;\r\n      else if (lineView.node != lineView.text)\r\n        lineView.node.className = \"\";\r\n      var textClass = lineView.textClass ? lineView.textClass + \" \" + (lineView.line.textClass || \"\") : lineView.line.textClass;\r\n      lineView.text.className = textClass || \"\";\r\n    },\r\n\r\n    updateLineGutter : function (lineView, lineN, dims) {\r\n      var cm = this;\r\n      if (lineView.gutter) {\r\n        lineView.node.removeChild(lineView.gutter);\r\n        lineView.gutter = null;\r\n      }\r\n      if (lineView.gutterBackground) {\r\n        lineView.node.removeChild(lineView.gutterBackground);\r\n        lineView.gutterBackground = null;\r\n      }\r\n      if (lineView.line.gutterClass) {\r\n        var wrap = ensureLineWrapped(lineView);\r\n        lineView.gutterBackground = elt(\"div\", null, \"CodeMirror-gutter-background \" + lineView.line.gutterClass,\r\n                                        \"left: \" + (cm.options.fixedGutter ? dims.fixedPos : -dims.gutterTotalWidth) +\r\n                                        \"px; width: \" + dims.gutterTotalWidth + \"px\");\r\n        wrap.insertBefore(lineView.gutterBackground, lineView.text);\r\n      }\r\n      var markers = lineView.line.gutterMarkers;\r\n      if (cm.options.lineNumbers || markers) {\r\n        var wrap = ensureLineWrapped(lineView);\r\n        var gutterWrap = lineView.gutter = elt(\"div\", null, \"CodeMirror-gutter-wrapper\", \"left: \" +\r\n                                               (cm.options.fixedGutter ? dims.fixedPos : -dims.gutterTotalWidth) + \"px\");\r\n        cm.display.input.setUneditable(gutterWrap);\r\n        wrap.insertBefore(gutterWrap, lineView.text);\r\n        if (lineView.line.gutterClass)\r\n          gutterWrap.className += \" \" + lineView.line.gutterClass;\r\n        if (cm.options.lineNumbers && (!markers || !markers[\"CodeMirror-linenumbers\"]))\r\n          lineView.lineNumber = gutterWrap.appendChild(\r\n            elt(\"div\", cm.lineNumberFor(cm.options, lineN),\r\n                \"CodeMirror-linenumber CodeMirror-gutter-elt\",\r\n                \"left: \" + dims.gutterLeft[\"CodeMirror-linenumbers\"] + \"px; width: \"\r\n                + cm.display.lineNumInnerWidth + \"px\"));\r\n        if (markers) for (var k = 0; k < cm.options.gutters.length; ++k) {\r\n          var id = cm.options.gutters[k], found = markers.hasOwnProperty(id) && markers[id];\r\n          if (found)\r\n            gutterWrap.appendChild(elt(\"div\", [found], \"CodeMirror-gutter-elt\", \"left: \" +\r\n                                       dims.gutterLeft[id] + \"px; width: \" + dims.gutterWidth[id] + \"px\"));\r\n        }\r\n      }\r\n    },\r\n\r\n    updateLineWidgets : function (lineView, dims) {\r\n      var cm = this;\r\n      if (lineView.alignable) lineView.alignable = null;\r\n      for (var node = lineView.node.firstChild, next; node; node = next) {\r\n        var next = node.nextSibling;\r\n        if (node.className == \"CodeMirror-linewidget\")\r\n          lineView.node.removeChild(node);\r\n      }\r\n      cm.insertLineWidgets(lineView, dims);\r\n    },\r\n\r\n    // Build a line's DOM representation from scratch\r\n    buildLineElement : function (lineView, lineN, dims) {\r\n      var cm = this;\r\n      var built = cm.getLineContent(lineView);\r\n      lineView.text = lineView.node = built.pre;\r\n      if (built.bgClass) lineView.bgClass = built.bgClass;\r\n      if (built.textClass) lineView.textClass = built.textClass;\r\n\r\n      cm.updateLineClasses(lineView);\r\n      cm.updateLineGutter(lineView, lineN, dims);\r\n      cm.insertLineWidgets(lineView, dims);\r\n      return lineView.node;\r\n    },\r\n\r\n    // A lineView may contain multiple logical lines (when merged by\r\n    // collapsed spans). The widgets for all of them need to be drawn.\r\n    insertLineWidgets : function (lineView, dims) {\r\n      var cm = this;\r\n      cm.insertLineWidgetsFor(lineView.line, lineView, dims, true);\r\n      if (lineView.rest) for (var i = 0; i < lineView.rest.length; i++)\r\n        cm.insertLineWidgetsFor(cm, lineView.rest[i], lineView, dims, false);\r\n    },\r\n\r\n    insertLineWidgetsFor : function (line, lineView, dims, allowAbove) {\r\n      var cm = this;\r\n      if (!line.widgets) return;\r\n      var wrap = cm.ensureLineWrapped(lineView);\r\n      for (var i = 0, ws = line.widgets; i < ws.length; ++i) {\r\n        var widget = ws[i], node = elt(\"div\", [widget.node], \"CodeMirror-linewidget\");\r\n        if (!widget.handleMouseEvents) node.setAttribute(\"cm-ignore-events\", \"true\");\r\n        cm.positionLineWidget(widget, node, lineView, dims);\r\n        cm.display.input.setUneditable(node);\r\n        if (allowAbove && widget.above)\r\n          wrap.insertBefore(node, lineView.gutter || lineView.text);\r\n        else\r\n          wrap.appendChild(node);\r\n        cm.signalLater(widget, \"redraw\");\r\n      }\r\n    },\r\n\r\n    positionLineWidget : function (widget, node, lineView, dims) {\r\n      if (widget.noHScroll) {\r\n        (lineView.alignable || (lineView.alignable = [])).push(node);\r\n        var width = dims.wrapperWidth;\r\n        node.style.left = dims.fixedPos + \"px\";\r\n        if (!widget.coverGutter) {\r\n          width -= dims.gutterTotalWidth;\r\n          node.style.paddingLeft = dims.gutterTotalWidth + \"px\";\r\n        }\r\n        node.style.width = width + \"px\";\r\n      }\r\n      if (widget.coverGutter) {\r\n        node.style.zIndex = 5;\r\n        node.style.position = \"relative\";\r\n        if (!widget.noHScroll) node.style.marginLeft = -dims.gutterTotalWidth + \"px\";\r\n      }\r\n    }\r\n  });\r\n\r\n});\r\n"]}