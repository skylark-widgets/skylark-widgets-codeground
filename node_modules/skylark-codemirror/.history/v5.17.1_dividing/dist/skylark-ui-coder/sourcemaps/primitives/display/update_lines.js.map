{"version":3,"sources":["primitives/display/update_lines.js"],"names":["define","CoderCtor","partial","updateHeightsInViewport","cm","this","display","prevBottom","lineDiv","offsetTop","i","view","length","height","cur","hidden","ie","ie_version","bot","node","offsetHeight","box","getBoundingClientRect","bottom","top","diff","line","textHeight","updateLineHeight","updateWidgetHeight","rest","j","widgets","parentNode","visibleLines","doc","viewport","Math","max","scroller","scrollTop","floor","paddingTop","wrapper","clientHeight","from","lineAtHeight","to","ensure","ensureFrom","ensureTo","heightAtLine","getLine","min","lastLine"],"mappings":";;;;;;;AAAAA,QACE,gBACA,SAASC,GACTA,EAAUC,SAGRC,wBAA0B,WAKxB,IAAK,GAJDC,GAAKC,KAELC,EAAUF,EAAGE,QACbC,EAAaD,EAAQE,QAAQC,UACxBC,EAAI,EAAGA,EAAIJ,EAAQK,KAAKC,OAAQF,IAAK,CAC5C,GAA2BG,GAAvBC,EAAMR,EAAQK,KAAKD,EACvB,KAAII,EAAIC,OAAR,CACA,GAAIC,IAAMC,WAAa,EAAG,CACxB,GAAIC,GAAMJ,EAAIK,KAAKV,UAAYK,EAAIK,KAAKC,YACxCP,GAASK,EAAMX,EACfA,EAAaW,MACR,CACL,GAAIG,GAAMP,EAAIK,KAAKG,uBACnBT,GAASQ,EAAIE,OAASF,EAAIG,IAE5B,GAAIC,GAAOX,EAAIY,KAAKb,OAASA,CAE7B,IADIA,EAAS,IAAGA,EAASc,WAAWrB,KAChCmB,EAAO,MAAQA,WACjBrB,EAAGwB,iBAAiBd,EAAIY,KAAMb,GAC9BT,EAAGyB,mBAAmBf,EAAIY,MACtBZ,EAAIgB,MAAM,IAAK,GAAIC,GAAI,EAAGA,EAAIjB,EAAIgB,KAAKlB,OAAQmB,IACjD3B,EAAGyB,mBAAmBf,EAAIgB,KAAKC,OAOvCF,mBAAqB,SAAUH,GAC7B,GAAIA,EAAKM,QACP,IAAK,GAAItB,GAAI,EAAGA,EAAIgB,EAAKM,QAAQpB,SAAUF,EACzCgB,EAAKM,QAAQtB,GAAGG,OAASa,EAAKM,QAAQtB,GAAGS,KAAKc,WAAWb,cAQ/Dc,aAAe,SAAU5B,EAAS6B,EAAKC,GACrC,GAAIZ,GAAMY,GAA4B,MAAhBA,EAASZ,IAAca,KAAKC,IAAI,EAAGF,EAASZ,KAAOlB,EAAQiC,SAASC,SAC1FhB,GAAMa,KAAKI,MAAMjB,EAAMkB,WAAWpC,GAClC,IAAIiB,GAASa,GAA+B,MAAnBA,EAASb,OAAiBa,EAASb,OAASC,EAAMlB,EAAQqC,QAAQC,aAEvFC,EAAOxC,KAAKyC,aAAaX,EAAKX,GAAMuB,EAAK1C,KAAKyC,aAAaX,EAAKZ,EAGpE,IAAIa,GAAYA,EAASY,OAAQ,CAC/B,GAAIC,GAAab,EAASY,OAAOH,KAAKnB,KAAMwB,EAAWd,EAASY,OAAOD,GAAGrB,IACtEuB,GAAaJ,GACfA,EAAOI,EACPF,EAAK1C,KAAKyC,aAAaX,EAAK9B,KAAK8C,aAAa9C,KAAK+C,QAAQjB,EAAKc,IAAe3C,EAAQqC,QAAQC,eACtFP,KAAKgB,IAAIH,EAAUf,EAAImB,aAAeP,IAC/CF,EAAOxC,KAAKyC,aAAaX,EAAK9B,KAAK8C,aAAa9C,KAAK+C,QAAQjB,EAAKe,IAAa5C,EAAQqC,QAAQC,cAC/FG,EAAKG,GAGT,OAAQL,KAAMA,EAAME,GAAIV,KAAKC,IAAIS,EAAIF,EAAO","file":"../../../primitives/display/update_lines.js","sourcesContent":["define([\r\n  \"../CoderCtor\"\r\n],function(CoderCtor) {\r\n  CoderCtor.partial({\r\n    // Read the actual heights of the rendered lines, and update their\r\n    // stored heights to match.\r\n    updateHeightsInViewport : function () {\r\n      var cm = this;\r\n\r\n      var display = cm.display;\r\n      var prevBottom = display.lineDiv.offsetTop;\r\n      for (var i = 0; i < display.view.length; i++) {\r\n        var cur = display.view[i], height;\r\n        if (cur.hidden) continue;\r\n        if (ie && ie_version < 8) {\r\n          var bot = cur.node.offsetTop + cur.node.offsetHeight;\r\n          height = bot - prevBottom;\r\n          prevBottom = bot;\r\n        } else {\r\n          var box = cur.node.getBoundingClientRect();\r\n          height = box.bottom - box.top;\r\n        }\r\n        var diff = cur.line.height - height;\r\n        if (height < 2) height = textHeight(display);\r\n        if (diff > .001 || diff < -.001) {\r\n          cm.updateLineHeight(cur.line, height);\r\n          cm.updateWidgetHeight(cur.line);\r\n          if (cur.rest) for (var j = 0; j < cur.rest.length; j++)\r\n            cm.updateWidgetHeight(cur.rest[j]);\r\n        }\r\n      }\r\n    },\r\n\r\n    // Read and store the height of line widgets associated with the\r\n    // given line.\r\n    updateWidgetHeight : function (line) {\r\n      if (line.widgets) {\r\n        for (var i = 0; i < line.widgets.length; ++i) {\r\n          line.widgets[i].height = line.widgets[i].node.parentNode.offsetHeight;\r\n        }\r\n      }\r\n    },\r\n\r\n    // Compute the lines that are visible in a given viewport (defaults\r\n    // the the current scroll position). viewport may contain top,\r\n    // height, and ensure (see op.scrollToPos) properties.\r\n    visibleLines : function (display, doc, viewport) {\r\n      var top = viewport && viewport.top != null ? Math.max(0, viewport.top) : display.scroller.scrollTop;\r\n      top = Math.floor(top - paddingTop(display));\r\n      var bottom = viewport && viewport.bottom != null ? viewport.bottom : top + display.wrapper.clientHeight;\r\n\r\n      var from = this.lineAtHeight(doc, top), to = this.lineAtHeight(doc, bottom);\r\n      // Ensure is a {from: {line, ch}, to: {line, ch}} object, and\r\n      // forces those lines into the viewport (if possible).\r\n      if (viewport && viewport.ensure) {\r\n        var ensureFrom = viewport.ensure.from.line, ensureTo = viewport.ensure.to.line;\r\n        if (ensureFrom < from) {\r\n          from = ensureFrom;\r\n          to = this.lineAtHeight(doc, this.heightAtLine(this.getLine(doc, ensureFrom)) + display.wrapper.clientHeight);\r\n        } else if (Math.min(ensureTo, doc.lastLine()) >= to) {\r\n          from = this.lineAtHeight(doc, this.heightAtLine(this.getLine(doc, ensureTo)) - display.wrapper.clientHeight);\r\n          to = ensureTo;\r\n        }\r\n      }\r\n      return {from: from, to: Math.max(to, from + 1)};\r\n    }\r\n  });\r\n\r\n});\r\n"]}