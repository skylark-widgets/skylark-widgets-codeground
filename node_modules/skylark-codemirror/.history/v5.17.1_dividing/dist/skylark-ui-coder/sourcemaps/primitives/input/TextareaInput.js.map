{"version":3,"sources":["primitives/input/TextareaInput.js"],"names":["define","Evented","CoderCtor","hiddenTextarea","te","elt","div","webkit","style","width","setAttribute","ios","border","disableBrowserMagic","TextareaInput","inherit","klassName","_construct","cm","this","prevInput","pollingFast","polling","Delayed","inaccurateSelection","hasSelection","composing","init","display","prepareCopyCut","e","signalDOMEvent","somethingSelected","lastCopied","lineWise","text","getSelections","input","value","join","selectInput","options","lineWiseCopyCut","ranges","copyableRanges","type","setSelections","sel_dontScroll","state","cutIncoming","wrapper","textarea","firstChild","insertBefore","on","ie","ie_version","poll","handlePaste","pasteIncoming","fastPoll","scroller","eventInWidget","focus","lineSpace","e_preventDefault","start","getCursor","range","clear","markText","className","prepareSelection","doc","result","moveInputWithCursor","headPos","cursorCoords","sel","primary","head","wrapOff","getBoundingClientRect","lineOff","lineDiv","teTop","Math","max","min","clientHeight","top","teLeft","clientWidth","left","showSelection","drawn","removeChildrenAndAdd","cursorDiv","cursors","selectionDiv","selection","reset","typing","contextMenuPending","minimal","selected","hasCopyEvent","to","line","from","getSelection","length","content","focused","getField","supportsTouch","readOnly","mobile","activeElt","blur","resetPosition","receivedFocus","slowPoll","set","pollInterval","p","changed","missed","isReadOnly","disableInput","keySeq","mac","test","selForContextMenu","first","charCodeAt","execCommand","same","l","self","runInOp","applyTextInput","slice","indexOf","ensurePolled","onKeyPress","onContextMenu","prepareSelectAllHack","selectionStart","extval","selectionEnd","rehide","cssText","oldWrapperCSS","oldCSS","scrollbars","setScrollTop","scrollTop","scrollPos","i","operation","commands","selectAll","detectingSelectAll","setTimeout","pos","posFromMouse","presto","resetSelectionOnContextMenu","contains","setSelection","simpleSelection","wrapperBox","clientY","clientX","oldScrollY","window","scrollY","scrollTo","clearTimeout","captureRightClick","e_stop","mouseup","off","readOnlyChanged","val","setUneditable","nothing","needsContentAttribute"],"mappings":"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","file":"../../../primitives/input/TextareaInput.js","sourcesContent":["define([\r\n  \"skylark-langx/Evented\",\r\n  \"../CoderCtor\"\r\n],function(Evented,CoderCtor) {\r\n\r\n  // TEXTAREA INPUT STYLE\r\n  var TextareaInput = Evented.inherit({\r\n    klassName : \"TextareaInput\",\r\n    \r\n    _construct : function(cm) {\r\n      this.cm = cm;\r\n      // See input.poll and input.reset\r\n      this.prevInput = \"\";\r\n\r\n      // Flag that indicates whether we expect input to appear real soon\r\n      // now (after some event like 'keypress' or 'input') and are\r\n      // polling intensively.\r\n      this.pollingFast = false;\r\n      // Self-resetting timeout for the poller\r\n      this.polling = new Delayed();\r\n      // Tracks when input.reset has punted to just putting a short\r\n      // string into the textarea instead of the full selection.\r\n      this.inaccurateSelection = false;\r\n      // Used to work around IE issue with selection being forgotten when focus moves away from textarea\r\n      this.hasSelection = false;\r\n      this.composing = null;\r\n    },\r\n\r\n    init: function(display) {\r\n      var input = this, cm = this.cm;\r\n\r\n      // Wraps and hides input textarea\r\n      var div = this.wrapper = hiddenTextarea();\r\n      // The semihidden textarea that is focused when the editor is\r\n      // focused, and receives input.\r\n      var te = this.textarea = div.firstChild;\r\n      display.wrapper.insertBefore(div, display.wrapper.firstChild);\r\n\r\n      // Needed to hide big blue blinking cursor on Mobile Safari (doesn't seem to work in iOS 8 anymore)\r\n      if (ios) te.style.width = \"0px\";\r\n\r\n      on(te, \"input\", function() {\r\n        if (ie && ie_version >= 9 && input.hasSelection) input.hasSelection = null;\r\n        input.poll();\r\n      });\r\n\r\n      on(te, \"paste\", function(e) {\r\n        if (signalDOMEvent(cm, e) || handlePaste(e, cm)) return\r\n\r\n        cm.state.pasteIncoming = true;\r\n        input.fastPoll();\r\n      });\r\n\r\n      function prepareCopyCut(e) {\r\n        if (signalDOMEvent(cm, e)) return\r\n        if (cm.somethingSelected()) {\r\n          lastCopied = {lineWise: false, text: cm.getSelections()};\r\n          if (input.inaccurateSelection) {\r\n            input.prevInput = \"\";\r\n            input.inaccurateSelection = false;\r\n            te.value = lastCopied.text.join(\"\\n\");\r\n            selectInput(te);\r\n          }\r\n        } else if (!cm.options.lineWiseCopyCut) {\r\n          return;\r\n        } else {\r\n          var ranges = copyableRanges(cm);\r\n          lastCopied = {lineWise: true, text: ranges.text};\r\n          if (e.type == \"cut\") {\r\n            cm.setSelections(ranges.ranges, null, sel_dontScroll);\r\n          } else {\r\n            input.prevInput = \"\";\r\n            te.value = ranges.text.join(\"\\n\");\r\n            selectInput(te);\r\n          }\r\n        }\r\n        if (e.type == \"cut\") cm.state.cutIncoming = true;\r\n      }\r\n      on(te, \"cut\", prepareCopyCut);\r\n      on(te, \"copy\", prepareCopyCut);\r\n\r\n      on(display.scroller, \"paste\", function(e) {\r\n        if (eventInWidget(display, e) || signalDOMEvent(cm, e)) return;\r\n        cm.state.pasteIncoming = true;\r\n        input.focus();\r\n      });\r\n\r\n      // Prevent normal selection in the editor (we handle our own)\r\n      on(display.lineSpace, \"selectstart\", function(e) {\r\n        if (!eventInWidget(display, e)) e_preventDefault(e);\r\n      });\r\n\r\n      on(te, \"compositionstart\", function() {\r\n        var start = cm.getCursor(\"from\");\r\n        if (input.composing) input.composing.range.clear()\r\n        input.composing = {\r\n          start: start,\r\n          range: cm.markText(start, cm.getCursor(\"to\"), {className: \"CodeMirror-composing\"})\r\n        };\r\n      });\r\n      on(te, \"compositionend\", function() {\r\n        if (input.composing) {\r\n          input.poll();\r\n          input.composing.range.clear();\r\n          input.composing = null;\r\n        }\r\n      });\r\n    },\r\n\r\n    prepareSelection: function() {\r\n      // Redraw the selection and/or cursor\r\n      var cm = this.cm, display = cm.display, doc = cm.doc;\r\n      var result = prepareSelection(cm);\r\n\r\n      // Move the hidden textarea near the cursor to prevent scrolling artifacts\r\n      if (cm.options.moveInputWithCursor) {\r\n        var headPos = cursorCoords(cm, doc.sel.primary().head, \"div\");\r\n        var wrapOff = display.wrapper.getBoundingClientRect(), lineOff = display.lineDiv.getBoundingClientRect();\r\n        result.teTop = Math.max(0, Math.min(display.wrapper.clientHeight - 10,\r\n                                            headPos.top + lineOff.top - wrapOff.top));\r\n        result.teLeft = Math.max(0, Math.min(display.wrapper.clientWidth - 10,\r\n                                             headPos.left + lineOff.left - wrapOff.left));\r\n      }\r\n\r\n      return result;\r\n    },\r\n\r\n    showSelection: function(drawn) {\r\n      var cm = this.cm, display = cm.display;\r\n      removeChildrenAndAdd(display.cursorDiv, drawn.cursors);\r\n      removeChildrenAndAdd(display.selectionDiv, drawn.selection);\r\n      if (drawn.teTop != null) {\r\n        this.wrapper.style.top = drawn.teTop + \"px\";\r\n        this.wrapper.style.left = drawn.teLeft + \"px\";\r\n      }\r\n    },\r\n\r\n    // Reset the input to correspond to the selection (or to be empty,\r\n    // when not typing and nothing is selected)\r\n    reset: function(typing) {\r\n      if (this.contextMenuPending) return;\r\n      var minimal, selected, cm = this.cm, doc = cm.doc;\r\n      if (cm.somethingSelected()) {\r\n        this.prevInput = \"\";\r\n        var range = doc.sel.primary();\r\n        minimal = hasCopyEvent &&\r\n          (range.to().line - range.from().line > 100 || (selected = cm.getSelection()).length > 1000);\r\n        var content = minimal ? \"-\" : selected || cm.getSelection();\r\n        this.textarea.value = content;\r\n        if (cm.state.focused) selectInput(this.textarea);\r\n        if (ie && ie_version >= 9) this.hasSelection = content;\r\n      } else if (!typing) {\r\n        this.prevInput = this.textarea.value = \"\";\r\n        if (ie && ie_version >= 9) this.hasSelection = null;\r\n      }\r\n      this.inaccurateSelection = minimal;\r\n    },\r\n\r\n    getField: function() { return this.textarea; },\r\n\r\n    supportsTouch: function() { return false; },\r\n\r\n    focus: function() {\r\n      if (this.cm.options.readOnly != \"nocursor\" && (!mobile || activeElt() != this.textarea)) {\r\n        try { this.textarea.focus(); }\r\n        catch (e) {} // IE8 will throw if the textarea is display: none or not in DOM\r\n      }\r\n    },\r\n\r\n    blur: function() { this.textarea.blur(); },\r\n\r\n    resetPosition: function() {\r\n      this.wrapper.style.top = this.wrapper.style.left = 0;\r\n    },\r\n\r\n    receivedFocus: function() { this.slowPoll(); },\r\n\r\n    // Poll for input changes, using the normal rate of polling. This\r\n    // runs as long as the editor is focused.\r\n    slowPoll: function() {\r\n      var input = this;\r\n      if (input.pollingFast) return;\r\n      input.polling.set(this.cm.options.pollInterval, function() {\r\n        input.poll();\r\n        if (input.cm.state.focused) input.slowPoll();\r\n      });\r\n    },\r\n\r\n    // When an event has just come in that is likely to add or change\r\n    // something in the input textarea, we poll faster, to ensure that\r\n    // the change appears on the screen quickly.\r\n    fastPoll: function() {\r\n      var missed = false, input = this;\r\n      input.pollingFast = true;\r\n      function p() {\r\n        var changed = input.poll();\r\n        if (!changed && !missed) {missed = true; input.polling.set(60, p);}\r\n        else {input.pollingFast = false; input.slowPoll();}\r\n      }\r\n      input.polling.set(20, p);\r\n    },\r\n\r\n    // Read input from the textarea, and update the document to match.\r\n    // When something is selected, it is present in the textarea, and\r\n    // selected (unless it is huge, in which case a placeholder is\r\n    // used). When nothing is selected, the cursor sits after previously\r\n    // seen text (can be empty), which is stored in prevInput (we must\r\n    // not reset the textarea when typing, because that breaks IME).\r\n    poll: function() {\r\n      var cm = this.cm, input = this.textarea, prevInput = this.prevInput;\r\n      // Since this is called a *lot*, try to bail out as cheaply as\r\n      // possible when it is clear that nothing happened. hasSelection\r\n      // will be the case when there is a lot of text in the textarea,\r\n      // in which case reading its value would be expensive.\r\n      if (this.contextMenuPending || !cm.state.focused ||\r\n          (hasSelection(input) && !prevInput && !this.composing) ||\r\n          cm.isReadOnly() || cm.options.disableInput || cm.state.keySeq)\r\n        return false;\r\n\r\n      var text = input.value;\r\n      // If nothing changed, bail.\r\n      if (text == prevInput && !cm.somethingSelected()) return false;\r\n      // Work around nonsensical selection resetting in IE9/10, and\r\n      // inexplicable appearance of private area unicode characters on\r\n      // some key combos in Mac (#2689).\r\n      if (ie && ie_version >= 9 && this.hasSelection === text ||\r\n          mac && /[\\uf700-\\uf7ff]/.test(text)) {\r\n        cm.display.input.reset();\r\n        return false;\r\n      }\r\n\r\n      if (cm.doc.sel == cm.display.selForContextMenu) {\r\n        var first = text.charCodeAt(0);\r\n        if (first == 0x200b && !prevInput) prevInput = \"\\u200b\";\r\n        if (first == 0x21da) { this.reset(); return this.cm.execCommand(\"undo\"); }\r\n      }\r\n      // Find the part of the input that is actually new\r\n      var same = 0, l = Math.min(prevInput.length, text.length);\r\n      while (same < l && prevInput.charCodeAt(same) == text.charCodeAt(same)) ++same;\r\n\r\n      var self = this;\r\n      runInOp(cm, function() {\r\n        applyTextInput(cm, text.slice(same), prevInput.length - same,\r\n                       null, self.composing ? \"*compose\" : null);\r\n\r\n        // Don't leave long text in the textarea, since it makes further polling slow\r\n        if (text.length > 1000 || text.indexOf(\"\\n\") > -1) input.value = self.prevInput = \"\";\r\n        else self.prevInput = text;\r\n\r\n        if (self.composing) {\r\n          self.composing.range.clear();\r\n          self.composing.range = cm.markText(self.composing.start, cm.getCursor(\"to\"),\r\n                                             {className: \"CodeMirror-composing\"});\r\n        }\r\n      });\r\n      return true;\r\n    },\r\n\r\n    ensurePolled: function() {\r\n      if (this.pollingFast && this.poll()) this.pollingFast = false;\r\n    },\r\n\r\n    onKeyPress: function() {\r\n      if (ie && ie_version >= 9) this.hasSelection = null;\r\n      this.fastPoll();\r\n    },\r\n\r\n    onContextMenu: function(e) {\r\n      var input = this, cm = input.cm, display = cm.display, te = input.textarea;\r\n      var pos = posFromMouse(cm, e), scrollPos = display.scroller.scrollTop;\r\n      if (!pos || presto) return; // Opera is difficult.\r\n\r\n      // Reset the current text selection only if the click is done outside of the selection\r\n      // and 'resetSelectionOnContextMenu' option is true.\r\n      var reset = cm.options.resetSelectionOnContextMenu;\r\n      if (reset && cm.doc.sel.contains(pos) == -1)\r\n        operation(cm, setSelection)(cm.doc, simpleSelection(pos), sel_dontScroll);\r\n\r\n      var oldCSS = te.style.cssText, oldWrapperCSS = input.wrapper.style.cssText;\r\n      input.wrapper.style.cssText = \"position: absolute\"\r\n      var wrapperBox = input.wrapper.getBoundingClientRect()\r\n      te.style.cssText = \"position: absolute; width: 30px; height: 30px; top: \" + (e.clientY - wrapperBox.top - 5) +\r\n        \"px; left: \" + (e.clientX - wrapperBox.left - 5) + \"px; z-index: 1000; background: \" +\r\n        (ie ? \"rgba(255, 255, 255, .05)\" : \"transparent\") +\r\n        \"; outline: none; border-width: 0; outline: none; overflow: hidden; opacity: .05; filter: alpha(opacity=5);\";\r\n      if (webkit) var oldScrollY = window.scrollY; // Work around Chrome issue (#2712)\r\n      display.input.focus();\r\n      if (webkit) window.scrollTo(null, oldScrollY);\r\n      display.input.reset();\r\n      // Adds \"Select all\" to context menu in FF\r\n      if (!cm.somethingSelected()) te.value = input.prevInput = \" \";\r\n      input.contextMenuPending = true;\r\n      display.selForContextMenu = cm.doc.sel;\r\n      clearTimeout(display.detectingSelectAll);\r\n\r\n      // Select-all will be greyed out if there's nothing to select, so\r\n      // this adds a zero-width space so that we can later check whether\r\n      // it got selected.\r\n      function prepareSelectAllHack() {\r\n        if (te.selectionStart != null) {\r\n          var selected = cm.somethingSelected();\r\n          var extval = \"\\u200b\" + (selected ? te.value : \"\");\r\n          te.value = \"\\u21da\"; // Used to catch context-menu undo\r\n          te.value = extval;\r\n          input.prevInput = selected ? \"\" : \"\\u200b\";\r\n          te.selectionStart = 1; te.selectionEnd = extval.length;\r\n          // Re-set this, in case some other handler touched the\r\n          // selection in the meantime.\r\n          display.selForContextMenu = cm.doc.sel;\r\n        }\r\n      }\r\n      function rehide() {\r\n        input.contextMenuPending = false;\r\n        input.wrapper.style.cssText = oldWrapperCSS\r\n        te.style.cssText = oldCSS;\r\n        if (ie && ie_version < 9) display.scrollbars.setScrollTop(display.scroller.scrollTop = scrollPos);\r\n\r\n        // Try to detect the user choosing select-all\r\n        if (te.selectionStart != null) {\r\n          if (!ie || (ie && ie_version < 9)) prepareSelectAllHack();\r\n          var i = 0, poll = function() {\r\n            if (display.selForContextMenu == cm.doc.sel && te.selectionStart == 0 &&\r\n                te.selectionEnd > 0 && input.prevInput == \"\\u200b\")\r\n              operation(cm, commands.selectAll)(cm);\r\n            else if (i++ < 10) display.detectingSelectAll = setTimeout(poll, 500);\r\n            else display.input.reset();\r\n          };\r\n          display.detectingSelectAll = setTimeout(poll, 200);\r\n        }\r\n      }\r\n\r\n      if (ie && ie_version >= 9) prepareSelectAllHack();\r\n      if (captureRightClick) {\r\n        e_stop(e);\r\n        var mouseup = function() {\r\n          off(window, \"mouseup\", mouseup);\r\n          setTimeout(rehide, 20);\r\n        };\r\n        on(window, \"mouseup\", mouseup);\r\n      } else {\r\n        setTimeout(rehide, 50);\r\n      }\r\n    },\r\n\r\n    readOnlyChanged: function(val) {\r\n      if (!val) this.reset();\r\n    },\r\n\r\n    setUneditable: nothing,\r\n\r\n    needsContentAttribute: false\r\n  });\r\n\r\n  function hiddenTextarea() {\r\n    var te = elt(\"textarea\", null, null, \"position: absolute; bottom: -1em; padding: 0; width: 1px; height: 1em; outline: none\");\r\n    var div = elt(\"div\", [te], null, \"overflow: hidden; position: relative; width: 3px; height: 0px;\");\r\n    // The textarea is kept positioned near the cursor to prevent the\r\n    // fact that it'll be scrolled into view on input from scrolling\r\n    // our fake cursor out of view. On webkit, when wrap=off, paste is\r\n    // very slow. So make the area wide instead.\r\n    if (webkit) te.style.width = \"1000px\";\r\n    else te.setAttribute(\"wrap\", \"off\");\r\n    // If border: 0; -- iOS fails to open keyboard (issue #1287)\r\n    if (ios) te.style.border = \"1px solid black\";\r\n    disableBrowserMagic(te);\r\n    return div;\r\n  }\r\n\r\n  return TextareaInput;\r\n\r\n});\r\n"]}