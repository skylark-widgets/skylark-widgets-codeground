{"version":3,"sources":["primitives/input/keymap.js"],"names":["define","CoderCtor","normalizeKeyName","name","alt","ctrl","shift","cmd","parts","split","length","i","mod","test","Error","getKeyMap","val","keyMap","CodeMirror","basic","Left","Right","Up","Down","End","Home","PageUp","PageDown","Delete","Backspace","Shift-Backspace","Tab","Shift-Tab","Enter","Insert","Esc","pcDefault","Ctrl-A","Ctrl-D","Ctrl-Z","Shift-Ctrl-Z","Ctrl-Y","Ctrl-Home","Ctrl-End","Ctrl-Up","Ctrl-Down","Ctrl-Left","Ctrl-Right","Alt-Left","Alt-Right","Ctrl-Backspace","Ctrl-Delete","Ctrl-S","Ctrl-F","Ctrl-G","Shift-Ctrl-G","Shift-Ctrl-F","Shift-Ctrl-R","Ctrl-[","Ctrl-]","Ctrl-U","Shift-Ctrl-U","Alt-U","fallthrough","emacsy","Ctrl-B","Ctrl-P","Ctrl-N","Alt-F","Alt-B","Ctrl-E","Ctrl-V","Shift-Ctrl-V","Ctrl-H","Alt-D","Alt-Backspace","Ctrl-K","Ctrl-T","Ctrl-O","macDefault","Cmd-A","Cmd-D","Cmd-Z","Shift-Cmd-Z","Cmd-Y","Cmd-Home","Cmd-Up","Cmd-End","Cmd-Down","Cmd-Left","Cmd-Right","Ctrl-Alt-Backspace","Alt-Delete","Cmd-S","Cmd-F","Cmd-G","Shift-Cmd-G","Cmd-Alt-F","Shift-Cmd-Alt-F","Cmd-[","Cmd-]","Cmd-Backspace","Cmd-Delete","Cmd-U","Shift-Cmd-U","mac","normalizeKeyMap","keymap","copy","keyname","hasOwnProperty","value","keys","map","join","slice","prev","prop","lookupKey","key","handle","context","found","call","Object","prototype","toString","result","isModifierKey","keyNames","keyCode","keyName","event","noShift","presto","base","altGraphKey","altKey","flipCtrlCmd","metaKey","ctrlKey","shiftKey"],"mappings":"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","file":"../../../primitives/input/keymap.js","sourcesContent":["define([\r\n  \"../CoderCtor\"\r\n],function(CoderCtor) {\r\n  // STANDARD KEYMAPS\r\n\r\n  var keyMap = CodeMirror.keyMap = {};\r\n\r\n  keyMap.basic = {\r\n    \"Left\": \"goCharLeft\", \r\n    \"Right\": \"goCharRight\", \r\n    \"Up\": \"goLineUp\", \r\n    \"Down\": \"goLineDown\",\r\n    \"End\": \"goLineEnd\", \r\n    \"Home\": \"goLineStartSmart\", \r\n    \"PageUp\": \"goPageUp\", \r\n    \"PageDown\": \"goPageDown\",\r\n    \"Delete\": \"delCharAfter\", \r\n    \"Backspace\": \"delCharBefore\", \r\n    \"Shift-Backspace\": \"delCharBefore\",\r\n    \"Tab\": \"defaultTab\", \r\n    \"Shift-Tab\": \"indentAuto\",\r\n    \"Enter\": \"newlineAndIndent\", \r\n    \"Insert\": \"toggleOverwrite\",\r\n    \"Esc\": \"singleSelection\"\r\n  };\r\n  // Note that the save and find-related commands aren't defined by\r\n  // default. User code or addons can define them. Unknown commands\r\n  // are simply ignored.\r\n  keyMap.pcDefault = {\r\n    \"Ctrl-A\": \"selectAll\", \r\n    \"Ctrl-D\": \"deleteLine\", \r\n    \"Ctrl-Z\": \"undo\", \r\n    \"Shift-Ctrl-Z\": \"redo\", \r\n    \"Ctrl-Y\": \"redo\",\r\n    \"Ctrl-Home\": \"goDocStart\", \r\n    \"Ctrl-End\": \"goDocEnd\", \r\n    \"Ctrl-Up\": \"goLineUp\", \r\n    \"Ctrl-Down\": \"goLineDown\",\r\n    \"Ctrl-Left\": \"goGroupLeft\", \r\n    \"Ctrl-Right\": \"goGroupRight\", \r\n    \"Alt-Left\": \"goLineStart\", \r\n    \"Alt-Right\": \"goLineEnd\",\r\n    \"Ctrl-Backspace\": \"delGroupBefore\", \r\n    \"Ctrl-Delete\": \"delGroupAfter\", \r\n    \"Ctrl-S\": \"save\", \r\n    \"Ctrl-F\": \"find\",\r\n    \"Ctrl-G\": \"findNext\", \r\n    \"Shift-Ctrl-G\": \"findPrev\", \r\n    \"Shift-Ctrl-F\": \"replace\", \r\n    \"Shift-Ctrl-R\": \"replaceAll\",\r\n    \"Ctrl-[\": \"indentLess\", \r\n    \"Ctrl-]\": \"indentMore\",\r\n    \"Ctrl-U\": \"undoSelection\", \r\n    \"Shift-Ctrl-U\": \"redoSelection\", \r\n    \"Alt-U\": \"redoSelection\",\r\n    fallthrough: \"basic\"\r\n  };\r\n\r\n  // Very basic readline/emacs-style bindings, which are standard on Mac.\r\n  keyMap.emacsy = {\r\n    \"Ctrl-F\": \"goCharRight\", \r\n    \"Ctrl-B\": \"goCharLeft\", \r\n    \"Ctrl-P\": \"goLineUp\", \r\n    \"Ctrl-N\": \"goLineDown\",\r\n    \"Alt-F\": \"goWordRight\", \r\n    \"Alt-B\": \"goWordLeft\", \r\n    \"Ctrl-A\": \"goLineStart\", \r\n    \"Ctrl-E\": \"goLineEnd\",\r\n    \"Ctrl-V\": \"goPageDown\", \r\n    \"Shift-Ctrl-V\": \"goPageUp\", \r\n    \"Ctrl-D\": \"delCharAfter\", \r\n    \"Ctrl-H\": \"delCharBefore\",\r\n    \"Alt-D\": \"delWordAfter\", \r\n    \"Alt-Backspace\": \"delWordBefore\", \r\n    \"Ctrl-K\": \"killLine\", \r\n    \"Ctrl-T\": \"transposeChars\",\r\n    \"Ctrl-O\": \"openLine\"\r\n  };\r\n\r\n  keyMap.macDefault = {\r\n    \"Cmd-A\": \"selectAll\", \r\n    \"Cmd-D\": \"deleteLine\", \r\n    \"Cmd-Z\": \"undo\", \r\n    \"Shift-Cmd-Z\": \"redo\", \r\n    \"Cmd-Y\": \"redo\",\r\n    \"Cmd-Home\": \"goDocStart\", \r\n    \"Cmd-Up\": \"goDocStart\", \r\n    \"Cmd-End\": \"goDocEnd\", \r\n    \"Cmd-Down\": \"goDocEnd\", \r\n    \"Alt-Left\": \"goGroupLeft\",\r\n    \"Alt-Right\": \"goGroupRight\", \r\n    \"Cmd-Left\": \"goLineLeft\", \r\n    \"Cmd-Right\": \"goLineRight\", \r\n    \"Alt-Backspace\": \"delGroupBefore\",\r\n    \"Ctrl-Alt-Backspace\": \"delGroupAfter\", \r\n    \"Alt-Delete\": \"delGroupAfter\", \r\n    \"Cmd-S\": \"save\", \r\n    \"Cmd-F\": \"find\",\r\n    \"Cmd-G\": \"findNext\", \r\n    \"Shift-Cmd-G\": \"findPrev\", \r\n    \"Cmd-Alt-F\": \"replace\", \r\n    \"Shift-Cmd-Alt-F\": \"replaceAll\",\r\n    \"Cmd-[\": \"indentLess\", \r\n    \"Cmd-]\": \"indentMore\", \r\n    \"Cmd-Backspace\": \"delWrappedLineLeft\", \r\n    \"Cmd-Delete\": \"delWrappedLineRight\",\r\n    \"Cmd-U\": \"undoSelection\", \r\n    \"Shift-Cmd-U\": \"redoSelection\", \r\n    \"Ctrl-Up\": \"goDocStart\", \r\n    \"Ctrl-Down\": \"goDocEnd\",\r\n    fallthrough: [\"basic\", \"emacsy\"]\r\n  };\r\n  \r\n  keyMap[\"default\"] = mac ? keyMap.macDefault : keyMap.pcDefault;\r\n\r\n  // KEYMAP DISPATCH\r\n\r\n  function normalizeKeyName(name) {\r\n    var parts = name.split(/-(?!$)/), name = parts[parts.length - 1];\r\n    var alt, ctrl, shift, cmd;\r\n    for (var i = 0; i < parts.length - 1; i++) {\r\n      var mod = parts[i];\r\n      if (/^(cmd|meta|m)$/i.test(mod)) cmd = true;\r\n      else if (/^a(lt)?$/i.test(mod)) alt = true;\r\n      else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;\r\n      else if (/^s(hift)$/i.test(mod)) shift = true;\r\n      else throw new Error(\"Unrecognized modifier name: \" + mod);\r\n    }\r\n    if (alt) name = \"Alt-\" + name;\r\n    if (ctrl) name = \"Ctrl-\" + name;\r\n    if (cmd) name = \"Cmd-\" + name;\r\n    if (shift) name = \"Shift-\" + name;\r\n    return name;\r\n  }\r\n\r\n  // This is a kludge to keep keymaps mostly working as raw objects\r\n  // (backwards compatibility) while at the same time support features\r\n  // like normalization and multi-stroke key bindings. It compiles a\r\n  // new normalized keymap, and then updates the old object to reflect\r\n  // this.\r\n  CodeMirror.normalizeKeyMap = function(keymap) {\r\n    var copy = {};\r\n    for (var keyname in keymap) if (keymap.hasOwnProperty(keyname)) {\r\n      var value = keymap[keyname];\r\n      if (/^(name|fallthrough|(de|at)tach)$/.test(keyname)) continue;\r\n      if (value == \"...\") { delete keymap[keyname]; continue; }\r\n\r\n      var keys = map(keyname.split(\" \"), normalizeKeyName);\r\n      for (var i = 0; i < keys.length; i++) {\r\n        var val, name;\r\n        if (i == keys.length - 1) {\r\n          name = keys.join(\" \");\r\n          val = value;\r\n        } else {\r\n          name = keys.slice(0, i + 1).join(\" \");\r\n          val = \"...\";\r\n        }\r\n        var prev = copy[name];\r\n        if (!prev) copy[name] = val;\r\n        else if (prev != val) throw new Error(\"Inconsistent bindings for \" + name);\r\n      }\r\n      delete keymap[keyname];\r\n    }\r\n    for (var prop in copy) keymap[prop] = copy[prop];\r\n    return keymap;\r\n  };\r\n\r\n  var lookupKey = CodeMirror.lookupKey = function(key, map, handle, context) {\r\n    map = getKeyMap(map);\r\n    var found = map.call ? map.call(key, context) : map[key];\r\n    if (found === false) return \"nothing\";\r\n    if (found === \"...\") return \"multi\";\r\n    if (found != null && handle(found)) return \"handled\";\r\n\r\n    if (map.fallthrough) {\r\n      if (Object.prototype.toString.call(map.fallthrough) != \"[object Array]\")\r\n        return lookupKey(key, map.fallthrough, handle, context);\r\n      for (var i = 0; i < map.fallthrough.length; i++) {\r\n        var result = lookupKey(key, map.fallthrough[i], handle, context);\r\n        if (result) return result;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Modifier key presses don't count as 'real' key presses for the\r\n  // purpose of keymap fallthrough.\r\n  var isModifierKey = CodeMirror.isModifierKey = function(value) {\r\n    var name = typeof value == \"string\" ? value : keyNames[value.keyCode];\r\n    return name == \"Ctrl\" || name == \"Alt\" || name == \"Shift\" || name == \"Mod\";\r\n  };\r\n\r\n  // Look up the name of a key as indicated by an event object.\r\n  var keyName = CodeMirror.keyName = function(event, noShift) {\r\n    if (presto && event.keyCode == 34 && event[\"char\"]) return false;\r\n    var base = keyNames[event.keyCode], name = base;\r\n    if (name == null || event.altGraphKey) return false;\r\n    if (event.altKey && base != \"Alt\") name = \"Alt-\" + name;\r\n    if ((flipCtrlCmd ? event.metaKey : event.ctrlKey) && base != \"Ctrl\") name = \"Ctrl-\" + name;\r\n    if ((flipCtrlCmd ? event.ctrlKey : event.metaKey) && base != \"Cmd\") name = \"Cmd-\" + name;\r\n    if (!noShift && event.shiftKey && base != \"Shift\") name = \"Shift-\" + name;\r\n    return name;\r\n  };\r\n\r\n  function getKeyMap(val) {\r\n    return typeof val == \"string\" ? keyMap[val] : val;\r\n  }\r\n\r\n\r\n});\r\n"]}