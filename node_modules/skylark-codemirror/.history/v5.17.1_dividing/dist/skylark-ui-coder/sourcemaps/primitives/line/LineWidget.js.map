{"version":3,"sources":["primitives/line/LineWidget.js"],"names":["define","Evented","CoderCtor","adjustScrollWhenAboveVisible","cm","line","diff","heightAtLine","curOp","scrollTop","doc","addToScrollPos","widgetHeight","widget","height","contains","document","body","node","parentStyle","coverGutter","display","gutters","offsetWidth","noHScroll","wrapper","clientWidth","removeChildrenAndAdd","measure","elt","parentNode","offsetHeight","inherit","_construct","options","opt","hasOwnProperty","this","clear","ws","widgets","no","lineNo","i","length","splice","updateLineHeight","Math","max","runInOp","regLineChange","changed","oldH","forceUpdate"],"mappings":";;;;;;;AAAAA,QACE,wBACA,gBACA,SAASC,EAAQC,GAgDjB,QAASC,GAA6BC,EAAIC,EAAMC,GAC1CC,aAAaF,IAAUD,EAAGI,OAASJ,EAAGI,MAAMC,WAAcL,EAAGM,IAAID,YACnEE,eAAeP,EAAI,KAAME,GAG7B,QAASM,GAAaC,GACpB,GAAqB,MAAjBA,EAAOC,OAAgB,MAAOD,GAAOC,MACzC,IAAIV,GAAKS,EAAOH,IAAIN,EACpB,KAAKA,EAAI,MAAO,EAChB,KAAKW,SAASC,SAASC,KAAMJ,EAAOK,MAAO,CACzC,GAAIC,GAAc,qBACdN,GAAOO,cACTD,GAAe,iBAAmBf,EAAGiB,QAAQC,QAAQC,YAAc,OACjEV,EAAOW,YACTL,GAAe,UAAYf,EAAGiB,QAAQI,QAAQC,YAAc,OAC9DC,qBAAqBvB,EAAGiB,QAAQO,QAASC,IAAI,OAAQhB,EAAOK,MAAO,KAAMC,IAE3E,MAAON,GAAOC,OAASD,EAAOK,KAAKY,WAAWC,aA7D/B9B,EAAQ+B,SACvBC,WAAa,SAASvB,EAAKQ,EAAMgB,GAC/B,GAAIA,EACF,IAAK,GAAIC,KAAOD,GACVA,EAAQE,eAAeD,KACzBE,KAAKF,GAAOD,EAAQC,GAI1BE,MAAK3B,IAAMA,EACX2B,KAAKnB,KAAOA,GAGdoB,MAAQ,WACN,GAAIlC,GAAKiC,KAAK3B,IAAIN,GACdmC,EAAKF,KAAKhC,KAAKmC,QACfnC,EAAOgC,KAAKhC,KACZoC,EAAKC,OAAOrC,EAEhB,IAAU,MAANoC,GAAeF,EAAnB,CACA,IAAK,GAAII,GAAI,EAAGA,EAAIJ,EAAGK,SAAUD,EAAOJ,EAAGI,IAAMN,MAAME,EAAGM,OAAOF,IAAK,EACjEJ,GAAGK,SAAQvC,EAAKmC,QAAU,KAC/B,IAAI1B,GAASF,EAAayB,KAE1BS,kBAAiBzC,EAAM0C,KAAKC,IAAI,EAAG3C,EAAKS,OAASA,IAC7CV,GAAI6C,QAAQ7C,EAAI,WAClBA,EAAGD,6BAA6BE,GAAOS,GACvCV,EAAG8C,cAAeT,EAAI,cAI1BU,QAAU,WACR,GAAIC,GAAOf,KAAKvB,OAAQV,EAAKiC,KAAK3B,IAAIN,GAAIC,EAAOgC,KAAKhC,IACtDgC,MAAKvB,OAAS,IACd,IAAIR,GAAOM,EAAayB,MAAQe,CAC3B9C,KACLwC,iBAAiBzC,EAAMA,EAAKS,OAASR,GACjCF,GAAI6C,QAAQ7C,EAAI,WAClBA,EAAGI,MAAM6C,aAAc,EACvBlD,EAA6BC,EAAIC,EAAMC","file":"../../../primitives/line/LineWidget.js","sourcesContent":["define([\r\n  \"skylark-langx/Evented\",\r\n  \"../CoderCtor\"\r\n],function(Evented,CoderCtor) {\r\n\r\n  // Line widgets are block elements displayed above or below a line.\r\n\r\n  var LineWidget = Evented.inherit({\r\n    _construct : function(doc, node, options) {\r\n      if (options) {\r\n        for (var opt in options) {\r\n          if (options.hasOwnProperty(opt)) {\r\n            this[opt] = options[opt];\r\n          }\r\n        }\r\n      }\r\n      this.doc = doc;\r\n      this.node = node;\r\n    },\r\n\r\n    clear : function() {\r\n      var cm = this.doc.cm, \r\n          ws = this.line.widgets, \r\n          line = this.line, \r\n          no = lineNo(line);\r\n\r\n      if (no == null || !ws) return;\r\n      for (var i = 0; i < ws.length; ++i) if (ws[i] == this) ws.splice(i--, 1);\r\n      if (!ws.length) line.widgets = null;\r\n      var height = widgetHeight(this);\r\n\r\n      updateLineHeight(line, Math.max(0, line.height - height));\r\n      if (cm) runInOp(cm, function() {\r\n        cm.adjustScrollWhenAboveVisible(line, -height);\r\n        cm.regLineChange( no, \"widget\");\r\n      });\r\n    },\r\n\r\n    changed : function() {\r\n      var oldH = this.height, cm = this.doc.cm, line = this.line;\r\n      this.height = null;\r\n      var diff = widgetHeight(this) - oldH;\r\n      if (!diff) return;\r\n      updateLineHeight(line, line.height + diff);\r\n      if (cm) runInOp(cm, function() {\r\n        cm.curOp.forceUpdate = true;\r\n        adjustScrollWhenAboveVisible(cm, line, diff);\r\n      });\r\n    }\r\n  });\r\n\r\n  function adjustScrollWhenAboveVisible(cm, line, diff) {\r\n    if (heightAtLine(line) < ((cm.curOp && cm.curOp.scrollTop) || cm.doc.scrollTop))\r\n      addToScrollPos(cm, null, diff);\r\n  }\r\n\r\n  function widgetHeight(widget) {\r\n    if (widget.height != null) return widget.height;\r\n    var cm = widget.doc.cm;\r\n    if (!cm) return 0;\r\n    if (!contains(document.body, widget.node)) {\r\n      var parentStyle = \"position: relative;\";\r\n      if (widget.coverGutter)\r\n        parentStyle += \"margin-left: -\" + cm.display.gutters.offsetWidth + \"px;\";\r\n      if (widget.noHScroll)\r\n        parentStyle += \"width: \" + cm.display.wrapper.clientWidth + \"px;\";\r\n      removeChildrenAndAdd(cm.display.measure, elt(\"div\", [widget.node], null, parentStyle));\r\n    }\r\n    return widget.height = widget.node.parentNode.offsetHeight;\r\n  }\r\n\r\n  function addLineWidget(doc, handle, node, options) {\r\n    var widget = new LineWidget(doc, node, options);\r\n    var cm = doc.cm;\r\n    if (cm && widget.noHScroll) cm.display.alignWidgets = true;\r\n    changeLine(handle, \"widget\", function(line) {\r\n      var widgets = line.widgets || (line.widgets = []);\r\n      if (widget.insertAt == null) widgets.push(widget);\r\n      else widgets.splice(Math.min(widgets.length - 1, Math.max(0, widget.insertAt)), 0, widget);\r\n      widget.line = line;\r\n      if (cm && !lineIsHidden(doc, line)) {\r\n        var aboveVisible = heightAtLine(line) < doc.scrollTop;\r\n        updateLineHeight(line, line.height + widgetHeight(widget));\r\n        if (aboveVisible) addToScrollPos(cm, null, widget.height);\r\n        cm.curOp.forceUpdate = true;\r\n      }\r\n      return true;\r\n    });\r\n    return widget;\r\n  }\r\n\r\n\r\n});\r\n"]}