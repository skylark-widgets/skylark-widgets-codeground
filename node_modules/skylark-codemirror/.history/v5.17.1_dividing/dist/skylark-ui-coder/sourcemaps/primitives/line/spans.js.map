{"version":3,"sources":["primitives/line/spans.js"],"names":["define","Evented","Line","CoderCtor","partial","detachMarkedSpans","line","this","spans","markedSpans","i","length","marker","detachLine","attachMarkedSpans","attachLine","updateLineHeight","height","diff","n","parent"],"mappings":";;;;;;;AAAAA,QACE,wBACA,0BACA,gBACA,SAASC,EAASC,EAAMC,GAIxBD,EAAKE,SAEHC,kBAAoB,WAClB,GAAIC,GAAOC,KAEPC,EAAQF,EAAKG,WACjB,IAAKD,EAAL,CACA,IAAK,GAAIE,GAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAClCF,EAAME,GAAGE,OAAOC,WAAWP,EAC7BA,GAAKG,YAAc,OAErBK,kBAAoB,SAAUN,GAC5B,GAAIF,GAAOC,IAEX,IAAKC,EAAL,CACA,IAAK,GAAIE,GAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAClCF,EAAME,GAAGE,OAAOG,WAAWT,EAC7BA,GAAKG,YAAcD,IAKrBQ,iBAAmB,SAAUC,GAC3B,GAAIX,GAAOC,KAEPW,EAAOD,EAASX,EAAKW,MACzB,IAAIC,EACF,IAAK,GAAIC,GAAIb,EAAMa,EAAGA,EAAIA,EAAEC,OAC1BD,EAAEF,QAAUC","file":"../../../primitives/line/spans.js","sourcesContent":["define([\r\n  \"skylark-langx/Evented\",\r\n  \"skylark-utils-text/Line\",\r\n  \"../CoderCtor\"\r\n],function(Evented, Line, CoderCtor) {\r\n\r\n  // Line extends\r\n\r\n  Line.partial({\r\n    // Connect or disconnect spans from a line.\r\n    detachMarkedSpans : function () {\r\n      var line = this;\r\n\r\n      var spans = line.markedSpans;\r\n      if (!spans) return;\r\n      for (var i = 0; i < spans.length; ++i)\r\n        spans[i].marker.detachLine(line);\r\n      line.markedSpans = null;\r\n    },\r\n    attachMarkedSpans : function (spans) {\r\n      var line = this;\r\n\r\n      if (!spans) return;\r\n      for (var i = 0; i < spans.length; ++i)\r\n        spans[i].marker.attachLine(line);\r\n      line.markedSpans = spans;\r\n    },\r\n\r\n    // Update the height of a line, propagating the height change\r\n    // upwards to parent nodes.\r\n    updateLineHeight : function (height) {\r\n      var line = this;\r\n\r\n      var diff = height - line.height;\r\n      if (diff) {\r\n        for (var n = line; n; n = n.parent) {\r\n          n.height += diff;\r\n        }\r\n      }\r\n    }    \r\n  });\r\n \r\n   \r\n  // TEXTMARKER SPANS\r\n\r\n  function MarkedSpan(marker, from, to) {\r\n    this.marker = marker;\r\n    this.from = from; this.to = to;\r\n  }\r\n\r\n  // Search an array of spans for a span matching the given marker.\r\n  function getMarkedSpanFor(spans, marker) {\r\n    if (spans) for (var i = 0; i < spans.length; ++i) {\r\n      var span = spans[i];\r\n      if (span.marker == marker) return span;\r\n    }\r\n  }\r\n  // Remove a span from an array, returning undefined if no spans are\r\n  // left (we don't store arrays for lines without spans).\r\n  function removeMarkedSpan(spans, span) {\r\n    for (var r, i = 0; i < spans.length; ++i)\r\n      if (spans[i] != span) (r || (r = [])).push(spans[i]);\r\n    return r;\r\n  }\r\n  // Add a span to a line.\r\n  function addMarkedSpan(line, span) {\r\n    line.markedSpans = line.markedSpans ? line.markedSpans.concat([span]) : [span];\r\n    span.marker.attachLine(line);\r\n  }\r\n\r\n  // Used for the algorithm that adjusts markers for a change in the\r\n  // document. These functions cut an array of spans at a given\r\n  // character position, returning an array of remaining chunks (or\r\n  // undefined if nothing remains).\r\n  function markedSpansBefore(old, startCh, isInsert) {\r\n    if (old) for (var i = 0, nw; i < old.length; ++i) {\r\n      var span = old[i], marker = span.marker;\r\n      var startsBefore = span.from == null || (marker.inclusiveLeft ? span.from <= startCh : span.from < startCh);\r\n      if (startsBefore || span.from == startCh && marker.type == \"bookmark\" && (!isInsert || !span.marker.insertLeft)) {\r\n        var endsAfter = span.to == null || (marker.inclusiveRight ? span.to >= startCh : span.to > startCh);\r\n        (nw || (nw = [])).push(new MarkedSpan(marker, span.from, endsAfter ? null : span.to));\r\n      }\r\n    }\r\n    return nw;\r\n  }\r\n  function markedSpansAfter(old, endCh, isInsert) {\r\n    if (old) for (var i = 0, nw; i < old.length; ++i) {\r\n      var span = old[i], marker = span.marker;\r\n      var endsAfter = span.to == null || (marker.inclusiveRight ? span.to >= endCh : span.to > endCh);\r\n      if (endsAfter || span.from == endCh && marker.type == \"bookmark\" && (!isInsert || span.marker.insertLeft)) {\r\n        var startsBefore = span.from == null || (marker.inclusiveLeft ? span.from <= endCh : span.from < endCh);\r\n        (nw || (nw = [])).push(new MarkedSpan(marker, startsBefore ? null : span.from - endCh,\r\n                                              span.to == null ? null : span.to - endCh));\r\n      }\r\n    }\r\n    return nw;\r\n  }\r\n\r\n  // Given a change object, compute the new set of marker spans that\r\n  // cover the line in which the change took place. Removes spans\r\n  // entirely within the change, reconnects spans belonging to the\r\n  // same marker that appear on both sides of the change, and cuts off\r\n  // spans partially within the change. Returns an array of span\r\n  // arrays with one element for each line in (after) the change.\r\n  function stretchSpansOverChange(doc, change) {\r\n    if (change.full) return null;\r\n    var oldFirst = isLine(doc, change.from.line) && getLine(doc, change.from.line).markedSpans;\r\n    var oldLast = isLine(doc, change.to.line) && getLine(doc, change.to.line).markedSpans;\r\n    if (!oldFirst && !oldLast) return null;\r\n\r\n    var startCh = change.from.ch, endCh = change.to.ch, isInsert = cmp(change.from, change.to) == 0;\r\n    // Get the spans that 'stick out' on both sides\r\n    var first = markedSpansBefore(oldFirst, startCh, isInsert);\r\n    var last = markedSpansAfter(oldLast, endCh, isInsert);\r\n\r\n    // Next, merge those two ends\r\n    var sameLine = change.text.length == 1, offset = lst(change.text).length + (sameLine ? startCh : 0);\r\n    if (first) {\r\n      // Fix up .to properties of first\r\n      for (var i = 0; i < first.length; ++i) {\r\n        var span = first[i];\r\n        if (span.to == null) {\r\n          var found = getMarkedSpanFor(last, span.marker);\r\n          if (!found) span.to = startCh;\r\n          else if (sameLine) span.to = found.to == null ? null : found.to + offset;\r\n        }\r\n      }\r\n    }\r\n    if (last) {\r\n      // Fix up .from in last (or move them into first in case of sameLine)\r\n      for (var i = 0; i < last.length; ++i) {\r\n        var span = last[i];\r\n        if (span.to != null) span.to += offset;\r\n        if (span.from == null) {\r\n          var found = getMarkedSpanFor(first, span.marker);\r\n          if (!found) {\r\n            span.from = offset;\r\n            if (sameLine) (first || (first = [])).push(span);\r\n          }\r\n        } else {\r\n          span.from += offset;\r\n          if (sameLine) (first || (first = [])).push(span);\r\n        }\r\n      }\r\n    }\r\n    // Make sure we didn't create any zero-length spans\r\n    if (first) first = clearEmptySpans(first);\r\n    if (last && last != first) last = clearEmptySpans(last);\r\n\r\n    var newMarkers = [first];\r\n    if (!sameLine) {\r\n      // Fill gap with whole-line-spans\r\n      var gap = change.text.length - 2, gapMarkers;\r\n      if (gap > 0 && first)\r\n        for (var i = 0; i < first.length; ++i)\r\n          if (first[i].to == null)\r\n            (gapMarkers || (gapMarkers = [])).push(new MarkedSpan(first[i].marker, null, null));\r\n      for (var i = 0; i < gap; ++i)\r\n        newMarkers.push(gapMarkers);\r\n      newMarkers.push(last);\r\n    }\r\n    return newMarkers;\r\n  }\r\n\r\n  // Remove spans that are empty and don't have a clearWhenEmpty\r\n  // option of false.\r\n  function clearEmptySpans(spans) {\r\n    for (var i = 0; i < spans.length; ++i) {\r\n      var span = spans[i];\r\n      if (span.from != null && span.from == span.to && span.marker.clearWhenEmpty !== false)\r\n        spans.splice(i--, 1);\r\n    }\r\n    if (!spans.length) return null;\r\n    return spans;\r\n  }\r\n\r\n  // Used for un/re-doing changes from the history. Combines the\r\n  // result of computing the existing spans with the set of spans that\r\n  // existed in the history (so that deleting around a span and then\r\n  // undoing brings back the span).\r\n  function mergeOldSpans(doc, change) {\r\n    var old = getOldSpans(doc, change);\r\n    var stretched = stretchSpansOverChange(doc, change);\r\n    if (!old) return stretched;\r\n    if (!stretched) return old;\r\n\r\n    for (var i = 0; i < old.length; ++i) {\r\n      var oldCur = old[i], stretchCur = stretched[i];\r\n      if (oldCur && stretchCur) {\r\n        spans: for (var j = 0; j < stretchCur.length; ++j) {\r\n          var span = stretchCur[j];\r\n          for (var k = 0; k < oldCur.length; ++k)\r\n            if (oldCur[k].marker == span.marker) continue spans;\r\n          oldCur.push(span);\r\n        }\r\n      } else if (stretchCur) {\r\n        old[i] = stretchCur;\r\n      }\r\n    }\r\n    return old;\r\n  }\r\n\r\n  // Used to 'clip' out readOnly ranges when making a change.\r\n  function removeReadOnlyRanges(doc, from, to) {\r\n    var markers = null;\r\n    doc.iter(from.line, to.line + 1, function(line) {\r\n      if (line.markedSpans) for (var i = 0; i < line.markedSpans.length; ++i) {\r\n        var mark = line.markedSpans[i].marker;\r\n        if (mark.readOnly && (!markers || indexOf(markers, mark) == -1))\r\n          (markers || (markers = [])).push(mark);\r\n      }\r\n    });\r\n    if (!markers) return null;\r\n    var parts = [{from: from, to: to}];\r\n    for (var i = 0; i < markers.length; ++i) {\r\n      var mk = markers[i], m = mk.find(0);\r\n      for (var j = 0; j < parts.length; ++j) {\r\n        var p = parts[j];\r\n        if (cmp(p.to, m.from) < 0 || cmp(p.from, m.to) > 0) continue;\r\n        var newParts = [j, 1], dfrom = cmp(p.from, m.from), dto = cmp(p.to, m.to);\r\n        if (dfrom < 0 || !mk.inclusiveLeft && !dfrom)\r\n          newParts.push({from: p.from, to: m.from});\r\n        if (dto > 0 || !mk.inclusiveRight && !dto)\r\n          newParts.push({from: m.to, to: p.to});\r\n        parts.splice.apply(parts, newParts);\r\n        j += newParts.length - 1;\r\n      }\r\n    }\r\n    return parts;\r\n  }\r\n\r\n\r\n  // Helpers used when computing which overlapping collapsed span\r\n  // counts as the larger one.\r\n  function extraLeft(marker) { return marker.inclusiveLeft ? -1 : 0; }\r\n  function extraRight(marker) { return marker.inclusiveRight ? 1 : 0; }\r\n\r\n  // Returns a number indicating which of two overlapping collapsed\r\n  // spans is larger (and thus includes the other). Falls back to\r\n  // comparing ids when the spans cover exactly the same range.\r\n  function compareCollapsedMarkers(a, b) {\r\n    var lenDiff = a.lines.length - b.lines.length;\r\n    if (lenDiff != 0) return lenDiff;\r\n    var aPos = a.find(), bPos = b.find();\r\n    var fromCmp = cmp(aPos.from, bPos.from) || extraLeft(a) - extraLeft(b);\r\n    if (fromCmp) return -fromCmp;\r\n    var toCmp = cmp(aPos.to, bPos.to) || extraRight(a) - extraRight(b);\r\n    if (toCmp) return toCmp;\r\n    return b.id - a.id;\r\n  }\r\n\r\n  // Find out whether a line ends or starts in a collapsed span. If\r\n  // so, return the marker for that span.\r\n  function collapsedSpanAtSide(line, start) {\r\n    var sps = sawCollapsedSpans && line.markedSpans, found;\r\n    if (sps) for (var sp, i = 0; i < sps.length; ++i) {\r\n      sp = sps[i];\r\n      if (sp.marker.collapsed && (start ? sp.from : sp.to) == null &&\r\n          (!found || compareCollapsedMarkers(found, sp.marker) < 0))\r\n        found = sp.marker;\r\n    }\r\n    return found;\r\n  }\r\n  function collapsedSpanAtStart(line) { return collapsedSpanAtSide(line, true); }\r\n  function collapsedSpanAtEnd(line) { return collapsedSpanAtSide(line, false); }\r\n\r\n  // Test whether there exists a collapsed span that partially\r\n  // overlaps (covers the start or end, but not both) of a new span.\r\n  // Such overlap is not allowed.\r\n  function conflictingCollapsedRange(doc, lineNo, from, to, marker) {\r\n    var line = getLine(doc, lineNo);\r\n    var sps = sawCollapsedSpans && line.markedSpans;\r\n    if (sps) for (var i = 0; i < sps.length; ++i) {\r\n      var sp = sps[i];\r\n      if (!sp.marker.collapsed) continue;\r\n      var found = sp.marker.find(0);\r\n      var fromCmp = cmp(found.from, from) || extraLeft(sp.marker) - extraLeft(marker);\r\n      var toCmp = cmp(found.to, to) || extraRight(sp.marker) - extraRight(marker);\r\n      if (fromCmp >= 0 && toCmp <= 0 || fromCmp <= 0 && toCmp >= 0) continue;\r\n      if (fromCmp <= 0 && (sp.marker.inclusiveRight && marker.inclusiveLeft ? cmp(found.to, from) >= 0 : cmp(found.to, from) > 0) ||\r\n          fromCmp >= 0 && (sp.marker.inclusiveRight && marker.inclusiveLeft ? cmp(found.from, to) <= 0 : cmp(found.from, to) < 0))\r\n        return true;\r\n    }\r\n  }\r\n\r\n  // A visual line is a line as drawn on the screen. Folding, for\r\n  // example, can cause multiple logical lines to appear on the same\r\n  // visual line. This finds the start of the visual line that the\r\n  // given line is part of (usually that is the line itself).\r\n  function visualLine(line) {\r\n    var merged;\r\n    while (merged = collapsedSpanAtStart(line))\r\n      line = merged.find(-1, true).line;\r\n    return line;\r\n  }\r\n\r\n  // Returns an array of logical lines that continue the visual line\r\n  // started by the argument, or undefined if there are no such lines.\r\n  function visualLineContinued(line) {\r\n    var merged, lines;\r\n    while (merged = collapsedSpanAtEnd(line)) {\r\n      line = merged.find(1, true).line;\r\n      (lines || (lines = [])).push(line);\r\n    }\r\n    return lines;\r\n  }\r\n\r\n  // Get the line number of the start of the visual line that the\r\n  // given line number is part of.\r\n  function visualLineNo(doc, lineN) {\r\n    var line = getLine(doc, lineN), vis = visualLine(line);\r\n    if (line == vis) return lineN;\r\n    return lineNo(vis);\r\n  }\r\n  // Get the line number of the start of the next visual line after\r\n  // the given line.\r\n  function visualLineEndNo(doc, lineN) {\r\n    if (lineN > doc.lastLine()) return lineN;\r\n    var line = getLine(doc, lineN), merged;\r\n    if (!lineIsHidden(doc, line)) return lineN;\r\n    while (merged = collapsedSpanAtEnd(line))\r\n      line = merged.find(1, true).line;\r\n    return lineNo(line) + 1;\r\n  }\r\n\r\n  // Compute whether a line is hidden. Lines count as hidden when they\r\n  // are part of a visual line that starts with another line, or when\r\n  // they are entirely covered by collapsed, non-widget span.\r\n  function lineIsHidden(doc, line) {\r\n    var sps = sawCollapsedSpans && line.markedSpans;\r\n    if (sps) for (var sp, i = 0; i < sps.length; ++i) {\r\n      sp = sps[i];\r\n      if (!sp.marker.collapsed) continue;\r\n      if (sp.from == null) return true;\r\n      if (sp.marker.widgetNode) continue;\r\n      if (sp.from == 0 && sp.marker.inclusiveLeft && lineIsHiddenInner(doc, line, sp))\r\n        return true;\r\n    }\r\n  }\r\n  function lineIsHiddenInner(doc, line, span) {\r\n    if (span.to == null) {\r\n      var end = span.marker.find(1, true);\r\n      return lineIsHiddenInner(doc, end.line, getMarkedSpanFor(end.line.markedSpans, span.marker));\r\n    }\r\n    if (span.marker.inclusiveRight && span.to == line.text.length)\r\n      return true;\r\n    for (var sp, i = 0; i < line.markedSpans.length; ++i) {\r\n      sp = line.markedSpans[i];\r\n      if (sp.marker.collapsed && !sp.marker.widgetNode && sp.from == span.to &&\r\n          (sp.to == null || sp.to != span.from) &&\r\n          (sp.marker.inclusiveLeft || span.marker.inclusiveRight) &&\r\n          lineIsHiddenInner(doc, line, sp)) return true;\r\n    }\r\n  }\r\n\r\n    // Compute the character length of a line, taking into account\r\n  // collapsed ranges (see markText) that might hide parts, and join\r\n  // other lines onto it.\r\n  function lineLength(line) {\r\n    if (line.height == 0) return 0;\r\n    var len = line.text.length, merged, cur = line;\r\n    while (merged = collapsedSpanAtStart(cur)) {\r\n      var found = merged.find(0, true);\r\n      cur = found.from.line;\r\n      len += found.from.ch - found.to.ch;\r\n    }\r\n    cur = line;\r\n    while (merged = collapsedSpanAtEnd(cur)) {\r\n      var found = merged.find(0, true);\r\n      len -= cur.text.length - found.from.ch;\r\n      cur = found.to.line;\r\n      len += cur.text.length - found.to.ch;\r\n    }\r\n    return len;\r\n  }\r\n\r\n  // Find the longest line in the document.\r\n  function findMaxLine(cm) {\r\n    var d = cm.display, doc = cm.doc;\r\n    d.maxLine = getLine(doc, doc.first);\r\n    d.maxLineLength = lineLength(d.maxLine);\r\n    d.maxLineChanged = true;\r\n    doc.iter(function(line) {\r\n      var len = lineLength(line);\r\n      if (len > d.maxLineLength) {\r\n        d.maxLineLength = len;\r\n        d.maxLine = line;\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n});\r\n"]}