{"version":3,"sources":["primitives/models.js"],"names":["define","CoderCtor","modes","mimeModes","defineMode","name","mode","defaults","arguments","length","dependencies","Array","prototype","slice","call","defineMIME","mime","spec","resolveMode","hasOwnProperty","found","createObj","test","getMode","options","mfaCoderCtory","modeObj","modeExtensions","exts","prop","helperType","modeProps","token","stream","skipToEnd","extendMode","properties","copyObj","defineExtension","func","defineDocExtension","Doc","defineOption","option","initHooks","defineInitHook","f","push","helpers","registerHelper","type","value","_global","registerGlobalHelper","predicate","pred","val","copyState","state","nstate","n","concat","startState","a1","a2","innerMode","info"],"mappings":"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","file":"../../primitives/models.js","sourcesContent":["   // MODE DEFINITION AND QUERYING\r\ndefine([\r\n  \"../CoderCtor\"\r\n],function(CoderCtor) {\r\n\r\n  // Known modes, by name and by MIME\r\n  var modes = CoderCtor.modes = {}, \r\n      mimeModes = CoderCtor.mimeModes = {};\r\n\r\n  // Extra arguments are stored as the mode's dependencies, which is\r\n  // used by (legacy) mechanisms like loadmode.js to automatically\r\n  // load a mode. (Preferred mechanism is the require/define calls.)\r\n  CoderCtor.defineMode = function(name, mode) {\r\n    if (!CoderCtor.defaults.mode && name != \"null\") CoderCtor.defaults.mode = name;\r\n    if (arguments.length > 2)\r\n      mode.dependencies = Array.prototype.slice.call(arguments, 2);\r\n    modes[name] = mode;\r\n  };\r\n\r\n  CoderCtor.defineMIME = function(mime, spec) {\r\n    mimeModes[mime] = spec;\r\n  };\r\n\r\n  // Given a MIME type, a {name, ...options} config object, or a name\r\n  // string, return a mode config object.\r\n  CoderCtor.resolveMode = function(spec) {\r\n    if (typeof spec == \"string\" && mimeModes.hasOwnProperty(spec)) {\r\n      spec = mimeModes[spec];\r\n    } else if (spec && typeof spec.name == \"string\" && mimeModes.hasOwnProperty(spec.name)) {\r\n      var found = mimeModes[spec.name];\r\n      if (typeof found == \"string\") found = {name: found};\r\n      spec = createObj(found, spec);\r\n      spec.name = found.name;\r\n    } else if (typeof spec == \"string\" && /^[\\w\\-]+\\/[\\w\\-]+\\+xml$/.test(spec)) {\r\n      return CoderCtor.resolveMode(\"application/xml\");\r\n    }\r\n    if (typeof spec == \"string\") return {name: spec};\r\n    else return spec || {name: \"null\"};\r\n  };\r\n\r\n  // Given a mode spec (anything that resolveMode accepts), find and\r\n  // initialize an actual mode object.\r\n  CoderCtor.getMode = function(options, spec) {\r\n    var spec = CoderCtor.resolveMode(spec);\r\n    var mfaCoderCtory = modes[spec.name];\r\n    if (!mfaCoderCtory) return CoderCtor.getMode(options, \"text/plain\");\r\n    var modeObj = mfaCoderCtory(options, spec);\r\n    if (modeExtensions.hasOwnProperty(spec.name)) {\r\n      var exts = modeExtensions[spec.name];\r\n      for (var prop in exts) {\r\n        if (!exts.hasOwnProperty(prop)) continue;\r\n        if (modeObj.hasOwnProperty(prop)) modeObj[\"_\" + prop] = modeObj[prop];\r\n        modeObj[prop] = exts[prop];\r\n      }\r\n    }\r\n    modeObj.name = spec.name;\r\n    if (spec.helperType) modeObj.helperType = spec.helperType;\r\n    if (spec.modeProps) for (var prop in spec.modeProps)\r\n      modeObj[prop] = spec.modeProps[prop];\r\n\r\n    return modeObj;\r\n  };\r\n\r\n  // Minimal default mode.\r\n  CoderCtor.defineMode(\"null\", function() {\r\n    return {token: function(stream) {stream.skipToEnd();}};\r\n  });\r\n  CoderCtor.defineMIME(\"text/plain\", \"null\");\r\n\r\n  // This can be used to attach properties to mode objects from\r\n  // outside the actual mode definition.\r\n  var modeExtensions = CoderCtor.modeExtensions = {};\r\n  CoderCtor.extendMode = function(mode, properties) {\r\n    var exts = modeExtensions.hasOwnProperty(mode) ? modeExtensions[mode] : (modeExtensions[mode] = {});\r\n    copyObj(properties, exts);\r\n  };\r\n\r\n  // EXTENSIONS\r\n\r\n  CoderCtor.defineExtension = function(name, func) {\r\n    CoderCtor.prototype[name] = func;\r\n  };\r\n\r\n  CoderCtor.defineDocExtension = function(name, func) {\r\n    Doc.prototype[name] = func;\r\n  };\r\n  \r\n  CoderCtor.defineOption = option;\r\n\r\n  var initHooks = [];\r\n  CoderCtor.defineInitHook = function(f) {initHooks.push(f);};\r\n\r\n  var helpers = CoderCtor.helpers = {};\r\n  CoderCtor.registerHelper = function(type, name, value) {\r\n    if (!helpers.hasOwnProperty(type)) helpers[type] = CoderCtor[type] = {_global: []};\r\n    helpers[type][name] = value;\r\n  };\r\n  CoderCtor.registerGlobalHelper = function(type, name, predicate, value) {\r\n    CoderCtor.registerHelper(type, name, value);\r\n    helpers[type]._global.push({pred: predicate, val: value});\r\n  };\r\n\r\n  // MODE STATE HANDLING\r\n\r\n  // Utility functions for working with state. Exported because nested\r\n  // modes need to do this for their inner modes.\r\n\r\n  var copyState = CoderCtor.copyState = function(mode, state) {\r\n    if (state === true) return state;\r\n    if (mode.copyState) return mode.copyState(state);\r\n    var nstate = {};\r\n    for (var n in state) {\r\n      var val = state[n];\r\n      if (val instanceof Array) val = val.concat([]);\r\n      nstate[n] = val;\r\n    }\r\n    return nstate;\r\n  };\r\n\r\n  var startState = CoderCtor.startState = function(mode, a1, a2) {\r\n    return mode.startState ? mode.startState(a1, a2) : true;\r\n  };\r\n\r\n  // Given a mode and a state (for that mode), find the inner mode and\r\n  // state at the position that the state refers to.\r\n  CoderCtor.innerMode = function(mode, state) {\r\n    while (mode.innerMode) {\r\n      var info = mode.innerMode(state);\r\n      if (!info || info.mode == mode) break;\r\n      state = info.state;\r\n      mode = info.mode;\r\n    }\r\n    return info || {mode: mode, state: state};\r\n  };\r\n\r\n});"]}