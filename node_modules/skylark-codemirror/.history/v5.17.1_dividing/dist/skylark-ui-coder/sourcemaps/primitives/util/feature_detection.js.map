{"version":3,"sources":["primitives/util/feature_detection.js"],"names":["define","CoderCtor","ie","ie_version","div","elt","CodeMirror","splitLines","split","length","string","pos","result","l","nl","indexOf","line","slice","charAt","rt","push","window","getSelection","te","selectionStart","selectionEnd","e","range","ownerDocument","selection","createRange","parentElement","compareEndPoints","setAttribute","oncopy"],"mappings":";;;;;;;AAAAA,QACE,gBACA,SAASC,IAIS,WAGhB,GAAIC,IAAMC,WAAa,EAAG,OAAO,CACjC,IAAIC,GAAMC,IAAI,MACd,OAAO,aAAeD,IAAO,YAAcA,OA+BxBE,WAAWC,WAA2C,GAA9B,QAAQC,MAAM,MAAMC,OAAc,SAASC,GAEtF,IADA,GAAIC,GAAM,EAAGC,KAAaC,EAAIH,EAAOD,OAC9BE,GAAOE,GAAG,CACf,GAAIC,GAAKJ,EAAOK,QAAQ,KAAMJ,EAC1BG,SAAUA,EAAKJ,EAAOD,OAC1B,IAAIO,GAAON,EAAOO,MAAMN,EAA8B,MAAzBD,EAAOQ,OAAOJ,EAAK,GAAaA,EAAK,EAAIA,GAClEK,EAAKH,EAAKD,QAAQ,KAClBI,QACFP,EAAOQ,KAAKJ,EAAKC,MAAM,EAAGE,IAC1BR,GAAOQ,EAAK,IAEZP,EAAOQ,KAAKJ,GACZL,EAAMG,EAAK,GAGf,MAAOF,IACL,SAASF,GAAQ,MAAOA,GAAOF,MAAM,aAEtBa,OAAOC,aAAe,SAASC,GAChD,IAAM,MAAOA,GAAGC,gBAAkBD,EAAGE,aACrC,MAAMC,GAAK,OAAO,IAChB,SAASH,GACX,IAAK,GAAII,GAAQJ,EAAGK,cAAcC,UAAUC,cAC5C,MAAMJ,IACN,SAAKC,GAASA,EAAMI,iBAAmBR,IACe,GAA/CI,EAAMK,iBAAiB,aAAcL,IAG3B,WACjB,GAAID,GAAIrB,IAAI,MACZ,OAAI,UAAYqB,KAChBA,EAAEO,aAAa,SAAU,WACC,kBAAZP,GAAEQ","file":"../../../primitives/util/feature_detection.js","sourcesContent":["define([\r\n  \"../CoderCtor\"\r\n],function(CoderCtor) {\r\n  // FEATURE DETECTION\r\n\r\n  // Detect drag-and-drop\r\n  var dragAndDrop = function() {\r\n    // There is *some* kind of drag-and-drop support in IE6-8, but I\r\n    // couldn't get it to work yet.\r\n    if (ie && ie_version < 9) return false;\r\n    var div = elt('div');\r\n    return \"draggable\" in div || \"dragDrop\" in div;\r\n  }();\r\n\r\n  var zwspSupported;\r\n  function zeroWidthElement(measure) {\r\n    if (zwspSupported == null) {\r\n      var test = elt(\"span\", \"\\u200b\");\r\n      removeChildrenAndAdd(measure, elt(\"span\", [test, document.createTextNode(\"x\")]));\r\n      if (measure.firstChild.offsetHeight != 0)\r\n        zwspSupported = test.offsetWidth <= 1 && test.offsetHeight > 2 && !(ie && ie_version < 8);\r\n    }\r\n    var node = zwspSupported ? elt(\"span\", \"\\u200b\") :\r\n      elt(\"span\", \"\\u00a0\", null, \"display: inline-block; width: 1px; margin-right: -1px\");\r\n    node.setAttribute(\"cm-text\", \"\");\r\n    return node;\r\n  }\r\n\r\n  // Feature-detect IE's crummy client rect reporting for bidi text\r\n  var badBidiRects;\r\n  function hasBadBidiRects(measure) {\r\n    if (badBidiRects != null) return badBidiRects;\r\n    var txt = removeChildrenAndAdd(measure, document.createTextNode(\"A\\u062eA\"));\r\n    var r0 = range(txt, 0, 1).getBoundingClientRect();\r\n    var r1 = range(txt, 1, 2).getBoundingClientRect();\r\n    removeChildren(measure);\r\n    if (!r0 || r0.left == r0.right) return false; // Safari returns null in some cases (#2780)\r\n    return badBidiRects = (r1.right - r0.right < 3);\r\n  }\r\n\r\n  // See if \"\".split is the broken IE version, if so, provide an\r\n  // alternative way to split lines.\r\n  var splitLinesAuto = CodeMirror.splitLines = \"\\n\\nb\".split(/\\n/).length != 3 ? function(string) {\r\n    var pos = 0, result = [], l = string.length;\r\n    while (pos <= l) {\r\n      var nl = string.indexOf(\"\\n\", pos);\r\n      if (nl == -1) nl = string.length;\r\n      var line = string.slice(pos, string.charAt(nl - 1) == \"\\r\" ? nl - 1 : nl);\r\n      var rt = line.indexOf(\"\\r\");\r\n      if (rt != -1) {\r\n        result.push(line.slice(0, rt));\r\n        pos += rt + 1;\r\n      } else {\r\n        result.push(line);\r\n        pos = nl + 1;\r\n      }\r\n    }\r\n    return result;\r\n  } : function(string){return string.split(/\\r\\n?|\\n/);};\r\n\r\n  var hasSelection = window.getSelection ? function(te) {\r\n    try { return te.selectionStart != te.selectionEnd; }\r\n    catch(e) { return false; }\r\n  } : function(te) {\r\n    try {var range = te.ownerDocument.selection.createRange();}\r\n    catch(e) {}\r\n    if (!range || range.parentElement() != te) return false;\r\n    return range.compareEndPoints(\"StartToEnd\", range) != 0;\r\n  };\r\n\r\n  var hasCopyEvent = (function() {\r\n    var e = elt(\"div\");\r\n    if (\"oncopy\" in e) return true;\r\n    e.setAttribute(\"oncopy\", \"return;\");\r\n    return typeof e.oncopy == \"function\";\r\n  })();\r\n\r\n  var badZoomedRects = null;\r\n  function hasBadZoomedRects(measure) {\r\n    if (badZoomedRects != null) return badZoomedRects;\r\n    var node = removeChildrenAndAdd(measure, elt(\"span\", \"x\"));\r\n    var normal = node.getBoundingClientRect();\r\n    var fromRange = range(node, 0, 1).getBoundingClientRect();\r\n    return badZoomedRects = Math.abs(normal.left - fromRange.left) > 1;\r\n  }\r\n\r\n\r\n});\r\n"]}